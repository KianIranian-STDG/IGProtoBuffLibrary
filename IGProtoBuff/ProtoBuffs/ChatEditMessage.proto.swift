/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "ChatEditMessage.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ChatEditMessageRoot {
    public static let `default` = ChatEditMessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPChatEditMessage : GeneratedMessage {
    public typealias BuilderType = IGPChatEditMessage.Builder

    public static func == (lhs: IGPChatEditMessage, rhs: IGPChatEditMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageId == rhs.hasIgpMessageId) && (!lhs.hasIgpMessageId || lhs.igpMessageId == rhs.igpMessageId)
        fieldCheck = fieldCheck && (lhs.hasIgpMessage == rhs.hasIgpMessage) && (!lhs.hasIgpMessage || lhs.igpMessage == rhs.igpMessage)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpRoomId:Int64! = nil
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpMessageId:Int64! = nil
    public fileprivate(set) var hasIgpMessageId:Bool = false

    public fileprivate(set) var igpMessage:String! = nil
    public fileprivate(set) var hasIgpMessage:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpMessageId {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:igpMessageId)
        }
        if hasIgpMessage {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpMessage)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if hasIgpMessageId {
            serialize_size += igpMessageId.computeInt64Size(fieldNumber: 3)
        }
        if hasIgpMessage {
            serialize_size += igpMessage.computeStringSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPChatEditMessage.Builder {
        return IGPChatEditMessage.classBuilder() as! IGPChatEditMessage.Builder
    }
    public func getBuilder() -> IGPChatEditMessage.Builder {
        return classBuilder() as! IGPChatEditMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChatEditMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChatEditMessage.Builder()
    }
    public func toBuilder() throws -> IGPChatEditMessage.Builder {
        return try IGPChatEditMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPChatEditMessage) throws -> IGPChatEditMessage.Builder {
        return try IGPChatEditMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId!)"
        }
        if hasIgpMessageId {
            jsonMap["IGPMessageId"] = "\(igpMessageId!)"
        }
        if hasIgpMessage {
            jsonMap["IGPMessage"] = igpMessage
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpMessageId {
            output += "\(indent) igpMessageId: \(igpMessageId) \n"
        }
        if hasIgpMessage {
            output += "\(indent) igpMessage: \(igpMessage) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpMessageId {
                hashCode = (hashCode &* 31) &+ igpMessageId.hashValue
            }
            if hasIgpMessage {
                hashCode = (hashCode &* 31) &+ igpMessage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPChatEditMessage"
    }
    override public func className() -> String {
        return "IGPChatEditMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPChatEditMessage = IGPChatEditMessage()
        public func getMessage() -> IGPChatEditMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPChatEditMessage.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPChatEditMessage.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPChatEditMessage.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPChatEditMessage.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPChatEditMessage.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = nil
            return self
        }
        public var igpMessageId:Int64 {
            get {
                return builderResult.igpMessageId
            }
            set (value) {
                builderResult.hasIgpMessageId = true
                builderResult.igpMessageId = value
            }
        }
        public var hasIgpMessageId:Bool {
            get {
                return builderResult.hasIgpMessageId
            }
        }
        @discardableResult
        public func setIgpMessageId(_ value:Int64) -> IGPChatEditMessage.Builder {
            self.igpMessageId = value
            return self
        }
        @discardableResult
        public func clearIgpMessageId() -> IGPChatEditMessage.Builder{
            builderResult.hasIgpMessageId = false
            builderResult.igpMessageId = nil
            return self
        }
        public var igpMessage:String {
            get {
                return builderResult.igpMessage
            }
            set (value) {
                builderResult.hasIgpMessage = true
                builderResult.igpMessage = value
            }
        }
        public var hasIgpMessage:Bool {
            get {
                return builderResult.hasIgpMessage
            }
        }
        @discardableResult
        public func setIgpMessage(_ value:String) -> IGPChatEditMessage.Builder {
            self.igpMessage = value
            return self
        }
        @discardableResult
        public func clearIgpMessage() -> IGPChatEditMessage.Builder{
            builderResult.hasIgpMessage = false
            builderResult.igpMessage = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPChatEditMessage.Builder {
            builderResult = IGPChatEditMessage()
            return self
        }
        override public func clone() throws -> IGPChatEditMessage.Builder {
            return try IGPChatEditMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPChatEditMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPChatEditMessage {
            let returnMe:IGPChatEditMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPChatEditMessage) throws -> IGPChatEditMessage.Builder {
            if other == IGPChatEditMessage() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpMessageId {
                igpMessageId = other.igpMessageId
            }
            if other.hasIgpMessage {
                igpMessage = other.igpMessage
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChatEditMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 24:
                    igpMessageId = try codedInputStream.readInt64()

                case 34:
                    igpMessage = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChatEditMessage.Builder {
            let resultDecodedBuilder = IGPChatEditMessage.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? String {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)!
            } else if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? Int {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)
            }
            if let jsonValueIgpMessage = jsonMap["IGPMessage"] as? String {
                resultDecodedBuilder.igpMessage = jsonValueIgpMessage
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPChatEditMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPChatEditMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPChatEditMessageResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPChatEditMessageResponse.Builder

    public static func == (lhs: IGPChatEditMessageResponse, rhs: IGPChatEditMessageResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageId == rhs.hasIgpMessageId) && (!lhs.hasIgpMessageId || lhs.igpMessageId == rhs.igpMessageId)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageVersion == rhs.hasIgpMessageVersion) && (!lhs.hasIgpMessageVersion || lhs.igpMessageVersion == rhs.igpMessageVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpMessage == rhs.hasIgpMessage) && (!lhs.hasIgpMessage || lhs.igpMessage == rhs.igpMessage)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageType == rhs.hasIgpMessageType) && (!lhs.hasIgpMessageType || lhs.igpMessageType == rhs.igpMessageType)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRoomId:Int64! = nil
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpMessageId:Int64! = nil
    public fileprivate(set) var hasIgpMessageId:Bool = false

    public fileprivate(set) var igpMessageVersion:Int64! = nil
    public fileprivate(set) var hasIgpMessageVersion:Bool = false

    public fileprivate(set) var igpMessage:String! = nil
    public fileprivate(set) var hasIgpMessage:Bool = false

    public fileprivate(set) var igpMessageType:IGPRoomMessageType = IGPRoomMessageType.text
    public fileprivate(set) var hasIgpMessageType:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpMessageId {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:igpMessageId)
        }
        if hasIgpMessageVersion {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:igpMessageVersion)
        }
        if hasIgpMessage {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpMessage)
        }
        if hasIgpMessageType {
            try codedOutputStream.writeEnum(fieldNumber: 6, value:igpMessageType.rawValue)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if hasIgpMessageId {
            serialize_size += igpMessageId.computeInt64Size(fieldNumber: 3)
        }
        if hasIgpMessageVersion {
            serialize_size += igpMessageVersion.computeInt64Size(fieldNumber: 4)
        }
        if hasIgpMessage {
            serialize_size += igpMessage.computeStringSize(fieldNumber: 5)
        }
        if (hasIgpMessageType) {
            serialize_size += igpMessageType.rawValue.computeEnumSize(fieldNumber: 6)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPChatEditMessageResponse.Builder {
        return IGPChatEditMessageResponse.classBuilder() as! IGPChatEditMessageResponse.Builder
    }
    public func getBuilder() -> IGPChatEditMessageResponse.Builder {
        return classBuilder() as! IGPChatEditMessageResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChatEditMessageResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChatEditMessageResponse.Builder()
    }
    public func toBuilder() throws -> IGPChatEditMessageResponse.Builder {
        return try IGPChatEditMessageResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPChatEditMessageResponse) throws -> IGPChatEditMessageResponse.Builder {
        return try IGPChatEditMessageResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId!)"
        }
        if hasIgpMessageId {
            jsonMap["IGPMessageId"] = "\(igpMessageId!)"
        }
        if hasIgpMessageVersion {
            jsonMap["IGPMessageVersion"] = "\(igpMessageVersion!)"
        }
        if hasIgpMessage {
            jsonMap["IGPMessage"] = igpMessage
        }
        if hasIgpMessageType {
            jsonMap["IGPMessageType"] = igpMessageType.toString()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpMessageId {
            output += "\(indent) igpMessageId: \(igpMessageId) \n"
        }
        if hasIgpMessageVersion {
            output += "\(indent) igpMessageVersion: \(igpMessageVersion) \n"
        }
        if hasIgpMessage {
            output += "\(indent) igpMessage: \(igpMessage) \n"
        }
        if (hasIgpMessageType) {
            output += "\(indent) igpMessageType: \(igpMessageType.description)\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpMessageId {
                hashCode = (hashCode &* 31) &+ igpMessageId.hashValue
            }
            if hasIgpMessageVersion {
                hashCode = (hashCode &* 31) &+ igpMessageVersion.hashValue
            }
            if hasIgpMessage {
                hashCode = (hashCode &* 31) &+ igpMessage.hashValue
            }
            if hasIgpMessageType {
                 hashCode = (hashCode &* 31) &+ igpMessageType.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPChatEditMessageResponse"
    }
    override public func className() -> String {
        return "IGPChatEditMessageResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPChatEditMessageResponse = IGPChatEditMessageResponse()
        public func getMessage() -> IGPChatEditMessageResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPChatEditMessageResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPChatEditMessageResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPChatEditMessageResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPChatEditMessageResponse.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPChatEditMessageResponse.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = nil
            return self
        }
        public var igpMessageId:Int64 {
            get {
                return builderResult.igpMessageId
            }
            set (value) {
                builderResult.hasIgpMessageId = true
                builderResult.igpMessageId = value
            }
        }
        public var hasIgpMessageId:Bool {
            get {
                return builderResult.hasIgpMessageId
            }
        }
        @discardableResult
        public func setIgpMessageId(_ value:Int64) -> IGPChatEditMessageResponse.Builder {
            self.igpMessageId = value
            return self
        }
        @discardableResult
        public func clearIgpMessageId() -> IGPChatEditMessageResponse.Builder{
            builderResult.hasIgpMessageId = false
            builderResult.igpMessageId = nil
            return self
        }
        public var igpMessageVersion:Int64 {
            get {
                return builderResult.igpMessageVersion
            }
            set (value) {
                builderResult.hasIgpMessageVersion = true
                builderResult.igpMessageVersion = value
            }
        }
        public var hasIgpMessageVersion:Bool {
            get {
                return builderResult.hasIgpMessageVersion
            }
        }
        @discardableResult
        public func setIgpMessageVersion(_ value:Int64) -> IGPChatEditMessageResponse.Builder {
            self.igpMessageVersion = value
            return self
        }
        @discardableResult
        public func clearIgpMessageVersion() -> IGPChatEditMessageResponse.Builder{
            builderResult.hasIgpMessageVersion = false
            builderResult.igpMessageVersion = nil
            return self
        }
        public var igpMessage:String {
            get {
                return builderResult.igpMessage
            }
            set (value) {
                builderResult.hasIgpMessage = true
                builderResult.igpMessage = value
            }
        }
        public var hasIgpMessage:Bool {
            get {
                return builderResult.hasIgpMessage
            }
        }
        @discardableResult
        public func setIgpMessage(_ value:String) -> IGPChatEditMessageResponse.Builder {
            self.igpMessage = value
            return self
        }
        @discardableResult
        public func clearIgpMessage() -> IGPChatEditMessageResponse.Builder{
            builderResult.hasIgpMessage = false
            builderResult.igpMessage = nil
            return self
        }
            public var igpMessageType:IGPRoomMessageType {
                get {
                    return builderResult.igpMessageType
                }
                set (value) {
                    builderResult.hasIgpMessageType = true
                    builderResult.igpMessageType = value
                }
            }
            public var hasIgpMessageType:Bool{
                get {
                    return builderResult.hasIgpMessageType
                }
            }
        @discardableResult
            public func setIgpMessageType(_ value:IGPRoomMessageType) -> IGPChatEditMessageResponse.Builder {
              self.igpMessageType = value
              return self
            }
        @discardableResult
            public func clearIgpMessageType() -> IGPChatEditMessageResponse.Builder {
               builderResult.hasIgpMessageType = false
               builderResult.igpMessageType = .text
               return self
            }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPChatEditMessageResponse.Builder {
            builderResult = IGPChatEditMessageResponse()
            return self
        }
        override public func clone() throws -> IGPChatEditMessageResponse.Builder {
            return try IGPChatEditMessageResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPChatEditMessageResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPChatEditMessageResponse {
            let returnMe:IGPChatEditMessageResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPChatEditMessageResponse) throws -> IGPChatEditMessageResponse.Builder {
            if other == IGPChatEditMessageResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpMessageId {
                igpMessageId = other.igpMessageId
            }
            if other.hasIgpMessageVersion {
                igpMessageVersion = other.igpMessageVersion
            }
            if other.hasIgpMessage {
                igpMessage = other.igpMessage
            }
            if other.hasIgpMessageType {
                igpMessageType = other.igpMessageType
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChatEditMessageResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessageResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 24:
                    igpMessageId = try codedInputStream.readInt64()

                case 32:
                    igpMessageVersion = try codedInputStream.readInt64()

                case 42:
                    igpMessage = try codedInputStream.readString()

                case 48:
                    let valueIntigpMessageType = try codedInputStream.readEnum()
                    if let enumsigpMessageType = IGPRoomMessageType(rawValue:valueIntigpMessageType){
                        igpMessageType = enumsigpMessageType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 6, value:Int64(valueIntigpMessageType))
                    }

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChatEditMessageResponse.Builder {
            let resultDecodedBuilder = IGPChatEditMessageResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? String {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)!
            } else if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? Int {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)
            }
            if let jsonValueIgpMessageVersion = jsonMap["IGPMessageVersion"] as? String {
                resultDecodedBuilder.igpMessageVersion = Int64(jsonValueIgpMessageVersion)!
            } else if let jsonValueIgpMessageVersion = jsonMap["IGPMessageVersion"] as? Int {
                resultDecodedBuilder.igpMessageVersion = Int64(jsonValueIgpMessageVersion)
            }
            if let jsonValueIgpMessage = jsonMap["IGPMessage"] as? String {
                resultDecodedBuilder.igpMessage = jsonValueIgpMessage
            }
            if let jsonValueIgpMessageType = jsonMap["IGPMessageType"] as? String {
                resultDecodedBuilder.igpMessageType = try IGPRoomMessageType.fromString(jsonValueIgpMessageType)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPChatEditMessageResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPChatEditMessageResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPChatEditMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChatEditMessage> {
        var mergedArray = Array<IGPChatEditMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChatEditMessage? {
        return try IGPChatEditMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder().mergeFrom(data: data, extensionRegistry:ChatEditMessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessage {
        return try IGPChatEditMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpRoomId": return self.igpRoomId
        case "igpMessageId": return self.igpMessageId
        case "igpMessage": return self.igpMessage
        default: return nil
        }
    }
}
extension IGPChatEditMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPChatEditMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpRoomId": return self.igpRoomId
            case "igpMessageId": return self.igpMessageId
            case "igpMessage": return self.igpMessage
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageId = newSubscriptValue
            case "igpMessage":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpMessage = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPChatEditMessageResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChatEditMessageResponse> {
        var mergedArray = Array<IGPChatEditMessageResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChatEditMessageResponse? {
        return try IGPChatEditMessageResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder().mergeFrom(data: data, extensionRegistry:ChatEditMessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatEditMessageResponse {
        return try IGPChatEditMessageResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpRoomId": return self.igpRoomId
        case "igpMessageId": return self.igpMessageId
        case "igpMessageVersion": return self.igpMessageVersion
        case "igpMessage": return self.igpMessage
        case "igpMessageType": return self.igpMessageType
        default: return nil
        }
    }
}
extension IGPChatEditMessageResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPChatEditMessageResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpRoomId": return self.igpRoomId
            case "igpMessageId": return self.igpMessageId
            case "igpMessageVersion": return self.igpMessageVersion
            case "igpMessage": return self.igpMessage
            case "igpMessageType": return self.igpMessageType
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageId = newSubscriptValue
            case "igpMessageVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageVersion = newSubscriptValue
            case "igpMessage":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpMessage = newSubscriptValue
            case "igpMessageType":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageType else {
                    return
                }
                self.igpMessageType = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
