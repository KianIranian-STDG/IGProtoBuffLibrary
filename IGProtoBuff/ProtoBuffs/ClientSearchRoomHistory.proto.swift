/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "ClientSearchRoomHistory.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ClientSearchRoomHistoryRoot {
    public static let `default` = ClientSearchRoomHistoryRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPClientSearchRoomHistory : GeneratedMessage {

    public static func == (lhs: IGPClientSearchRoomHistory, rhs: IGPClientSearchRoomHistory) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpOffset == rhs.hasIgpOffset) && (!lhs.hasIgpOffset || lhs.igpOffset == rhs.igpOffset)
        fieldCheck = fieldCheck && (lhs.hasIgpFilter == rhs.hasIgpFilter) && (!lhs.hasIgpFilter || lhs.igpFilter == rhs.igpFilter)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPFilter:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case image = 0
            case video = 1
            case audio = 2
            case voice = 3
            case gif = 4
            case file = 5
            case url = 6
            public func toString() -> String {
                switch self {
                case .image: return "IMAGE"
                case .video: return "VIDEO"
                case .audio: return "AUDIO"
                case .voice: return "VOICE"
                case .gif: return "GIF"
                case .file: return "FILE"
                case .url: return "URL"
                }
            }
            public static func fromString(str:String) throws -> IGPClientSearchRoomHistory.IGPFilter {
                switch str {
                case "IMAGE":    return .image
                case "VIDEO":    return .video
                case "AUDIO":    return .audio
                case "VOICE":    return .voice
                case "GIF":    return .gif
                case "FILE":    return .file
                case "URL":    return .url
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .image: return ".image"
                case .video: return ".video"
                case .audio: return ".audio"
                case .voice: return ".voice"
                case .gif: return ".gif"
                case .file: return ".file"
                case .url: return ".url"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPFilter, rhs:IGPFilter) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpOffset:Int32 = Int32(0)
    public fileprivate(set) var hasIgpOffset:Bool = false

    public fileprivate(set) var igpFilter:IGPClientSearchRoomHistory.IGPFilter = IGPClientSearchRoomHistory.IGPFilter.image
    public fileprivate(set) var hasIgpFilter:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpOffset {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpOffset)
        }
        if hasIgpFilter {
            try codedOutputStream.writeEnum(fieldNumber: 4, value:igpFilter.rawValue)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if hasIgpOffset {
            serialize_size += igpOffset.computeInt32Size(fieldNumber: 3)
        }
        if (hasIgpFilter) {
            serialize_size += igpFilter.rawValue.computeEnumSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientSearchRoomHistory.Builder {
        return IGPClientSearchRoomHistory.classBuilder() as! IGPClientSearchRoomHistory.Builder
    }
    public func getBuilder() -> IGPClientSearchRoomHistory.Builder {
        return classBuilder() as! IGPClientSearchRoomHistory.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchRoomHistory.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchRoomHistory.Builder()
    }
    public func toBuilder() throws -> IGPClientSearchRoomHistory.Builder {
        return try IGPClientSearchRoomHistory.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientSearchRoomHistory) throws -> IGPClientSearchRoomHistory.Builder {
        return try IGPClientSearchRoomHistory.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        if hasIgpOffset {
            jsonMap["IGPOffset"] = Int(igpOffset)
        }
        if hasIgpFilter {
            jsonMap["IGPFilter"] = igpFilter.toString()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpOffset {
            output += "\(indent) igpOffset: \(igpOffset) \n"
        }
        if (hasIgpFilter) {
            output += "\(indent) igpFilter: \(igpFilter.description)\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpOffset {
                hashCode = (hashCode &* 31) &+ igpOffset.hashValue
            }
            if hasIgpFilter {
                 hashCode = (hashCode &* 31) &+ igpFilter.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientSearchRoomHistory"
    }
    override public func className() -> String {
        return "IGPClientSearchRoomHistory"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPClientSearchRoomHistory = IGPClientSearchRoomHistory()
        public func getMessage() -> IGPClientSearchRoomHistory {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPClientSearchRoomHistory.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPClientSearchRoomHistory.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPClientSearchRoomHistory.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPClientSearchRoomHistory.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPClientSearchRoomHistory.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
        public var igpOffset:Int32 {
            get {
                return builderResult.igpOffset
            }
            set (value) {
                builderResult.hasIgpOffset = true
                builderResult.igpOffset = value
            }
        }
        public var hasIgpOffset:Bool {
            get {
                return builderResult.hasIgpOffset
            }
        }
        @discardableResult
        public func setIgpOffset(_ value:Int32) -> IGPClientSearchRoomHistory.Builder {
            self.igpOffset = value
            return self
        }
        @discardableResult
        public func clearIgpOffset() -> IGPClientSearchRoomHistory.Builder{
            builderResult.hasIgpOffset = false
            builderResult.igpOffset = Int32(0)
            return self
        }
            public var igpFilter:IGPClientSearchRoomHistory.IGPFilter {
                get {
                    return builderResult.igpFilter
                }
                set (value) {
                    builderResult.hasIgpFilter = true
                    builderResult.igpFilter = value
                }
            }
            public var hasIgpFilter:Bool{
                get {
                    return builderResult.hasIgpFilter
                }
            }
        @discardableResult
            public func setIgpFilter(_ value:IGPClientSearchRoomHistory.IGPFilter) -> IGPClientSearchRoomHistory.Builder {
              self.igpFilter = value
              return self
            }
        @discardableResult
            public func clearIgpFilter() -> IGPClientSearchRoomHistory.Builder {
               builderResult.hasIgpFilter = false
               builderResult.igpFilter = .image
               return self
            }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientSearchRoomHistory.Builder {
            builderResult = IGPClientSearchRoomHistory()
            return self
        }
        override public func clone() throws -> IGPClientSearchRoomHistory.Builder {
            return try IGPClientSearchRoomHistory.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientSearchRoomHistory {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientSearchRoomHistory {
            let returnMe:IGPClientSearchRoomHistory = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientSearchRoomHistory) throws -> IGPClientSearchRoomHistory.Builder {
            if other == IGPClientSearchRoomHistory() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpOffset {
                igpOffset = other.igpOffset
            }
            if other.hasIgpFilter {
                igpFilter = other.igpFilter
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchRoomHistory.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistory.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 24:
                    igpOffset = try codedInputStream.readInt32()

                case 32:
                    let valueIntigpFilter = try codedInputStream.readEnum()
                    if let enumsigpFilter = IGPClientSearchRoomHistory.IGPFilter(rawValue:valueIntigpFilter){
                        igpFilter = enumsigpFilter
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 4, value:Int64(valueIntigpFilter))
                    }

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchRoomHistory.Builder {
            let resultDecodedBuilder = IGPClientSearchRoomHistory.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpOffset = jsonMap["IGPOffset"] as? Int {
                resultDecodedBuilder.igpOffset = Int32(jsonValueIgpOffset)
            } else if let jsonValueIgpOffset = jsonMap["IGPOffset"] as? String {
                resultDecodedBuilder.igpOffset = Int32(jsonValueIgpOffset)!
            }
            if let jsonValueIgpFilter = jsonMap["IGPFilter"] as? String {
                resultDecodedBuilder.igpFilter = try IGPClientSearchRoomHistory.IGPFilter.fromString(str: jsonValueIgpFilter)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientSearchRoomHistory.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientSearchRoomHistory.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPClientSearchRoomHistoryResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPClientSearchRoomHistoryResponse, rhs: IGPClientSearchRoomHistoryResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpTotalCount == rhs.hasIgpTotalCount) && (!lhs.hasIgpTotalCount || lhs.igpTotalCount == rhs.igpTotalCount)
        fieldCheck = fieldCheck && (lhs.hasIgpNotDeletedCount == rhs.hasIgpNotDeletedCount) && (!lhs.hasIgpNotDeletedCount || lhs.igpNotDeletedCount == rhs.igpNotDeletedCount)
        fieldCheck = fieldCheck && (lhs.igpResult == rhs.igpResult)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpTotalCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpTotalCount:Bool = false

    public fileprivate(set) var igpNotDeletedCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpNotDeletedCount:Bool = false

    public fileprivate(set) var igpResult:Array<IGPRoomMessage>  = Array<IGPRoomMessage>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpTotalCount {
            try codedOutputStream.writeInt32(fieldNumber: 2, value:igpTotalCount)
        }
        if hasIgpNotDeletedCount {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpNotDeletedCount)
        }
        for oneElementIgpResult in igpResult {
              try codedOutputStream.writeMessage(fieldNumber: 4, value:oneElementIgpResult)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpTotalCount {
            serialize_size += igpTotalCount.computeInt32Size(fieldNumber: 2)
        }
        if hasIgpNotDeletedCount {
            serialize_size += igpNotDeletedCount.computeInt32Size(fieldNumber: 3)
        }
        for oneElementIgpResult in igpResult {
            serialize_size += oneElementIgpResult.computeMessageSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientSearchRoomHistoryResponse.Builder {
        return IGPClientSearchRoomHistoryResponse.classBuilder() as! IGPClientSearchRoomHistoryResponse.Builder
    }
    public func getBuilder() -> IGPClientSearchRoomHistoryResponse.Builder {
        return classBuilder() as! IGPClientSearchRoomHistoryResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchRoomHistoryResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchRoomHistoryResponse.Builder()
    }
    public func toBuilder() throws -> IGPClientSearchRoomHistoryResponse.Builder {
        return try IGPClientSearchRoomHistoryResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientSearchRoomHistoryResponse) throws -> IGPClientSearchRoomHistoryResponse.Builder {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpTotalCount {
            jsonMap["IGPTotalCount"] = Int(igpTotalCount)
        }
        if hasIgpNotDeletedCount {
            jsonMap["IGPNotDeletedCount"] = Int(igpNotDeletedCount)
        }
        if !igpResult.isEmpty {
            var jsonArrayIgpResult:Array<Dictionary<String,Any>> = []
            for oneValueIgpResult in igpResult {
                let ecodedMessageIgpResult = try oneValueIgpResult.encode()
                jsonArrayIgpResult.append(ecodedMessageIgpResult)
            }
            jsonMap["IGPResult"] = jsonArrayIgpResult
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpTotalCount {
            output += "\(indent) igpTotalCount: \(igpTotalCount) \n"
        }
        if hasIgpNotDeletedCount {
            output += "\(indent) igpNotDeletedCount: \(igpNotDeletedCount) \n"
        }
        var igpResultElementIndex:Int = 0
        for oneElementIgpResult in igpResult {
            output += "\(indent) igpResult[\(igpResultElementIndex)] {\n"
            output += try oneElementIgpResult.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpResultElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpTotalCount {
                hashCode = (hashCode &* 31) &+ igpTotalCount.hashValue
            }
            if hasIgpNotDeletedCount {
                hashCode = (hashCode &* 31) &+ igpNotDeletedCount.hashValue
            }
            for oneElementIgpResult in igpResult {
                hashCode = (hashCode &* 31) &+ oneElementIgpResult.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientSearchRoomHistoryResponse"
    }
    override public func className() -> String {
        return "IGPClientSearchRoomHistoryResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPClientSearchRoomHistoryResponse = IGPClientSearchRoomHistoryResponse()
        public func getMessage() -> IGPClientSearchRoomHistoryResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPClientSearchRoomHistoryResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPClientSearchRoomHistoryResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPClientSearchRoomHistoryResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpTotalCount:Int32 {
            get {
                return builderResult.igpTotalCount
            }
            set (value) {
                builderResult.hasIgpTotalCount = true
                builderResult.igpTotalCount = value
            }
        }
        public var hasIgpTotalCount:Bool {
            get {
                return builderResult.hasIgpTotalCount
            }
        }
        @discardableResult
        public func setIgpTotalCount(_ value:Int32) -> IGPClientSearchRoomHistoryResponse.Builder {
            self.igpTotalCount = value
            return self
        }
        @discardableResult
        public func clearIgpTotalCount() -> IGPClientSearchRoomHistoryResponse.Builder{
            builderResult.hasIgpTotalCount = false
            builderResult.igpTotalCount = Int32(0)
            return self
        }
        public var igpNotDeletedCount:Int32 {
            get {
                return builderResult.igpNotDeletedCount
            }
            set (value) {
                builderResult.hasIgpNotDeletedCount = true
                builderResult.igpNotDeletedCount = value
            }
        }
        public var hasIgpNotDeletedCount:Bool {
            get {
                return builderResult.hasIgpNotDeletedCount
            }
        }
        @discardableResult
        public func setIgpNotDeletedCount(_ value:Int32) -> IGPClientSearchRoomHistoryResponse.Builder {
            self.igpNotDeletedCount = value
            return self
        }
        @discardableResult
        public func clearIgpNotDeletedCount() -> IGPClientSearchRoomHistoryResponse.Builder{
            builderResult.hasIgpNotDeletedCount = false
            builderResult.igpNotDeletedCount = Int32(0)
            return self
        }
        public var igpResult:Array<IGPRoomMessage> {
            get {
                return builderResult.igpResult
            }
            set (value) {
                builderResult.igpResult = value
            }
        }
        @discardableResult
        public func setIgpResult(_ value:Array<IGPRoomMessage>) -> IGPClientSearchRoomHistoryResponse.Builder {
            self.igpResult = value
            return self
        }
        @discardableResult
        public func clearIgpResult() -> IGPClientSearchRoomHistoryResponse.Builder {
            builderResult.igpResult.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientSearchRoomHistoryResponse.Builder {
            builderResult = IGPClientSearchRoomHistoryResponse()
            return self
        }
        override public func clone() throws -> IGPClientSearchRoomHistoryResponse.Builder {
            return try IGPClientSearchRoomHistoryResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientSearchRoomHistoryResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientSearchRoomHistoryResponse {
            let returnMe:IGPClientSearchRoomHistoryResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientSearchRoomHistoryResponse) throws -> IGPClientSearchRoomHistoryResponse.Builder {
            if other == IGPClientSearchRoomHistoryResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpTotalCount {
                igpTotalCount = other.igpTotalCount
            }
            if other.hasIgpNotDeletedCount {
                igpNotDeletedCount = other.igpNotDeletedCount
            }
            if !other.igpResult.isEmpty  {
                 builderResult.igpResult += other.igpResult
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchRoomHistoryResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistoryResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpTotalCount = try codedInputStream.readInt32()

                case 24:
                    igpNotDeletedCount = try codedInputStream.readInt32()

                case 34:
                    let subBuilder = IGPRoomMessage.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpResult.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchRoomHistoryResponse.Builder {
            let resultDecodedBuilder = IGPClientSearchRoomHistoryResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpTotalCount = jsonMap["IGPTotalCount"] as? Int {
                resultDecodedBuilder.igpTotalCount = Int32(jsonValueIgpTotalCount)
            } else if let jsonValueIgpTotalCount = jsonMap["IGPTotalCount"] as? String {
                resultDecodedBuilder.igpTotalCount = Int32(jsonValueIgpTotalCount)!
            }
            if let jsonValueIgpNotDeletedCount = jsonMap["IGPNotDeletedCount"] as? Int {
                resultDecodedBuilder.igpNotDeletedCount = Int32(jsonValueIgpNotDeletedCount)
            } else if let jsonValueIgpNotDeletedCount = jsonMap["IGPNotDeletedCount"] as? String {
                resultDecodedBuilder.igpNotDeletedCount = Int32(jsonValueIgpNotDeletedCount)!
            }
            if let jsonValueIgpResult = jsonMap["IGPResult"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpResult:Array<IGPRoomMessage> = []
                for oneValueIgpResult in jsonValueIgpResult {
                    let messageFromStringIgpResult = try IGPRoomMessage.Builder.decodeToBuilder(jsonMap:oneValueIgpResult).build()

                    jsonArrayIgpResult.append(messageFromStringIgpResult)
                }
                resultDecodedBuilder.igpResult = jsonArrayIgpResult
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientSearchRoomHistoryResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientSearchRoomHistoryResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPClientSearchRoomHistory: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientSearchRoomHistory> {
        var mergedArray = Array<IGPClientSearchRoomHistory>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientSearchRoomHistory? {
        return try IGPClientSearchRoomHistory.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder().mergeFrom(data: data, extensionRegistry:ClientSearchRoomHistoryRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistory {
        return try IGPClientSearchRoomHistory.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpRoomId": return self.igpRoomId
        case "igpOffset": return self.igpOffset
        case "igpFilter": return self.igpFilter
        default: return nil
        }
    }
}
extension IGPClientSearchRoomHistory.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpRoomId": return self.igpRoomId
            case "igpOffset": return self.igpOffset
            case "igpFilter": return self.igpFilter
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpOffset":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpOffset = newSubscriptValue
            case "igpFilter":
                guard let newSubscriptValue = newSubscriptValue as? IGPClientSearchRoomHistory.IGPFilter else {
                    return
                }
                self.igpFilter = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPClientSearchRoomHistoryResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientSearchRoomHistoryResponse> {
        var mergedArray = Array<IGPClientSearchRoomHistoryResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientSearchRoomHistoryResponse? {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeFrom(data: data, extensionRegistry:ClientSearchRoomHistoryRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchRoomHistoryResponse {
        return try IGPClientSearchRoomHistoryResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpTotalCount": return self.igpTotalCount
        case "igpNotDeletedCount": return self.igpNotDeletedCount
        case "igpResult": return self.igpResult
        default: return nil
        }
    }
}
extension IGPClientSearchRoomHistoryResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpTotalCount": return self.igpTotalCount
            case "igpNotDeletedCount": return self.igpNotDeletedCount
            case "igpResult": return self.igpResult
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpTotalCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpTotalCount = newSubscriptValue
            case "igpNotDeletedCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpNotDeletedCount = newSubscriptValue
            case "igpResult":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPRoomMessage> else {
                    return
                }
                self.igpResult = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
