/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "Error.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ErrorRoot {
    public static let `default` = ErrorRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPErrorResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPErrorResponse, rhs: IGPErrorResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpMajorCode == rhs.hasIgpMajorCode) && (!lhs.hasIgpMajorCode || lhs.igpMajorCode == rhs.igpMajorCode)
        fieldCheck = fieldCheck && (lhs.hasIgpMinorCode == rhs.hasIgpMinorCode) && (!lhs.hasIgpMinorCode || lhs.igpMinorCode == rhs.igpMinorCode)
        fieldCheck = fieldCheck && (lhs.hasIgpWait == rhs.hasIgpWait) && (!lhs.hasIgpWait || lhs.igpWait == rhs.igpWait)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpMajorCode:Int32 = Int32(0)
    public fileprivate(set) var hasIgpMajorCode:Bool = false

    public fileprivate(set) var igpMinorCode:Int32 = Int32(0)
    public fileprivate(set) var hasIgpMinorCode:Bool = false

    public fileprivate(set) var igpWait:Int32 = Int32(0)
    public fileprivate(set) var hasIgpWait:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpMajorCode {
            try codedOutputStream.writeInt32(fieldNumber: 2, value:igpMajorCode)
        }
        if hasIgpMinorCode {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpMinorCode)
        }
        if hasIgpWait {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpWait)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpMajorCode {
            serialize_size += igpMajorCode.computeInt32Size(fieldNumber: 2)
        }
        if hasIgpMinorCode {
            serialize_size += igpMinorCode.computeInt32Size(fieldNumber: 3)
        }
        if hasIgpWait {
            serialize_size += igpWait.computeInt32Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPErrorResponse.Builder {
        return IGPErrorResponse.classBuilder() as! IGPErrorResponse.Builder
    }
    public func getBuilder() -> IGPErrorResponse.Builder {
        return classBuilder() as! IGPErrorResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPErrorResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPErrorResponse.Builder()
    }
    public func toBuilder() throws -> IGPErrorResponse.Builder {
        return try IGPErrorResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPErrorResponse) throws -> IGPErrorResponse.Builder {
        return try IGPErrorResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpMajorCode {
            jsonMap["IGPMajorCode"] = Int(igpMajorCode)
        }
        if hasIgpMinorCode {
            jsonMap["IGPMinorCode"] = Int(igpMinorCode)
        }
        if hasIgpWait {
            jsonMap["IGPWait"] = Int(igpWait)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpMajorCode {
            output += "\(indent) igpMajorCode: \(igpMajorCode) \n"
        }
        if hasIgpMinorCode {
            output += "\(indent) igpMinorCode: \(igpMinorCode) \n"
        }
        if hasIgpWait {
            output += "\(indent) igpWait: \(igpWait) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpMajorCode {
                hashCode = (hashCode &* 31) &+ igpMajorCode.hashValue
            }
            if hasIgpMinorCode {
                hashCode = (hashCode &* 31) &+ igpMinorCode.hashValue
            }
            if hasIgpWait {
                hashCode = (hashCode &* 31) &+ igpWait.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPErrorResponse"
    }
    override public func className() -> String {
        return "IGPErrorResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPErrorResponse = IGPErrorResponse()
        public func getMessage() -> IGPErrorResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPErrorResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPErrorResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPErrorResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpMajorCode:Int32 {
            get {
                return builderResult.igpMajorCode
            }
            set (value) {
                builderResult.hasIgpMajorCode = true
                builderResult.igpMajorCode = value
            }
        }
        public var hasIgpMajorCode:Bool {
            get {
                return builderResult.hasIgpMajorCode
            }
        }
        @discardableResult
        public func setIgpMajorCode(_ value:Int32) -> IGPErrorResponse.Builder {
            self.igpMajorCode = value
            return self
        }
        @discardableResult
        public func clearIgpMajorCode() -> IGPErrorResponse.Builder{
            builderResult.hasIgpMajorCode = false
            builderResult.igpMajorCode = Int32(0)
            return self
        }
        public var igpMinorCode:Int32 {
            get {
                return builderResult.igpMinorCode
            }
            set (value) {
                builderResult.hasIgpMinorCode = true
                builderResult.igpMinorCode = value
            }
        }
        public var hasIgpMinorCode:Bool {
            get {
                return builderResult.hasIgpMinorCode
            }
        }
        @discardableResult
        public func setIgpMinorCode(_ value:Int32) -> IGPErrorResponse.Builder {
            self.igpMinorCode = value
            return self
        }
        @discardableResult
        public func clearIgpMinorCode() -> IGPErrorResponse.Builder{
            builderResult.hasIgpMinorCode = false
            builderResult.igpMinorCode = Int32(0)
            return self
        }
        public var igpWait:Int32 {
            get {
                return builderResult.igpWait
            }
            set (value) {
                builderResult.hasIgpWait = true
                builderResult.igpWait = value
            }
        }
        public var hasIgpWait:Bool {
            get {
                return builderResult.hasIgpWait
            }
        }
        @discardableResult
        public func setIgpWait(_ value:Int32) -> IGPErrorResponse.Builder {
            self.igpWait = value
            return self
        }
        @discardableResult
        public func clearIgpWait() -> IGPErrorResponse.Builder{
            builderResult.hasIgpWait = false
            builderResult.igpWait = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPErrorResponse.Builder {
            builderResult = IGPErrorResponse()
            return self
        }
        override public func clone() throws -> IGPErrorResponse.Builder {
            return try IGPErrorResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPErrorResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPErrorResponse {
            let returnMe:IGPErrorResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPErrorResponse) throws -> IGPErrorResponse.Builder {
            if other == IGPErrorResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpMajorCode {
                igpMajorCode = other.igpMajorCode
            }
            if other.hasIgpMinorCode {
                igpMinorCode = other.igpMinorCode
            }
            if other.hasIgpWait {
                igpWait = other.igpWait
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPErrorResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPErrorResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpMajorCode = try codedInputStream.readInt32()

                case 24:
                    igpMinorCode = try codedInputStream.readInt32()

                case 32:
                    igpWait = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPErrorResponse.Builder {
            let resultDecodedBuilder = IGPErrorResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpMajorCode = jsonMap["IGPMajorCode"] as? Int {
                resultDecodedBuilder.igpMajorCode = Int32(jsonValueIgpMajorCode)
            } else if let jsonValueIgpMajorCode = jsonMap["IGPMajorCode"] as? String {
                resultDecodedBuilder.igpMajorCode = Int32(jsonValueIgpMajorCode)!
            }
            if let jsonValueIgpMinorCode = jsonMap["IGPMinorCode"] as? Int {
                resultDecodedBuilder.igpMinorCode = Int32(jsonValueIgpMinorCode)
            } else if let jsonValueIgpMinorCode = jsonMap["IGPMinorCode"] as? String {
                resultDecodedBuilder.igpMinorCode = Int32(jsonValueIgpMinorCode)!
            }
            if let jsonValueIgpWait = jsonMap["IGPWait"] as? Int {
                resultDecodedBuilder.igpWait = Int32(jsonValueIgpWait)
            } else if let jsonValueIgpWait = jsonMap["IGPWait"] as? String {
                resultDecodedBuilder.igpWait = Int32(jsonValueIgpWait)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPErrorResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPErrorResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPErrorResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPErrorResponse> {
        var mergedArray = Array<IGPErrorResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPErrorResponse? {
        return try IGPErrorResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder().mergeFrom(data: data, extensionRegistry:ErrorRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPErrorResponse {
        return try IGPErrorResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpMajorCode": return self.igpMajorCode
        case "igpMinorCode": return self.igpMinorCode
        case "igpWait": return self.igpWait
        default: return nil
        }
    }
}
extension IGPErrorResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpMajorCode": return self.igpMajorCode
            case "igpMinorCode": return self.igpMinorCode
            case "igpWait": return self.igpWait
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpMajorCode":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpMajorCode = newSubscriptValue
            case "igpMinorCode":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpMinorCode = newSubscriptValue
            case "igpWait":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpWait = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
