/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "UserRegister.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct UserRegisterRoot {
    public static let `default` = UserRegisterRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPUserRegister : GeneratedMessage {

    public static func == (lhs: IGPUserRegister, rhs: IGPUserRegister) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpPhoneNumber == rhs.hasIgpPhoneNumber) && (!lhs.hasIgpPhoneNumber || lhs.igpPhoneNumber == rhs.igpPhoneNumber)
        fieldCheck = fieldCheck && (lhs.hasIgpCountryCode == rhs.hasIgpCountryCode) && (!lhs.hasIgpCountryCode || lhs.igpCountryCode == rhs.igpCountryCode)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpPhoneNumber:Int64 = Int64(0)
    public fileprivate(set) var hasIgpPhoneNumber:Bool = false

    public fileprivate(set) var igpCountryCode:String = ""
    public fileprivate(set) var hasIgpCountryCode:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpPhoneNumber {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpPhoneNumber)
        }
        if hasIgpCountryCode {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpCountryCode)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpPhoneNumber {
            serialize_size += igpPhoneNumber.computeInt64Size(fieldNumber: 2)
        }
        if hasIgpCountryCode {
            serialize_size += igpCountryCode.computeStringSize(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserRegister.Builder {
        return IGPUserRegister.classBuilder() as! IGPUserRegister.Builder
    }
    public func getBuilder() -> IGPUserRegister.Builder {
        return classBuilder() as! IGPUserRegister.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserRegister.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserRegister.Builder()
    }
    public func toBuilder() throws -> IGPUserRegister.Builder {
        return try IGPUserRegister.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserRegister) throws -> IGPUserRegister.Builder {
        return try IGPUserRegister.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpPhoneNumber {
            jsonMap["IGPPhoneNumber"] = "\(igpPhoneNumber)"
        }
        if hasIgpCountryCode {
            jsonMap["IGPCountryCode"] = igpCountryCode
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPhoneNumber {
            output += "\(indent) igpPhoneNumber: \(igpPhoneNumber) \n"
        }
        if hasIgpCountryCode {
            output += "\(indent) igpCountryCode: \(igpCountryCode) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpPhoneNumber {
                hashCode = (hashCode &* 31) &+ igpPhoneNumber.hashValue
            }
            if hasIgpCountryCode {
                hashCode = (hashCode &* 31) &+ igpCountryCode.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserRegister"
    }
    override public func className() -> String {
        return "IGPUserRegister"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPUserRegister = IGPUserRegister()
        public func getMessage() -> IGPUserRegister {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPUserRegister.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPUserRegister.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPUserRegister.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpPhoneNumber:Int64 {
            get {
                return builderResult.igpPhoneNumber
            }
            set (value) {
                builderResult.hasIgpPhoneNumber = true
                builderResult.igpPhoneNumber = value
            }
        }
        public var hasIgpPhoneNumber:Bool {
            get {
                return builderResult.hasIgpPhoneNumber
            }
        }
        @discardableResult
        public func setIgpPhoneNumber(_ value:Int64) -> IGPUserRegister.Builder {
            self.igpPhoneNumber = value
            return self
        }
        @discardableResult
        public func clearIgpPhoneNumber() -> IGPUserRegister.Builder{
            builderResult.hasIgpPhoneNumber = false
            builderResult.igpPhoneNumber = Int64(0)
            return self
        }
        public var igpCountryCode:String {
            get {
                return builderResult.igpCountryCode
            }
            set (value) {
                builderResult.hasIgpCountryCode = true
                builderResult.igpCountryCode = value
            }
        }
        public var hasIgpCountryCode:Bool {
            get {
                return builderResult.hasIgpCountryCode
            }
        }
        @discardableResult
        public func setIgpCountryCode(_ value:String) -> IGPUserRegister.Builder {
            self.igpCountryCode = value
            return self
        }
        @discardableResult
        public func clearIgpCountryCode() -> IGPUserRegister.Builder{
            builderResult.hasIgpCountryCode = false
            builderResult.igpCountryCode = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserRegister.Builder {
            builderResult = IGPUserRegister()
            return self
        }
        override public func clone() throws -> IGPUserRegister.Builder {
            return try IGPUserRegister.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserRegister {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserRegister {
            let returnMe:IGPUserRegister = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserRegister) throws -> IGPUserRegister.Builder {
            if other == IGPUserRegister() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpPhoneNumber {
                igpPhoneNumber = other.igpPhoneNumber
            }
            if other.hasIgpCountryCode {
                igpCountryCode = other.igpCountryCode
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserRegister.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegister.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpPhoneNumber = try codedInputStream.readInt64()

                case 26:
                    igpCountryCode = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserRegister.Builder {
            let resultDecodedBuilder = IGPUserRegister.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpPhoneNumber = jsonMap["IGPPhoneNumber"] as? String {
                resultDecodedBuilder.igpPhoneNumber = Int64(jsonValueIgpPhoneNumber)!
            } else if let jsonValueIgpPhoneNumber = jsonMap["IGPPhoneNumber"] as? Int {
                resultDecodedBuilder.igpPhoneNumber = Int64(jsonValueIgpPhoneNumber)
            }
            if let jsonValueIgpCountryCode = jsonMap["IGPCountryCode"] as? String {
                resultDecodedBuilder.igpCountryCode = jsonValueIgpCountryCode
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserRegister.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserRegister.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPUserRegisterResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPUserRegisterResponse, rhs: IGPUserRegisterResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpUsername == rhs.hasIgpUsername) && (!lhs.hasIgpUsername || lhs.igpUsername == rhs.igpUsername)
        fieldCheck = fieldCheck && (lhs.hasIgpUserId == rhs.hasIgpUserId) && (!lhs.hasIgpUserId || lhs.igpUserId == rhs.igpUserId)
        fieldCheck = fieldCheck && (lhs.hasIgpAuthorHash == rhs.hasIgpAuthorHash) && (!lhs.hasIgpAuthorHash || lhs.igpAuthorHash == rhs.igpAuthorHash)
        fieldCheck = fieldCheck && (lhs.hasIgpMethod == rhs.hasIgpMethod) && (!lhs.hasIgpMethod || lhs.igpMethod == rhs.igpMethod)
        fieldCheck = fieldCheck && (lhs.hasIgpResendDelay == rhs.hasIgpResendDelay) && (!lhs.hasIgpResendDelay || lhs.igpResendDelay == rhs.igpResendDelay)
        fieldCheck = fieldCheck && (lhs.igpSmsNumber == rhs.igpSmsNumber)
        fieldCheck = fieldCheck && (lhs.hasIgpVerifyCodeRegex == rhs.hasIgpVerifyCodeRegex) && (!lhs.hasIgpVerifyCodeRegex || lhs.igpVerifyCodeRegex == rhs.igpVerifyCodeRegex)
        fieldCheck = fieldCheck && (lhs.hasIgpVerifyCodeDigitCount == rhs.hasIgpVerifyCodeDigitCount) && (!lhs.hasIgpVerifyCodeDigitCount || lhs.igpVerifyCodeDigitCount == rhs.igpVerifyCodeDigitCount)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPMethod:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case verifyCodeSms = 0
            case verifyCodeSocket = 1
            case verifyCodeSmsSocket = 2
            public func toString() -> String {
                switch self {
                case .verifyCodeSms: return "VERIFY_CODE_SMS"
                case .verifyCodeSocket: return "VERIFY_CODE_SOCKET"
                case .verifyCodeSmsSocket: return "VERIFY_CODE_SMS_SOCKET"
                }
            }
            public static func fromString(str:String) throws -> IGPUserRegisterResponse.IGPMethod {
                switch str {
                case "VERIFY_CODE_SMS":    return .verifyCodeSms
                case "VERIFY_CODE_SOCKET":    return .verifyCodeSocket
                case "VERIFY_CODE_SMS_SOCKET":    return .verifyCodeSmsSocket
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .verifyCodeSms: return ".verifyCodeSms"
                case .verifyCodeSocket: return ".verifyCodeSocket"
                case .verifyCodeSmsSocket: return ".verifyCodeSmsSocket"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPMethod, rhs:IGPMethod) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpUsername:String = ""
    public fileprivate(set) var hasIgpUsername:Bool = false

    public fileprivate(set) var igpUserId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpUserId:Bool = false

    public fileprivate(set) var igpAuthorHash:String = ""
    public fileprivate(set) var hasIgpAuthorHash:Bool = false

    public fileprivate(set) var igpMethod:IGPUserRegisterResponse.IGPMethod = IGPUserRegisterResponse.IGPMethod.verifyCodeSms
    public fileprivate(set) var hasIgpMethod:Bool = false
    public fileprivate(set) var igpResendDelay:Int32 = Int32(0)
    public fileprivate(set) var hasIgpResendDelay:Bool = false

    public fileprivate(set) var igpSmsNumber:Array<Int64> = Array<Int64>()
    private var igpSmsNumberMemoizedSerializedSize:Int32 = -1
    public fileprivate(set) var igpVerifyCodeRegex:String = ""
    public fileprivate(set) var hasIgpVerifyCodeRegex:Bool = false

    public fileprivate(set) var igpVerifyCodeDigitCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpVerifyCodeDigitCount:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpUsername {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpUsername)
        }
        if hasIgpUserId {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:igpUserId)
        }
        if hasIgpAuthorHash {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpAuthorHash)
        }
        if hasIgpMethod {
            try codedOutputStream.writeEnum(fieldNumber: 5, value:igpMethod.rawValue)
        }
        if hasIgpResendDelay {
            try codedOutputStream.writeInt32(fieldNumber: 6, value:igpResendDelay)
        }
        if !igpSmsNumber.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 58)
            try codedOutputStream.writeRawVarint32(value: igpSmsNumberMemoizedSerializedSize)
            for oneValueigpSmsNumber in igpSmsNumber {
                try codedOutputStream.writeInt64NoTag(value: oneValueigpSmsNumber)
            }
        }
        if hasIgpVerifyCodeRegex {
            try codedOutputStream.writeString(fieldNumber: 8, value:igpVerifyCodeRegex)
        }
        if hasIgpVerifyCodeDigitCount {
            try codedOutputStream.writeInt32(fieldNumber: 9, value:igpVerifyCodeDigitCount)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpUsername {
            serialize_size += igpUsername.computeStringSize(fieldNumber: 2)
        }
        if hasIgpUserId {
            serialize_size += igpUserId.computeInt64Size(fieldNumber: 3)
        }
        if hasIgpAuthorHash {
            serialize_size += igpAuthorHash.computeStringSize(fieldNumber: 4)
        }
        if (hasIgpMethod) {
            serialize_size += igpMethod.rawValue.computeEnumSize(fieldNumber: 5)
        }
        if hasIgpResendDelay {
            serialize_size += igpResendDelay.computeInt32Size(fieldNumber: 6)
        }
        var dataSizeIgpSmsNumber:Int32 = 0
        for oneValueigpSmsNumber in igpSmsNumber {
            dataSizeIgpSmsNumber += oneValueigpSmsNumber.computeInt64SizeNoTag()
        }
        serialize_size += dataSizeIgpSmsNumber
        if !igpSmsNumber.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeIgpSmsNumber.computeInt32SizeNoTag()
        }
        igpSmsNumberMemoizedSerializedSize = dataSizeIgpSmsNumber
        if hasIgpVerifyCodeRegex {
            serialize_size += igpVerifyCodeRegex.computeStringSize(fieldNumber: 8)
        }
        if hasIgpVerifyCodeDigitCount {
            serialize_size += igpVerifyCodeDigitCount.computeInt32Size(fieldNumber: 9)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserRegisterResponse.Builder {
        return IGPUserRegisterResponse.classBuilder() as! IGPUserRegisterResponse.Builder
    }
    public func getBuilder() -> IGPUserRegisterResponse.Builder {
        return classBuilder() as! IGPUserRegisterResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserRegisterResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserRegisterResponse.Builder()
    }
    public func toBuilder() throws -> IGPUserRegisterResponse.Builder {
        return try IGPUserRegisterResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserRegisterResponse) throws -> IGPUserRegisterResponse.Builder {
        return try IGPUserRegisterResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpUsername {
            jsonMap["IGPUsername"] = igpUsername
        }
        if hasIgpUserId {
            jsonMap["IGPUserId"] = "\(igpUserId)"
        }
        if hasIgpAuthorHash {
            jsonMap["IGPAuthorHash"] = igpAuthorHash
        }
        if hasIgpMethod {
            jsonMap["IGPMethod"] = igpMethod.toString()
        }
        if hasIgpResendDelay {
            jsonMap["IGPResendDelay"] = Int(igpResendDelay)
        }
        if !igpSmsNumber.isEmpty {
            var jsonArrayIgpSmsNumber:Array<String> = []
            for oneValueIgpSmsNumber in igpSmsNumber {
                jsonArrayIgpSmsNumber.append("\(oneValueIgpSmsNumber)")
            }
            jsonMap["IGPSmsNumber"] = jsonArrayIgpSmsNumber
        }
        if hasIgpVerifyCodeRegex {
            jsonMap["IGPVerifyCodeRegex"] = igpVerifyCodeRegex
        }
        if hasIgpVerifyCodeDigitCount {
            jsonMap["IGPVerifyCodeDigitCount"] = Int(igpVerifyCodeDigitCount)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpUsername {
            output += "\(indent) igpUsername: \(igpUsername) \n"
        }
        if hasIgpUserId {
            output += "\(indent) igpUserId: \(igpUserId) \n"
        }
        if hasIgpAuthorHash {
            output += "\(indent) igpAuthorHash: \(igpAuthorHash) \n"
        }
        if (hasIgpMethod) {
            output += "\(indent) igpMethod: \(igpMethod.description)\n"
        }
        if hasIgpResendDelay {
            output += "\(indent) igpResendDelay: \(igpResendDelay) \n"
        }
        var igpSmsNumberElementIndex:Int = 0
        for oneValueIgpSmsNumber in igpSmsNumber  {
            output += "\(indent) igpSmsNumber[\(igpSmsNumberElementIndex)]: \(oneValueIgpSmsNumber)\n"
            igpSmsNumberElementIndex += 1
        }
        if hasIgpVerifyCodeRegex {
            output += "\(indent) igpVerifyCodeRegex: \(igpVerifyCodeRegex) \n"
        }
        if hasIgpVerifyCodeDigitCount {
            output += "\(indent) igpVerifyCodeDigitCount: \(igpVerifyCodeDigitCount) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpUsername {
                hashCode = (hashCode &* 31) &+ igpUsername.hashValue
            }
            if hasIgpUserId {
                hashCode = (hashCode &* 31) &+ igpUserId.hashValue
            }
            if hasIgpAuthorHash {
                hashCode = (hashCode &* 31) &+ igpAuthorHash.hashValue
            }
            if hasIgpMethod {
                 hashCode = (hashCode &* 31) &+ igpMethod.hashValue
            }
            if hasIgpResendDelay {
                hashCode = (hashCode &* 31) &+ igpResendDelay.hashValue
            }
            for oneValueIgpSmsNumber in igpSmsNumber {
                hashCode = (hashCode &* 31) &+ oneValueIgpSmsNumber.hashValue
            }
            if hasIgpVerifyCodeRegex {
                hashCode = (hashCode &* 31) &+ igpVerifyCodeRegex.hashValue
            }
            if hasIgpVerifyCodeDigitCount {
                hashCode = (hashCode &* 31) &+ igpVerifyCodeDigitCount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserRegisterResponse"
    }
    override public func className() -> String {
        return "IGPUserRegisterResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPUserRegisterResponse = IGPUserRegisterResponse()
        public func getMessage() -> IGPUserRegisterResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPUserRegisterResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPUserRegisterResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPUserRegisterResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpUsername:String {
            get {
                return builderResult.igpUsername
            }
            set (value) {
                builderResult.hasIgpUsername = true
                builderResult.igpUsername = value
            }
        }
        public var hasIgpUsername:Bool {
            get {
                return builderResult.hasIgpUsername
            }
        }
        @discardableResult
        public func setIgpUsername(_ value:String) -> IGPUserRegisterResponse.Builder {
            self.igpUsername = value
            return self
        }
        @discardableResult
        public func clearIgpUsername() -> IGPUserRegisterResponse.Builder{
            builderResult.hasIgpUsername = false
            builderResult.igpUsername = ""
            return self
        }
        public var igpUserId:Int64 {
            get {
                return builderResult.igpUserId
            }
            set (value) {
                builderResult.hasIgpUserId = true
                builderResult.igpUserId = value
            }
        }
        public var hasIgpUserId:Bool {
            get {
                return builderResult.hasIgpUserId
            }
        }
        @discardableResult
        public func setIgpUserId(_ value:Int64) -> IGPUserRegisterResponse.Builder {
            self.igpUserId = value
            return self
        }
        @discardableResult
        public func clearIgpUserId() -> IGPUserRegisterResponse.Builder{
            builderResult.hasIgpUserId = false
            builderResult.igpUserId = Int64(0)
            return self
        }
        public var igpAuthorHash:String {
            get {
                return builderResult.igpAuthorHash
            }
            set (value) {
                builderResult.hasIgpAuthorHash = true
                builderResult.igpAuthorHash = value
            }
        }
        public var hasIgpAuthorHash:Bool {
            get {
                return builderResult.hasIgpAuthorHash
            }
        }
        @discardableResult
        public func setIgpAuthorHash(_ value:String) -> IGPUserRegisterResponse.Builder {
            self.igpAuthorHash = value
            return self
        }
        @discardableResult
        public func clearIgpAuthorHash() -> IGPUserRegisterResponse.Builder{
            builderResult.hasIgpAuthorHash = false
            builderResult.igpAuthorHash = ""
            return self
        }
            public var igpMethod:IGPUserRegisterResponse.IGPMethod {
                get {
                    return builderResult.igpMethod
                }
                set (value) {
                    builderResult.hasIgpMethod = true
                    builderResult.igpMethod = value
                }
            }
            public var hasIgpMethod:Bool{
                get {
                    return builderResult.hasIgpMethod
                }
            }
        @discardableResult
            public func setIgpMethod(_ value:IGPUserRegisterResponse.IGPMethod) -> IGPUserRegisterResponse.Builder {
              self.igpMethod = value
              return self
            }
        @discardableResult
            public func clearIgpMethod() -> IGPUserRegisterResponse.Builder {
               builderResult.hasIgpMethod = false
               builderResult.igpMethod = .verifyCodeSms
               return self
            }
        public var igpResendDelay:Int32 {
            get {
                return builderResult.igpResendDelay
            }
            set (value) {
                builderResult.hasIgpResendDelay = true
                builderResult.igpResendDelay = value
            }
        }
        public var hasIgpResendDelay:Bool {
            get {
                return builderResult.hasIgpResendDelay
            }
        }
        @discardableResult
        public func setIgpResendDelay(_ value:Int32) -> IGPUserRegisterResponse.Builder {
            self.igpResendDelay = value
            return self
        }
        @discardableResult
        public func clearIgpResendDelay() -> IGPUserRegisterResponse.Builder{
            builderResult.hasIgpResendDelay = false
            builderResult.igpResendDelay = Int32(0)
            return self
        }
        public var igpSmsNumber:Array<Int64> {
            get {
                return builderResult.igpSmsNumber
            }
            set (array) {
                builderResult.igpSmsNumber = array
            }
        }
        @discardableResult
        public func setIgpSmsNumber(_ value:Array<Int64>) -> IGPUserRegisterResponse.Builder {
            self.igpSmsNumber = value
            return self
        }
        @discardableResult
        public func clearIgpSmsNumber() -> IGPUserRegisterResponse.Builder {
            builderResult.igpSmsNumber.removeAll(keepingCapacity: false)
            return self
        }
        public var igpVerifyCodeRegex:String {
            get {
                return builderResult.igpVerifyCodeRegex
            }
            set (value) {
                builderResult.hasIgpVerifyCodeRegex = true
                builderResult.igpVerifyCodeRegex = value
            }
        }
        public var hasIgpVerifyCodeRegex:Bool {
            get {
                return builderResult.hasIgpVerifyCodeRegex
            }
        }
        @discardableResult
        public func setIgpVerifyCodeRegex(_ value:String) -> IGPUserRegisterResponse.Builder {
            self.igpVerifyCodeRegex = value
            return self
        }
        @discardableResult
        public func clearIgpVerifyCodeRegex() -> IGPUserRegisterResponse.Builder{
            builderResult.hasIgpVerifyCodeRegex = false
            builderResult.igpVerifyCodeRegex = ""
            return self
        }
        public var igpVerifyCodeDigitCount:Int32 {
            get {
                return builderResult.igpVerifyCodeDigitCount
            }
            set (value) {
                builderResult.hasIgpVerifyCodeDigitCount = true
                builderResult.igpVerifyCodeDigitCount = value
            }
        }
        public var hasIgpVerifyCodeDigitCount:Bool {
            get {
                return builderResult.hasIgpVerifyCodeDigitCount
            }
        }
        @discardableResult
        public func setIgpVerifyCodeDigitCount(_ value:Int32) -> IGPUserRegisterResponse.Builder {
            self.igpVerifyCodeDigitCount = value
            return self
        }
        @discardableResult
        public func clearIgpVerifyCodeDigitCount() -> IGPUserRegisterResponse.Builder{
            builderResult.hasIgpVerifyCodeDigitCount = false
            builderResult.igpVerifyCodeDigitCount = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserRegisterResponse.Builder {
            builderResult = IGPUserRegisterResponse()
            return self
        }
        override public func clone() throws -> IGPUserRegisterResponse.Builder {
            return try IGPUserRegisterResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserRegisterResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserRegisterResponse {
            let returnMe:IGPUserRegisterResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserRegisterResponse) throws -> IGPUserRegisterResponse.Builder {
            if other == IGPUserRegisterResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpUsername {
                igpUsername = other.igpUsername
            }
            if other.hasIgpUserId {
                igpUserId = other.igpUserId
            }
            if other.hasIgpAuthorHash {
                igpAuthorHash = other.igpAuthorHash
            }
            if other.hasIgpMethod {
                igpMethod = other.igpMethod
            }
            if other.hasIgpResendDelay {
                igpResendDelay = other.igpResendDelay
            }
            if !other.igpSmsNumber.isEmpty {
                builderResult.igpSmsNumber += other.igpSmsNumber
            }
            if other.hasIgpVerifyCodeRegex {
                igpVerifyCodeRegex = other.igpVerifyCodeRegex
            }
            if other.hasIgpVerifyCodeDigitCount {
                igpVerifyCodeDigitCount = other.igpVerifyCodeDigitCount
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserRegisterResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegisterResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    igpUsername = try codedInputStream.readString()

                case 24:
                    igpUserId = try codedInputStream.readInt64()

                case 34:
                    igpAuthorHash = try codedInputStream.readString()

                case 40:
                    let valueIntigpMethod = try codedInputStream.readEnum()
                    if let enumsigpMethod = IGPUserRegisterResponse.IGPMethod(rawValue:valueIntigpMethod){
                        igpMethod = enumsigpMethod
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 5, value:Int64(valueIntigpMethod))
                    }

                case 48:
                    igpResendDelay = try codedInputStream.readInt32()

                case 58:
                    let length = Int(try codedInputStream.readRawVarint32())
                    let limit = try codedInputStream.pushLimit(byteLimit: length)
                    while (codedInputStream.bytesUntilLimit() > 0) {
                        builderResult.igpSmsNumber.append(try codedInputStream.readInt64())
                    }
                    codedInputStream.popLimit(oldLimit: limit)

                case 66:
                    igpVerifyCodeRegex = try codedInputStream.readString()

                case 72:
                    igpVerifyCodeDigitCount = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserRegisterResponse.Builder {
            let resultDecodedBuilder = IGPUserRegisterResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpUsername = jsonMap["IGPUsername"] as? String {
                resultDecodedBuilder.igpUsername = jsonValueIgpUsername
            }
            if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? String {
                resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)!
            } else if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? Int {
                resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)
            }
            if let jsonValueIgpAuthorHash = jsonMap["IGPAuthorHash"] as? String {
                resultDecodedBuilder.igpAuthorHash = jsonValueIgpAuthorHash
            }
            if let jsonValueIgpMethod = jsonMap["IGPMethod"] as? String {
                resultDecodedBuilder.igpMethod = try IGPUserRegisterResponse.IGPMethod.fromString(str: jsonValueIgpMethod)
            }
            if let jsonValueIgpResendDelay = jsonMap["IGPResendDelay"] as? Int {
                resultDecodedBuilder.igpResendDelay = Int32(jsonValueIgpResendDelay)
            } else if let jsonValueIgpResendDelay = jsonMap["IGPResendDelay"] as? String {
                resultDecodedBuilder.igpResendDelay = Int32(jsonValueIgpResendDelay)!
            }
            if let jsonValueIgpSmsNumber = jsonMap["IGPSmsNumber"] as? Array<String> {
                var jsonArrayIgpSmsNumber:Array<Int64> = []
                for oneValueIgpSmsNumber in jsonValueIgpSmsNumber {
                    jsonArrayIgpSmsNumber.append(Int64(oneValueIgpSmsNumber)!)
                }
                resultDecodedBuilder.igpSmsNumber = jsonArrayIgpSmsNumber
            }
            if let jsonValueIgpVerifyCodeRegex = jsonMap["IGPVerifyCodeRegex"] as? String {
                resultDecodedBuilder.igpVerifyCodeRegex = jsonValueIgpVerifyCodeRegex
            }
            if let jsonValueIgpVerifyCodeDigitCount = jsonMap["IGPVerifyCodeDigitCount"] as? Int {
                resultDecodedBuilder.igpVerifyCodeDigitCount = Int32(jsonValueIgpVerifyCodeDigitCount)
            } else if let jsonValueIgpVerifyCodeDigitCount = jsonMap["IGPVerifyCodeDigitCount"] as? String {
                resultDecodedBuilder.igpVerifyCodeDigitCount = Int32(jsonValueIgpVerifyCodeDigitCount)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserRegisterResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserRegisterResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPUserRegister: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserRegister> {
        var mergedArray = Array<IGPUserRegister>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserRegister? {
        return try IGPUserRegister.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder().mergeFrom(data: data, extensionRegistry:UserRegisterRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegister {
        return try IGPUserRegister.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpPhoneNumber": return self.igpPhoneNumber
        case "igpCountryCode": return self.igpCountryCode
        default: return nil
        }
    }
}
extension IGPUserRegister.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpPhoneNumber": return self.igpPhoneNumber
            case "igpCountryCode": return self.igpCountryCode
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpPhoneNumber":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpPhoneNumber = newSubscriptValue
            case "igpCountryCode":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCountryCode = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserRegisterResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserRegisterResponse> {
        var mergedArray = Array<IGPUserRegisterResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserRegisterResponse? {
        return try IGPUserRegisterResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder().mergeFrom(data: data, extensionRegistry:UserRegisterRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserRegisterResponse {
        return try IGPUserRegisterResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpUsername": return self.igpUsername
        case "igpUserId": return self.igpUserId
        case "igpAuthorHash": return self.igpAuthorHash
        case "igpMethod": return self.igpMethod
        case "igpResendDelay": return self.igpResendDelay
        case "igpSmsNumber": return self.igpSmsNumber
        case "igpVerifyCodeRegex": return self.igpVerifyCodeRegex
        case "igpVerifyCodeDigitCount": return self.igpVerifyCodeDigitCount
        default: return nil
        }
    }
}
extension IGPUserRegisterResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpUsername": return self.igpUsername
            case "igpUserId": return self.igpUserId
            case "igpAuthorHash": return self.igpAuthorHash
            case "igpMethod": return self.igpMethod
            case "igpResendDelay": return self.igpResendDelay
            case "igpSmsNumber": return self.igpSmsNumber
            case "igpVerifyCodeRegex": return self.igpVerifyCodeRegex
            case "igpVerifyCodeDigitCount": return self.igpVerifyCodeDigitCount
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpUsername":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpUsername = newSubscriptValue
            case "igpUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpUserId = newSubscriptValue
            case "igpAuthorHash":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAuthorHash = newSubscriptValue
            case "igpMethod":
                guard let newSubscriptValue = newSubscriptValue as? IGPUserRegisterResponse.IGPMethod else {
                    return
                }
                self.igpMethod = newSubscriptValue
            case "igpResendDelay":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpResendDelay = newSubscriptValue
            case "igpSmsNumber":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int64> else {
                    return
                }
                self.igpSmsNumber = newSubscriptValue
            case "igpVerifyCodeRegex":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpVerifyCodeRegex = newSubscriptValue
            case "igpVerifyCodeDigitCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpVerifyCodeDigitCount = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
