/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "SignalingCandidate.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct SignalingCandidateRoot {
    public static let `default` = SignalingCandidateRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPSignalingCandidate : GeneratedMessage {

    public static func == (lhs: IGPSignalingCandidate, rhs: IGPSignalingCandidate) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpCandidate == rhs.hasIgpCandidate) && (!lhs.hasIgpCandidate || lhs.igpCandidate == rhs.igpCandidate)
        fieldCheck = fieldCheck && (lhs.hasIgpSdpMId == rhs.hasIgpSdpMId) && (!lhs.hasIgpSdpMId || lhs.igpSdpMId == rhs.igpSdpMId)
        fieldCheck = fieldCheck && (lhs.hasIgpSdpMLineIndex == rhs.hasIgpSdpMLineIndex) && (!lhs.hasIgpSdpMLineIndex || lhs.igpSdpMLineIndex == rhs.igpSdpMLineIndex)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpCandidate:String = ""
    public fileprivate(set) var hasIgpCandidate:Bool = false

    public fileprivate(set) var igpSdpMId:String = ""
    public fileprivate(set) var hasIgpSdpMId:Bool = false

    public fileprivate(set) var igpSdpMLineIndex:Int32 = Int32(0)
    public fileprivate(set) var hasIgpSdpMLineIndex:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpCandidate {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpCandidate)
        }
        if hasIgpSdpMId {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpSdpMId)
        }
        if hasIgpSdpMLineIndex {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpSdpMLineIndex)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpCandidate {
            serialize_size += igpCandidate.computeStringSize(fieldNumber: 2)
        }
        if hasIgpSdpMId {
            serialize_size += igpSdpMId.computeStringSize(fieldNumber: 3)
        }
        if hasIgpSdpMLineIndex {
            serialize_size += igpSdpMLineIndex.computeInt32Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingCandidate.Builder {
        return IGPSignalingCandidate.classBuilder() as! IGPSignalingCandidate.Builder
    }
    public func getBuilder() -> IGPSignalingCandidate.Builder {
        return classBuilder() as! IGPSignalingCandidate.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingCandidate.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingCandidate.Builder()
    }
    public func toBuilder() throws -> IGPSignalingCandidate.Builder {
        return try IGPSignalingCandidate.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingCandidate) throws -> IGPSignalingCandidate.Builder {
        return try IGPSignalingCandidate.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpCandidate {
            jsonMap["IGPCandidate"] = igpCandidate
        }
        if hasIgpSdpMId {
            jsonMap["IGPSdpMId"] = igpSdpMId
        }
        if hasIgpSdpMLineIndex {
            jsonMap["IGPSdpMLineIndex"] = Int(igpSdpMLineIndex)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpCandidate {
            output += "\(indent) igpCandidate: \(igpCandidate) \n"
        }
        if hasIgpSdpMId {
            output += "\(indent) igpSdpMId: \(igpSdpMId) \n"
        }
        if hasIgpSdpMLineIndex {
            output += "\(indent) igpSdpMLineIndex: \(igpSdpMLineIndex) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpCandidate {
                hashCode = (hashCode &* 31) &+ igpCandidate.hashValue
            }
            if hasIgpSdpMId {
                hashCode = (hashCode &* 31) &+ igpSdpMId.hashValue
            }
            if hasIgpSdpMLineIndex {
                hashCode = (hashCode &* 31) &+ igpSdpMLineIndex.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingCandidate"
    }
    override public func className() -> String {
        return "IGPSignalingCandidate"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPSignalingCandidate = IGPSignalingCandidate()
        public func getMessage() -> IGPSignalingCandidate {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPSignalingCandidate.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPSignalingCandidate.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPSignalingCandidate.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpCandidate:String {
            get {
                return builderResult.igpCandidate
            }
            set (value) {
                builderResult.hasIgpCandidate = true
                builderResult.igpCandidate = value
            }
        }
        public var hasIgpCandidate:Bool {
            get {
                return builderResult.hasIgpCandidate
            }
        }
        @discardableResult
        public func setIgpCandidate(_ value:String) -> IGPSignalingCandidate.Builder {
            self.igpCandidate = value
            return self
        }
        @discardableResult
        public func clearIgpCandidate() -> IGPSignalingCandidate.Builder{
            builderResult.hasIgpCandidate = false
            builderResult.igpCandidate = ""
            return self
        }
        public var igpSdpMId:String {
            get {
                return builderResult.igpSdpMId
            }
            set (value) {
                builderResult.hasIgpSdpMId = true
                builderResult.igpSdpMId = value
            }
        }
        public var hasIgpSdpMId:Bool {
            get {
                return builderResult.hasIgpSdpMId
            }
        }
        @discardableResult
        public func setIgpSdpMId(_ value:String) -> IGPSignalingCandidate.Builder {
            self.igpSdpMId = value
            return self
        }
        @discardableResult
        public func clearIgpSdpMId() -> IGPSignalingCandidate.Builder{
            builderResult.hasIgpSdpMId = false
            builderResult.igpSdpMId = ""
            return self
        }
        public var igpSdpMLineIndex:Int32 {
            get {
                return builderResult.igpSdpMLineIndex
            }
            set (value) {
                builderResult.hasIgpSdpMLineIndex = true
                builderResult.igpSdpMLineIndex = value
            }
        }
        public var hasIgpSdpMLineIndex:Bool {
            get {
                return builderResult.hasIgpSdpMLineIndex
            }
        }
        @discardableResult
        public func setIgpSdpMLineIndex(_ value:Int32) -> IGPSignalingCandidate.Builder {
            self.igpSdpMLineIndex = value
            return self
        }
        @discardableResult
        public func clearIgpSdpMLineIndex() -> IGPSignalingCandidate.Builder{
            builderResult.hasIgpSdpMLineIndex = false
            builderResult.igpSdpMLineIndex = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingCandidate.Builder {
            builderResult = IGPSignalingCandidate()
            return self
        }
        override public func clone() throws -> IGPSignalingCandidate.Builder {
            return try IGPSignalingCandidate.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingCandidate {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingCandidate {
            let returnMe:IGPSignalingCandidate = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingCandidate) throws -> IGPSignalingCandidate.Builder {
            if other == IGPSignalingCandidate() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpCandidate {
                igpCandidate = other.igpCandidate
            }
            if other.hasIgpSdpMId {
                igpSdpMId = other.igpSdpMId
            }
            if other.hasIgpSdpMLineIndex {
                igpSdpMLineIndex = other.igpSdpMLineIndex
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingCandidate.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidate.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    igpCandidate = try codedInputStream.readString()

                case 26:
                    igpSdpMId = try codedInputStream.readString()

                case 32:
                    igpSdpMLineIndex = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingCandidate.Builder {
            let resultDecodedBuilder = IGPSignalingCandidate.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpCandidate = jsonMap["IGPCandidate"] as? String {
                resultDecodedBuilder.igpCandidate = jsonValueIgpCandidate
            }
            if let jsonValueIgpSdpMId = jsonMap["IGPSdpMId"] as? String {
                resultDecodedBuilder.igpSdpMId = jsonValueIgpSdpMId
            }
            if let jsonValueIgpSdpMLineIndex = jsonMap["IGPSdpMLineIndex"] as? Int {
                resultDecodedBuilder.igpSdpMLineIndex = Int32(jsonValueIgpSdpMLineIndex)
            } else if let jsonValueIgpSdpMLineIndex = jsonMap["IGPSdpMLineIndex"] as? String {
                resultDecodedBuilder.igpSdpMLineIndex = Int32(jsonValueIgpSdpMLineIndex)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingCandidate.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingCandidate.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPSignalingCandidateResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPSignalingCandidateResponse, rhs: IGPSignalingCandidateResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpPeerCandidate == rhs.hasIgpPeerCandidate) && (!lhs.hasIgpPeerCandidate || lhs.igpPeerCandidate == rhs.igpPeerCandidate)
        fieldCheck = fieldCheck && (lhs.hasIgpPeerSdpMId == rhs.hasIgpPeerSdpMId) && (!lhs.hasIgpPeerSdpMId || lhs.igpPeerSdpMId == rhs.igpPeerSdpMId)
        fieldCheck = fieldCheck && (lhs.hasIgpPeerSdpMLineIndex == rhs.hasIgpPeerSdpMLineIndex) && (!lhs.hasIgpPeerSdpMLineIndex || lhs.igpPeerSdpMLineIndex == rhs.igpPeerSdpMLineIndex)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpPeerCandidate:String = ""
    public fileprivate(set) var hasIgpPeerCandidate:Bool = false

    public fileprivate(set) var igpPeerSdpMId:String = ""
    public fileprivate(set) var hasIgpPeerSdpMId:Bool = false

    public fileprivate(set) var igpPeerSdpMLineIndex:Int32 = Int32(0)
    public fileprivate(set) var hasIgpPeerSdpMLineIndex:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpPeerCandidate {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpPeerCandidate)
        }
        if hasIgpPeerSdpMId {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpPeerSdpMId)
        }
        if hasIgpPeerSdpMLineIndex {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpPeerSdpMLineIndex)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpPeerCandidate {
            serialize_size += igpPeerCandidate.computeStringSize(fieldNumber: 2)
        }
        if hasIgpPeerSdpMId {
            serialize_size += igpPeerSdpMId.computeStringSize(fieldNumber: 3)
        }
        if hasIgpPeerSdpMLineIndex {
            serialize_size += igpPeerSdpMLineIndex.computeInt32Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingCandidateResponse.Builder {
        return IGPSignalingCandidateResponse.classBuilder() as! IGPSignalingCandidateResponse.Builder
    }
    public func getBuilder() -> IGPSignalingCandidateResponse.Builder {
        return classBuilder() as! IGPSignalingCandidateResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingCandidateResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingCandidateResponse.Builder()
    }
    public func toBuilder() throws -> IGPSignalingCandidateResponse.Builder {
        return try IGPSignalingCandidateResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingCandidateResponse) throws -> IGPSignalingCandidateResponse.Builder {
        return try IGPSignalingCandidateResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpPeerCandidate {
            jsonMap["IGPPeerCandidate"] = igpPeerCandidate
        }
        if hasIgpPeerSdpMId {
            jsonMap["IGPPeerSdpMId"] = igpPeerSdpMId
        }
        if hasIgpPeerSdpMLineIndex {
            jsonMap["IGPPeerSdpMLineIndex"] = Int(igpPeerSdpMLineIndex)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPeerCandidate {
            output += "\(indent) igpPeerCandidate: \(igpPeerCandidate) \n"
        }
        if hasIgpPeerSdpMId {
            output += "\(indent) igpPeerSdpMId: \(igpPeerSdpMId) \n"
        }
        if hasIgpPeerSdpMLineIndex {
            output += "\(indent) igpPeerSdpMLineIndex: \(igpPeerSdpMLineIndex) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpPeerCandidate {
                hashCode = (hashCode &* 31) &+ igpPeerCandidate.hashValue
            }
            if hasIgpPeerSdpMId {
                hashCode = (hashCode &* 31) &+ igpPeerSdpMId.hashValue
            }
            if hasIgpPeerSdpMLineIndex {
                hashCode = (hashCode &* 31) &+ igpPeerSdpMLineIndex.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingCandidateResponse"
    }
    override public func className() -> String {
        return "IGPSignalingCandidateResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPSignalingCandidateResponse = IGPSignalingCandidateResponse()
        public func getMessage() -> IGPSignalingCandidateResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPSignalingCandidateResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPSignalingCandidateResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPSignalingCandidateResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpPeerCandidate:String {
            get {
                return builderResult.igpPeerCandidate
            }
            set (value) {
                builderResult.hasIgpPeerCandidate = true
                builderResult.igpPeerCandidate = value
            }
        }
        public var hasIgpPeerCandidate:Bool {
            get {
                return builderResult.hasIgpPeerCandidate
            }
        }
        @discardableResult
        public func setIgpPeerCandidate(_ value:String) -> IGPSignalingCandidateResponse.Builder {
            self.igpPeerCandidate = value
            return self
        }
        @discardableResult
        public func clearIgpPeerCandidate() -> IGPSignalingCandidateResponse.Builder{
            builderResult.hasIgpPeerCandidate = false
            builderResult.igpPeerCandidate = ""
            return self
        }
        public var igpPeerSdpMId:String {
            get {
                return builderResult.igpPeerSdpMId
            }
            set (value) {
                builderResult.hasIgpPeerSdpMId = true
                builderResult.igpPeerSdpMId = value
            }
        }
        public var hasIgpPeerSdpMId:Bool {
            get {
                return builderResult.hasIgpPeerSdpMId
            }
        }
        @discardableResult
        public func setIgpPeerSdpMId(_ value:String) -> IGPSignalingCandidateResponse.Builder {
            self.igpPeerSdpMId = value
            return self
        }
        @discardableResult
        public func clearIgpPeerSdpMId() -> IGPSignalingCandidateResponse.Builder{
            builderResult.hasIgpPeerSdpMId = false
            builderResult.igpPeerSdpMId = ""
            return self
        }
        public var igpPeerSdpMLineIndex:Int32 {
            get {
                return builderResult.igpPeerSdpMLineIndex
            }
            set (value) {
                builderResult.hasIgpPeerSdpMLineIndex = true
                builderResult.igpPeerSdpMLineIndex = value
            }
        }
        public var hasIgpPeerSdpMLineIndex:Bool {
            get {
                return builderResult.hasIgpPeerSdpMLineIndex
            }
        }
        @discardableResult
        public func setIgpPeerSdpMLineIndex(_ value:Int32) -> IGPSignalingCandidateResponse.Builder {
            self.igpPeerSdpMLineIndex = value
            return self
        }
        @discardableResult
        public func clearIgpPeerSdpMLineIndex() -> IGPSignalingCandidateResponse.Builder{
            builderResult.hasIgpPeerSdpMLineIndex = false
            builderResult.igpPeerSdpMLineIndex = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingCandidateResponse.Builder {
            builderResult = IGPSignalingCandidateResponse()
            return self
        }
        override public func clone() throws -> IGPSignalingCandidateResponse.Builder {
            return try IGPSignalingCandidateResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingCandidateResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingCandidateResponse {
            let returnMe:IGPSignalingCandidateResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingCandidateResponse) throws -> IGPSignalingCandidateResponse.Builder {
            if other == IGPSignalingCandidateResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpPeerCandidate {
                igpPeerCandidate = other.igpPeerCandidate
            }
            if other.hasIgpPeerSdpMId {
                igpPeerSdpMId = other.igpPeerSdpMId
            }
            if other.hasIgpPeerSdpMLineIndex {
                igpPeerSdpMLineIndex = other.igpPeerSdpMLineIndex
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingCandidateResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidateResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    igpPeerCandidate = try codedInputStream.readString()

                case 26:
                    igpPeerSdpMId = try codedInputStream.readString()

                case 32:
                    igpPeerSdpMLineIndex = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingCandidateResponse.Builder {
            let resultDecodedBuilder = IGPSignalingCandidateResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpPeerCandidate = jsonMap["IGPPeerCandidate"] as? String {
                resultDecodedBuilder.igpPeerCandidate = jsonValueIgpPeerCandidate
            }
            if let jsonValueIgpPeerSdpMId = jsonMap["IGPPeerSdpMId"] as? String {
                resultDecodedBuilder.igpPeerSdpMId = jsonValueIgpPeerSdpMId
            }
            if let jsonValueIgpPeerSdpMLineIndex = jsonMap["IGPPeerSdpMLineIndex"] as? Int {
                resultDecodedBuilder.igpPeerSdpMLineIndex = Int32(jsonValueIgpPeerSdpMLineIndex)
            } else if let jsonValueIgpPeerSdpMLineIndex = jsonMap["IGPPeerSdpMLineIndex"] as? String {
                resultDecodedBuilder.igpPeerSdpMLineIndex = Int32(jsonValueIgpPeerSdpMLineIndex)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingCandidateResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingCandidateResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPSignalingCandidate: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingCandidate> {
        var mergedArray = Array<IGPSignalingCandidate>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingCandidate? {
        return try IGPSignalingCandidate.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder().mergeFrom(data: data, extensionRegistry:SignalingCandidateRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidate {
        return try IGPSignalingCandidate.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpCandidate": return self.igpCandidate
        case "igpSdpMId": return self.igpSdpMId
        case "igpSdpMLineIndex": return self.igpSdpMLineIndex
        default: return nil
        }
    }
}
extension IGPSignalingCandidate.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpCandidate": return self.igpCandidate
            case "igpSdpMId": return self.igpSdpMId
            case "igpSdpMLineIndex": return self.igpSdpMLineIndex
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpCandidate":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCandidate = newSubscriptValue
            case "igpSdpMId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpSdpMId = newSubscriptValue
            case "igpSdpMLineIndex":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpSdpMLineIndex = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPSignalingCandidateResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingCandidateResponse> {
        var mergedArray = Array<IGPSignalingCandidateResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingCandidateResponse? {
        return try IGPSignalingCandidateResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder().mergeFrom(data: data, extensionRegistry:SignalingCandidateRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingCandidateResponse {
        return try IGPSignalingCandidateResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpPeerCandidate": return self.igpPeerCandidate
        case "igpPeerSdpMId": return self.igpPeerSdpMId
        case "igpPeerSdpMLineIndex": return self.igpPeerSdpMLineIndex
        default: return nil
        }
    }
}
extension IGPSignalingCandidateResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpPeerCandidate": return self.igpPeerCandidate
            case "igpPeerSdpMId": return self.igpPeerSdpMId
            case "igpPeerSdpMLineIndex": return self.igpPeerSdpMLineIndex
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpPeerCandidate":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPeerCandidate = newSubscriptValue
            case "igpPeerSdpMId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPeerSdpMId = newSubscriptValue
            case "igpPeerSdpMLineIndex":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpPeerSdpMLineIndex = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
