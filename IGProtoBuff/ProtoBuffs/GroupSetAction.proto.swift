/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "GroupSetAction.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct GroupSetActionRoot {
    public static let `default` = GroupSetActionRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPGroupSetAction : GeneratedMessage {

    public static func == (lhs: IGPGroupSetAction, rhs: IGPGroupSetAction) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpAction == rhs.hasIgpAction) && (!lhs.hasIgpAction || lhs.igpAction == rhs.igpAction)
        fieldCheck = fieldCheck && (lhs.hasIgpActionId == rhs.hasIgpActionId) && (!lhs.hasIgpActionId || lhs.igpActionId == rhs.igpActionId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpAction:IGPClientAction = IGPClientAction.cancel
    public fileprivate(set) var hasIgpAction:Bool = false
    public fileprivate(set) var igpActionId:Int32 = Int32(0)
    public fileprivate(set) var hasIgpActionId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpAction {
            try codedOutputStream.writeEnum(fieldNumber: 3, value:igpAction.rawValue)
        }
        if hasIgpActionId {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpActionId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if (hasIgpAction) {
            serialize_size += igpAction.rawValue.computeEnumSize(fieldNumber: 3)
        }
        if hasIgpActionId {
            serialize_size += igpActionId.computeInt32Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPGroupSetAction.Builder {
        return IGPGroupSetAction.classBuilder() as! IGPGroupSetAction.Builder
    }
    public func getBuilder() -> IGPGroupSetAction.Builder {
        return classBuilder() as! IGPGroupSetAction.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSetAction.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSetAction.Builder()
    }
    public func toBuilder() throws -> IGPGroupSetAction.Builder {
        return try IGPGroupSetAction.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPGroupSetAction) throws -> IGPGroupSetAction.Builder {
        return try IGPGroupSetAction.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        if hasIgpAction {
            jsonMap["IGPAction"] = igpAction.toString()
        }
        if hasIgpActionId {
            jsonMap["IGPActionId"] = Int(igpActionId)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if (hasIgpAction) {
            output += "\(indent) igpAction: \(igpAction.description)\n"
        }
        if hasIgpActionId {
            output += "\(indent) igpActionId: \(igpActionId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpAction {
                 hashCode = (hashCode &* 31) &+ igpAction.hashValue
            }
            if hasIgpActionId {
                hashCode = (hashCode &* 31) &+ igpActionId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPGroupSetAction"
    }
    override public func className() -> String {
        return "IGPGroupSetAction"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPGroupSetAction = IGPGroupSetAction()
        public func getMessage() -> IGPGroupSetAction {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPGroupSetAction.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPGroupSetAction.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPGroupSetAction.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPGroupSetAction.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPGroupSetAction.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
            public var igpAction:IGPClientAction {
                get {
                    return builderResult.igpAction
                }
                set (value) {
                    builderResult.hasIgpAction = true
                    builderResult.igpAction = value
                }
            }
            public var hasIgpAction:Bool{
                get {
                    return builderResult.hasIgpAction
                }
            }
        @discardableResult
            public func setIgpAction(_ value:IGPClientAction) -> IGPGroupSetAction.Builder {
              self.igpAction = value
              return self
            }
        @discardableResult
            public func clearIgpAction() -> IGPGroupSetAction.Builder {
               builderResult.hasIgpAction = false
               builderResult.igpAction = .cancel
               return self
            }
        public var igpActionId:Int32 {
            get {
                return builderResult.igpActionId
            }
            set (value) {
                builderResult.hasIgpActionId = true
                builderResult.igpActionId = value
            }
        }
        public var hasIgpActionId:Bool {
            get {
                return builderResult.hasIgpActionId
            }
        }
        @discardableResult
        public func setIgpActionId(_ value:Int32) -> IGPGroupSetAction.Builder {
            self.igpActionId = value
            return self
        }
        @discardableResult
        public func clearIgpActionId() -> IGPGroupSetAction.Builder{
            builderResult.hasIgpActionId = false
            builderResult.igpActionId = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPGroupSetAction.Builder {
            builderResult = IGPGroupSetAction()
            return self
        }
        override public func clone() throws -> IGPGroupSetAction.Builder {
            return try IGPGroupSetAction.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPGroupSetAction {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPGroupSetAction {
            let returnMe:IGPGroupSetAction = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPGroupSetAction) throws -> IGPGroupSetAction.Builder {
            if other == IGPGroupSetAction() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpAction {
                igpAction = other.igpAction
            }
            if other.hasIgpActionId {
                igpActionId = other.igpActionId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSetAction.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetAction.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 24:
                    let valueIntigpAction = try codedInputStream.readEnum()
                    if let enumsigpAction = IGPClientAction(rawValue:valueIntigpAction){
                        igpAction = enumsigpAction
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntigpAction))
                    }

                case 32:
                    igpActionId = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSetAction.Builder {
            let resultDecodedBuilder = IGPGroupSetAction.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpAction = jsonMap["IGPAction"] as? String {
                resultDecodedBuilder.igpAction = try IGPClientAction.fromString(str: jsonValueIgpAction)
            }
            if let jsonValueIgpActionId = jsonMap["IGPActionId"] as? Int {
                resultDecodedBuilder.igpActionId = Int32(jsonValueIgpActionId)
            } else if let jsonValueIgpActionId = jsonMap["IGPActionId"] as? String {
                resultDecodedBuilder.igpActionId = Int32(jsonValueIgpActionId)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupSetAction.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPGroupSetAction.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPGroupSetActionResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPGroupSetActionResponse, rhs: IGPGroupSetActionResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpAction == rhs.hasIgpAction) && (!lhs.hasIgpAction || lhs.igpAction == rhs.igpAction)
        fieldCheck = fieldCheck && (lhs.hasIgpUserId == rhs.hasIgpUserId) && (!lhs.hasIgpUserId || lhs.igpUserId == rhs.igpUserId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpAction:IGPClientAction = IGPClientAction.cancel
    public fileprivate(set) var hasIgpAction:Bool = false
    public fileprivate(set) var igpUserId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpUserId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpAction {
            try codedOutputStream.writeEnum(fieldNumber: 3, value:igpAction.rawValue)
        }
        if hasIgpUserId {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:igpUserId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if (hasIgpAction) {
            serialize_size += igpAction.rawValue.computeEnumSize(fieldNumber: 3)
        }
        if hasIgpUserId {
            serialize_size += igpUserId.computeInt64Size(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPGroupSetActionResponse.Builder {
        return IGPGroupSetActionResponse.classBuilder() as! IGPGroupSetActionResponse.Builder
    }
    public func getBuilder() -> IGPGroupSetActionResponse.Builder {
        return classBuilder() as! IGPGroupSetActionResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSetActionResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSetActionResponse.Builder()
    }
    public func toBuilder() throws -> IGPGroupSetActionResponse.Builder {
        return try IGPGroupSetActionResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPGroupSetActionResponse) throws -> IGPGroupSetActionResponse.Builder {
        return try IGPGroupSetActionResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        if hasIgpAction {
            jsonMap["IGPAction"] = igpAction.toString()
        }
        if hasIgpUserId {
            jsonMap["IGPUserId"] = "\(igpUserId)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if (hasIgpAction) {
            output += "\(indent) igpAction: \(igpAction.description)\n"
        }
        if hasIgpUserId {
            output += "\(indent) igpUserId: \(igpUserId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpAction {
                 hashCode = (hashCode &* 31) &+ igpAction.hashValue
            }
            if hasIgpUserId {
                hashCode = (hashCode &* 31) &+ igpUserId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPGroupSetActionResponse"
    }
    override public func className() -> String {
        return "IGPGroupSetActionResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPGroupSetActionResponse = IGPGroupSetActionResponse()
        public func getMessage() -> IGPGroupSetActionResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPGroupSetActionResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPGroupSetActionResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPGroupSetActionResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPGroupSetActionResponse.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPGroupSetActionResponse.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
            public var igpAction:IGPClientAction {
                get {
                    return builderResult.igpAction
                }
                set (value) {
                    builderResult.hasIgpAction = true
                    builderResult.igpAction = value
                }
            }
            public var hasIgpAction:Bool{
                get {
                    return builderResult.hasIgpAction
                }
            }
        @discardableResult
            public func setIgpAction(_ value:IGPClientAction) -> IGPGroupSetActionResponse.Builder {
              self.igpAction = value
              return self
            }
        @discardableResult
            public func clearIgpAction() -> IGPGroupSetActionResponse.Builder {
               builderResult.hasIgpAction = false
               builderResult.igpAction = .cancel
               return self
            }
        public var igpUserId:Int64 {
            get {
                return builderResult.igpUserId
            }
            set (value) {
                builderResult.hasIgpUserId = true
                builderResult.igpUserId = value
            }
        }
        public var hasIgpUserId:Bool {
            get {
                return builderResult.hasIgpUserId
            }
        }
        @discardableResult
        public func setIgpUserId(_ value:Int64) -> IGPGroupSetActionResponse.Builder {
            self.igpUserId = value
            return self
        }
        @discardableResult
        public func clearIgpUserId() -> IGPGroupSetActionResponse.Builder{
            builderResult.hasIgpUserId = false
            builderResult.igpUserId = Int64(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPGroupSetActionResponse.Builder {
            builderResult = IGPGroupSetActionResponse()
            return self
        }
        override public func clone() throws -> IGPGroupSetActionResponse.Builder {
            return try IGPGroupSetActionResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPGroupSetActionResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPGroupSetActionResponse {
            let returnMe:IGPGroupSetActionResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPGroupSetActionResponse) throws -> IGPGroupSetActionResponse.Builder {
            if other == IGPGroupSetActionResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpAction {
                igpAction = other.igpAction
            }
            if other.hasIgpUserId {
                igpUserId = other.igpUserId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSetActionResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetActionResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 24:
                    let valueIntigpAction = try codedInputStream.readEnum()
                    if let enumsigpAction = IGPClientAction(rawValue:valueIntigpAction){
                        igpAction = enumsigpAction
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntigpAction))
                    }

                case 32:
                    igpUserId = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSetActionResponse.Builder {
            let resultDecodedBuilder = IGPGroupSetActionResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpAction = jsonMap["IGPAction"] as? String {
                resultDecodedBuilder.igpAction = try IGPClientAction.fromString(str: jsonValueIgpAction)
            }
            if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? String {
                resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)!
            } else if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? Int {
                resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupSetActionResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPGroupSetActionResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPGroupSetAction: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupSetAction> {
        var mergedArray = Array<IGPGroupSetAction>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupSetAction? {
        return try IGPGroupSetAction.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder().mergeFrom(data: data, extensionRegistry:GroupSetActionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetAction {
        return try IGPGroupSetAction.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpRoomId": return self.igpRoomId
        case "igpAction": return self.igpAction
        case "igpActionId": return self.igpActionId
        default: return nil
        }
    }
}
extension IGPGroupSetAction.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpRoomId": return self.igpRoomId
            case "igpAction": return self.igpAction
            case "igpActionId": return self.igpActionId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpAction":
                guard let newSubscriptValue = newSubscriptValue as? IGPClientAction else {
                    return
                }
                self.igpAction = newSubscriptValue
            case "igpActionId":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpActionId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPGroupSetActionResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupSetActionResponse> {
        var mergedArray = Array<IGPGroupSetActionResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupSetActionResponse? {
        return try IGPGroupSetActionResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder().mergeFrom(data: data, extensionRegistry:GroupSetActionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSetActionResponse {
        return try IGPGroupSetActionResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpRoomId": return self.igpRoomId
        case "igpAction": return self.igpAction
        case "igpUserId": return self.igpUserId
        default: return nil
        }
    }
}
extension IGPGroupSetActionResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpRoomId": return self.igpRoomId
            case "igpAction": return self.igpAction
            case "igpUserId": return self.igpUserId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpAction":
                guard let newSubscriptValue = newSubscriptValue as? IGPClientAction else {
                    return
                }
                self.igpAction = newSubscriptValue
            case "igpUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpUserId = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
