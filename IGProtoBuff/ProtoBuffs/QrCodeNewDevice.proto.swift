/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "QrCodeNewDevice.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct QrCodeNewDeviceRoot {
    public static let `default` = QrCodeNewDeviceRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPQrCodeNewDevice : GeneratedMessage {
    public typealias BuilderType = IGPQrCodeNewDevice.Builder

    public static func == (lhs: IGPQrCodeNewDevice, rhs: IGPQrCodeNewDevice) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpAppName == rhs.hasIgpAppName) && (!lhs.hasIgpAppName || lhs.igpAppName == rhs.igpAppName)
        fieldCheck = fieldCheck && (lhs.hasIgpAppId == rhs.hasIgpAppId) && (!lhs.hasIgpAppId || lhs.igpAppId == rhs.igpAppId)
        fieldCheck = fieldCheck && (lhs.hasIgpAppBuildVersion == rhs.hasIgpAppBuildVersion) && (!lhs.hasIgpAppBuildVersion || lhs.igpAppBuildVersion == rhs.igpAppBuildVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpAppVersion == rhs.hasIgpAppVersion) && (!lhs.hasIgpAppVersion || lhs.igpAppVersion == rhs.igpAppVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpPlatform == rhs.hasIgpPlatform) && (!lhs.hasIgpPlatform || lhs.igpPlatform == rhs.igpPlatform)
        fieldCheck = fieldCheck && (lhs.hasIgpPlatformVersion == rhs.hasIgpPlatformVersion) && (!lhs.hasIgpPlatformVersion || lhs.igpPlatformVersion == rhs.igpPlatformVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpDevice == rhs.hasIgpDevice) && (!lhs.hasIgpDevice || lhs.igpDevice == rhs.igpDevice)
        fieldCheck = fieldCheck && (lhs.hasIgpDeviceName == rhs.hasIgpDeviceName) && (!lhs.hasIgpDeviceName || lhs.igpDeviceName == rhs.igpDeviceName)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpAppName:String! = nil
    public fileprivate(set) var hasIgpAppName:Bool = false

    public fileprivate(set) var igpAppId:Int32! = nil
    public fileprivate(set) var hasIgpAppId:Bool = false

    public fileprivate(set) var igpAppBuildVersion:Int32! = nil
    public fileprivate(set) var hasIgpAppBuildVersion:Bool = false

    public fileprivate(set) var igpAppVersion:String! = nil
    public fileprivate(set) var hasIgpAppVersion:Bool = false

    public fileprivate(set) var igpPlatform:IGPPlatform = IGPPlatform.unknownPlatform
    public fileprivate(set) var hasIgpPlatform:Bool = false
    public fileprivate(set) var igpPlatformVersion:String! = nil
    public fileprivate(set) var hasIgpPlatformVersion:Bool = false

    public fileprivate(set) var igpDevice:IGPDevice = IGPDevice.unknownDevice
    public fileprivate(set) var hasIgpDevice:Bool = false
    public fileprivate(set) var igpDeviceName:String! = nil
    public fileprivate(set) var hasIgpDeviceName:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpAppName {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpAppName)
        }
        if hasIgpAppId {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpAppId)
        }
        if hasIgpAppBuildVersion {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpAppBuildVersion)
        }
        if hasIgpAppVersion {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpAppVersion)
        }
        if hasIgpPlatform {
            try codedOutputStream.writeEnum(fieldNumber: 6, value:igpPlatform.rawValue)
        }
        if hasIgpPlatformVersion {
            try codedOutputStream.writeString(fieldNumber: 7, value:igpPlatformVersion)
        }
        if hasIgpDevice {
            try codedOutputStream.writeEnum(fieldNumber: 8, value:igpDevice.rawValue)
        }
        if hasIgpDeviceName {
            try codedOutputStream.writeString(fieldNumber: 9, value:igpDeviceName)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpAppName {
            serialize_size += igpAppName.computeStringSize(fieldNumber: 2)
        }
        if hasIgpAppId {
            serialize_size += igpAppId.computeInt32Size(fieldNumber: 3)
        }
        if hasIgpAppBuildVersion {
            serialize_size += igpAppBuildVersion.computeInt32Size(fieldNumber: 4)
        }
        if hasIgpAppVersion {
            serialize_size += igpAppVersion.computeStringSize(fieldNumber: 5)
        }
        if (hasIgpPlatform) {
            serialize_size += igpPlatform.rawValue.computeEnumSize(fieldNumber: 6)
        }
        if hasIgpPlatformVersion {
            serialize_size += igpPlatformVersion.computeStringSize(fieldNumber: 7)
        }
        if (hasIgpDevice) {
            serialize_size += igpDevice.rawValue.computeEnumSize(fieldNumber: 8)
        }
        if hasIgpDeviceName {
            serialize_size += igpDeviceName.computeStringSize(fieldNumber: 9)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPQrCodeNewDevice.Builder {
        return IGPQrCodeNewDevice.classBuilder() as! IGPQrCodeNewDevice.Builder
    }
    public func getBuilder() -> IGPQrCodeNewDevice.Builder {
        return classBuilder() as! IGPQrCodeNewDevice.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPQrCodeNewDevice.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPQrCodeNewDevice.Builder()
    }
    public func toBuilder() throws -> IGPQrCodeNewDevice.Builder {
        return try IGPQrCodeNewDevice.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPQrCodeNewDevice) throws -> IGPQrCodeNewDevice.Builder {
        return try IGPQrCodeNewDevice.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpAppName {
            jsonMap["IGPAppName"] = igpAppName
        }
        if hasIgpAppId {
            jsonMap["IGPAppId"] = Int(igpAppId)
        }
        if hasIgpAppBuildVersion {
            jsonMap["IGPAppBuildVersion"] = Int(igpAppBuildVersion)
        }
        if hasIgpAppVersion {
            jsonMap["IGPAppVersion"] = igpAppVersion
        }
        if hasIgpPlatform {
            jsonMap["IGPPlatform"] = igpPlatform.toString()
        }
        if hasIgpPlatformVersion {
            jsonMap["IGPPlatformVersion"] = igpPlatformVersion
        }
        if hasIgpDevice {
            jsonMap["IGPDevice"] = igpDevice.toString()
        }
        if hasIgpDeviceName {
            jsonMap["IGPDeviceName"] = igpDeviceName
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpAppName {
            output += "\(indent) igpAppName: \(igpAppName) \n"
        }
        if hasIgpAppId {
            output += "\(indent) igpAppId: \(igpAppId) \n"
        }
        if hasIgpAppBuildVersion {
            output += "\(indent) igpAppBuildVersion: \(igpAppBuildVersion) \n"
        }
        if hasIgpAppVersion {
            output += "\(indent) igpAppVersion: \(igpAppVersion) \n"
        }
        if (hasIgpPlatform) {
            output += "\(indent) igpPlatform: \(igpPlatform.description)\n"
        }
        if hasIgpPlatformVersion {
            output += "\(indent) igpPlatformVersion: \(igpPlatformVersion) \n"
        }
        if (hasIgpDevice) {
            output += "\(indent) igpDevice: \(igpDevice.description)\n"
        }
        if hasIgpDeviceName {
            output += "\(indent) igpDeviceName: \(igpDeviceName) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpAppName {
                hashCode = (hashCode &* 31) &+ igpAppName.hashValue
            }
            if hasIgpAppId {
                hashCode = (hashCode &* 31) &+ igpAppId.hashValue
            }
            if hasIgpAppBuildVersion {
                hashCode = (hashCode &* 31) &+ igpAppBuildVersion.hashValue
            }
            if hasIgpAppVersion {
                hashCode = (hashCode &* 31) &+ igpAppVersion.hashValue
            }
            if hasIgpPlatform {
                 hashCode = (hashCode &* 31) &+ igpPlatform.hashValue
            }
            if hasIgpPlatformVersion {
                hashCode = (hashCode &* 31) &+ igpPlatformVersion.hashValue
            }
            if hasIgpDevice {
                 hashCode = (hashCode &* 31) &+ igpDevice.hashValue
            }
            if hasIgpDeviceName {
                hashCode = (hashCode &* 31) &+ igpDeviceName.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPQrCodeNewDevice"
    }
    override public func className() -> String {
        return "IGPQrCodeNewDevice"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPQrCodeNewDevice = IGPQrCodeNewDevice()
        public func getMessage() -> IGPQrCodeNewDevice {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPQrCodeNewDevice.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPQrCodeNewDevice.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPQrCodeNewDevice.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpAppName:String {
            get {
                return builderResult.igpAppName
            }
            set (value) {
                builderResult.hasIgpAppName = true
                builderResult.igpAppName = value
            }
        }
        public var hasIgpAppName:Bool {
            get {
                return builderResult.hasIgpAppName
            }
        }
        @discardableResult
        public func setIgpAppName(_ value:String) -> IGPQrCodeNewDevice.Builder {
            self.igpAppName = value
            return self
        }
        @discardableResult
        public func clearIgpAppName() -> IGPQrCodeNewDevice.Builder{
            builderResult.hasIgpAppName = false
            builderResult.igpAppName = nil
            return self
        }
        public var igpAppId:Int32 {
            get {
                return builderResult.igpAppId
            }
            set (value) {
                builderResult.hasIgpAppId = true
                builderResult.igpAppId = value
            }
        }
        public var hasIgpAppId:Bool {
            get {
                return builderResult.hasIgpAppId
            }
        }
        @discardableResult
        public func setIgpAppId(_ value:Int32) -> IGPQrCodeNewDevice.Builder {
            self.igpAppId = value
            return self
        }
        @discardableResult
        public func clearIgpAppId() -> IGPQrCodeNewDevice.Builder{
            builderResult.hasIgpAppId = false
            builderResult.igpAppId = nil
            return self
        }
        public var igpAppBuildVersion:Int32 {
            get {
                return builderResult.igpAppBuildVersion
            }
            set (value) {
                builderResult.hasIgpAppBuildVersion = true
                builderResult.igpAppBuildVersion = value
            }
        }
        public var hasIgpAppBuildVersion:Bool {
            get {
                return builderResult.hasIgpAppBuildVersion
            }
        }
        @discardableResult
        public func setIgpAppBuildVersion(_ value:Int32) -> IGPQrCodeNewDevice.Builder {
            self.igpAppBuildVersion = value
            return self
        }
        @discardableResult
        public func clearIgpAppBuildVersion() -> IGPQrCodeNewDevice.Builder{
            builderResult.hasIgpAppBuildVersion = false
            builderResult.igpAppBuildVersion = nil
            return self
        }
        public var igpAppVersion:String {
            get {
                return builderResult.igpAppVersion
            }
            set (value) {
                builderResult.hasIgpAppVersion = true
                builderResult.igpAppVersion = value
            }
        }
        public var hasIgpAppVersion:Bool {
            get {
                return builderResult.hasIgpAppVersion
            }
        }
        @discardableResult
        public func setIgpAppVersion(_ value:String) -> IGPQrCodeNewDevice.Builder {
            self.igpAppVersion = value
            return self
        }
        @discardableResult
        public func clearIgpAppVersion() -> IGPQrCodeNewDevice.Builder{
            builderResult.hasIgpAppVersion = false
            builderResult.igpAppVersion = nil
            return self
        }
            public var igpPlatform:IGPPlatform {
                get {
                    return builderResult.igpPlatform
                }
                set (value) {
                    builderResult.hasIgpPlatform = true
                    builderResult.igpPlatform = value
                }
            }
            public var hasIgpPlatform:Bool{
                get {
                    return builderResult.hasIgpPlatform
                }
            }
        @discardableResult
            public func setIgpPlatform(_ value:IGPPlatform) -> IGPQrCodeNewDevice.Builder {
              self.igpPlatform = value
              return self
            }
        @discardableResult
            public func clearIgpPlatform() -> IGPQrCodeNewDevice.Builder {
               builderResult.hasIgpPlatform = false
               builderResult.igpPlatform = .unknownPlatform
               return self
            }
        public var igpPlatformVersion:String {
            get {
                return builderResult.igpPlatformVersion
            }
            set (value) {
                builderResult.hasIgpPlatformVersion = true
                builderResult.igpPlatformVersion = value
            }
        }
        public var hasIgpPlatformVersion:Bool {
            get {
                return builderResult.hasIgpPlatformVersion
            }
        }
        @discardableResult
        public func setIgpPlatformVersion(_ value:String) -> IGPQrCodeNewDevice.Builder {
            self.igpPlatformVersion = value
            return self
        }
        @discardableResult
        public func clearIgpPlatformVersion() -> IGPQrCodeNewDevice.Builder{
            builderResult.hasIgpPlatformVersion = false
            builderResult.igpPlatformVersion = nil
            return self
        }
            public var igpDevice:IGPDevice {
                get {
                    return builderResult.igpDevice
                }
                set (value) {
                    builderResult.hasIgpDevice = true
                    builderResult.igpDevice = value
                }
            }
            public var hasIgpDevice:Bool{
                get {
                    return builderResult.hasIgpDevice
                }
            }
        @discardableResult
            public func setIgpDevice(_ value:IGPDevice) -> IGPQrCodeNewDevice.Builder {
              self.igpDevice = value
              return self
            }
        @discardableResult
            public func clearIgpDevice() -> IGPQrCodeNewDevice.Builder {
               builderResult.hasIgpDevice = false
               builderResult.igpDevice = .unknownDevice
               return self
            }
        public var igpDeviceName:String {
            get {
                return builderResult.igpDeviceName
            }
            set (value) {
                builderResult.hasIgpDeviceName = true
                builderResult.igpDeviceName = value
            }
        }
        public var hasIgpDeviceName:Bool {
            get {
                return builderResult.hasIgpDeviceName
            }
        }
        @discardableResult
        public func setIgpDeviceName(_ value:String) -> IGPQrCodeNewDevice.Builder {
            self.igpDeviceName = value
            return self
        }
        @discardableResult
        public func clearIgpDeviceName() -> IGPQrCodeNewDevice.Builder{
            builderResult.hasIgpDeviceName = false
            builderResult.igpDeviceName = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPQrCodeNewDevice.Builder {
            builderResult = IGPQrCodeNewDevice()
            return self
        }
        override public func clone() throws -> IGPQrCodeNewDevice.Builder {
            return try IGPQrCodeNewDevice.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPQrCodeNewDevice {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPQrCodeNewDevice {
            let returnMe:IGPQrCodeNewDevice = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPQrCodeNewDevice) throws -> IGPQrCodeNewDevice.Builder {
            if other == IGPQrCodeNewDevice() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpAppName {
                igpAppName = other.igpAppName
            }
            if other.hasIgpAppId {
                igpAppId = other.igpAppId
            }
            if other.hasIgpAppBuildVersion {
                igpAppBuildVersion = other.igpAppBuildVersion
            }
            if other.hasIgpAppVersion {
                igpAppVersion = other.igpAppVersion
            }
            if other.hasIgpPlatform {
                igpPlatform = other.igpPlatform
            }
            if other.hasIgpPlatformVersion {
                igpPlatformVersion = other.igpPlatformVersion
            }
            if other.hasIgpDevice {
                igpDevice = other.igpDevice
            }
            if other.hasIgpDeviceName {
                igpDeviceName = other.igpDeviceName
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPQrCodeNewDevice.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDevice.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    igpAppName = try codedInputStream.readString()

                case 24:
                    igpAppId = try codedInputStream.readInt32()

                case 32:
                    igpAppBuildVersion = try codedInputStream.readInt32()

                case 42:
                    igpAppVersion = try codedInputStream.readString()

                case 48:
                    let valueIntigpPlatform = try codedInputStream.readEnum()
                    if let enumsigpPlatform = IGPPlatform(rawValue:valueIntigpPlatform){
                        igpPlatform = enumsigpPlatform
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 6, value:Int64(valueIntigpPlatform))
                    }

                case 58:
                    igpPlatformVersion = try codedInputStream.readString()

                case 64:
                    let valueIntigpDevice = try codedInputStream.readEnum()
                    if let enumsigpDevice = IGPDevice(rawValue:valueIntigpDevice){
                        igpDevice = enumsigpDevice
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 8, value:Int64(valueIntigpDevice))
                    }

                case 74:
                    igpDeviceName = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPQrCodeNewDevice.Builder {
            let resultDecodedBuilder = IGPQrCodeNewDevice.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpAppName = jsonMap["IGPAppName"] as? String {
                resultDecodedBuilder.igpAppName = jsonValueIgpAppName
            }
            if let jsonValueIgpAppId = jsonMap["IGPAppId"] as? Int {
                resultDecodedBuilder.igpAppId = Int32(jsonValueIgpAppId)
            } else if let jsonValueIgpAppId = jsonMap["IGPAppId"] as? String {
                resultDecodedBuilder.igpAppId = Int32(jsonValueIgpAppId)!
            }
            if let jsonValueIgpAppBuildVersion = jsonMap["IGPAppBuildVersion"] as? Int {
                resultDecodedBuilder.igpAppBuildVersion = Int32(jsonValueIgpAppBuildVersion)
            } else if let jsonValueIgpAppBuildVersion = jsonMap["IGPAppBuildVersion"] as? String {
                resultDecodedBuilder.igpAppBuildVersion = Int32(jsonValueIgpAppBuildVersion)!
            }
            if let jsonValueIgpAppVersion = jsonMap["IGPAppVersion"] as? String {
                resultDecodedBuilder.igpAppVersion = jsonValueIgpAppVersion
            }
            if let jsonValueIgpPlatform = jsonMap["IGPPlatform"] as? String {
                resultDecodedBuilder.igpPlatform = try IGPPlatform.fromString(jsonValueIgpPlatform)
            }
            if let jsonValueIgpPlatformVersion = jsonMap["IGPPlatformVersion"] as? String {
                resultDecodedBuilder.igpPlatformVersion = jsonValueIgpPlatformVersion
            }
            if let jsonValueIgpDevice = jsonMap["IGPDevice"] as? String {
                resultDecodedBuilder.igpDevice = try IGPDevice.fromString(jsonValueIgpDevice)
            }
            if let jsonValueIgpDeviceName = jsonMap["IGPDeviceName"] as? String {
                resultDecodedBuilder.igpDeviceName = jsonValueIgpDeviceName
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPQrCodeNewDevice.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPQrCodeNewDevice.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPQrCodeNewDeviceResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPQrCodeNewDeviceResponse.Builder

    public static func == (lhs: IGPQrCodeNewDeviceResponse, rhs: IGPQrCodeNewDeviceResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpQrCodeImage == rhs.hasIgpQrCodeImage) && (!lhs.hasIgpQrCodeImage || lhs.igpQrCodeImage == rhs.igpQrCodeImage)
        fieldCheck = fieldCheck && (lhs.hasIgpExpireTime == rhs.hasIgpExpireTime) && (!lhs.hasIgpExpireTime || lhs.igpExpireTime == rhs.igpExpireTime)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpQrCodeImage:Data! = nil
    public fileprivate(set) var hasIgpQrCodeImage:Bool = false

    public fileprivate(set) var igpExpireTime:Int32! = nil
    public fileprivate(set) var hasIgpExpireTime:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpQrCodeImage {
            try codedOutputStream.writeData(fieldNumber: 2, value:igpQrCodeImage)
        }
        if hasIgpExpireTime {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpExpireTime)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpQrCodeImage {
            serialize_size += igpQrCodeImage.computeDataSize(fieldNumber: 2)
        }
        if hasIgpExpireTime {
            serialize_size += igpExpireTime.computeInt32Size(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPQrCodeNewDeviceResponse.Builder {
        return IGPQrCodeNewDeviceResponse.classBuilder() as! IGPQrCodeNewDeviceResponse.Builder
    }
    public func getBuilder() -> IGPQrCodeNewDeviceResponse.Builder {
        return classBuilder() as! IGPQrCodeNewDeviceResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPQrCodeNewDeviceResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPQrCodeNewDeviceResponse.Builder()
    }
    public func toBuilder() throws -> IGPQrCodeNewDeviceResponse.Builder {
        return try IGPQrCodeNewDeviceResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPQrCodeNewDeviceResponse) throws -> IGPQrCodeNewDeviceResponse.Builder {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpQrCodeImage {
            jsonMap["IGPQrCodeImage"] = igpQrCodeImage.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasIgpExpireTime {
            jsonMap["IGPExpireTime"] = Int(igpExpireTime)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpQrCodeImage {
            output += "\(indent) igpQrCodeImage: \(igpQrCodeImage) \n"
        }
        if hasIgpExpireTime {
            output += "\(indent) igpExpireTime: \(igpExpireTime) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpQrCodeImage {
                hashCode = (hashCode &* 31) &+ igpQrCodeImage.hashValue
            }
            if hasIgpExpireTime {
                hashCode = (hashCode &* 31) &+ igpExpireTime.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPQrCodeNewDeviceResponse"
    }
    override public func className() -> String {
        return "IGPQrCodeNewDeviceResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPQrCodeNewDeviceResponse = IGPQrCodeNewDeviceResponse()
        public func getMessage() -> IGPQrCodeNewDeviceResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPQrCodeNewDeviceResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPQrCodeNewDeviceResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPQrCodeNewDeviceResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpQrCodeImage:Data {
            get {
                return builderResult.igpQrCodeImage
            }
            set (value) {
                builderResult.hasIgpQrCodeImage = true
                builderResult.igpQrCodeImage = value
            }
        }
        public var hasIgpQrCodeImage:Bool {
            get {
                return builderResult.hasIgpQrCodeImage
            }
        }
        @discardableResult
        public func setIgpQrCodeImage(_ value:Data) -> IGPQrCodeNewDeviceResponse.Builder {
            self.igpQrCodeImage = value
            return self
        }
        @discardableResult
        public func clearIgpQrCodeImage() -> IGPQrCodeNewDeviceResponse.Builder{
            builderResult.hasIgpQrCodeImage = false
            builderResult.igpQrCodeImage = nil
            return self
        }
        public var igpExpireTime:Int32 {
            get {
                return builderResult.igpExpireTime
            }
            set (value) {
                builderResult.hasIgpExpireTime = true
                builderResult.igpExpireTime = value
            }
        }
        public var hasIgpExpireTime:Bool {
            get {
                return builderResult.hasIgpExpireTime
            }
        }
        @discardableResult
        public func setIgpExpireTime(_ value:Int32) -> IGPQrCodeNewDeviceResponse.Builder {
            self.igpExpireTime = value
            return self
        }
        @discardableResult
        public func clearIgpExpireTime() -> IGPQrCodeNewDeviceResponse.Builder{
            builderResult.hasIgpExpireTime = false
            builderResult.igpExpireTime = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPQrCodeNewDeviceResponse.Builder {
            builderResult = IGPQrCodeNewDeviceResponse()
            return self
        }
        override public func clone() throws -> IGPQrCodeNewDeviceResponse.Builder {
            return try IGPQrCodeNewDeviceResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPQrCodeNewDeviceResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPQrCodeNewDeviceResponse {
            let returnMe:IGPQrCodeNewDeviceResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPQrCodeNewDeviceResponse) throws -> IGPQrCodeNewDeviceResponse.Builder {
            if other == IGPQrCodeNewDeviceResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpQrCodeImage {
                igpQrCodeImage = other.igpQrCodeImage
            }
            if other.hasIgpExpireTime {
                igpExpireTime = other.igpExpireTime
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPQrCodeNewDeviceResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDeviceResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    igpQrCodeImage = try codedInputStream.readData()

                case 24:
                    igpExpireTime = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPQrCodeNewDeviceResponse.Builder {
            let resultDecodedBuilder = IGPQrCodeNewDeviceResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpQrCodeImage = jsonMap["IGPQrCodeImage"] as? String {
                resultDecodedBuilder.igpQrCodeImage = Data(base64Encoded:jsonValueIgpQrCodeImage, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueIgpExpireTime = jsonMap["IGPExpireTime"] as? Int {
                resultDecodedBuilder.igpExpireTime = Int32(jsonValueIgpExpireTime)
            } else if let jsonValueIgpExpireTime = jsonMap["IGPExpireTime"] as? String {
                resultDecodedBuilder.igpExpireTime = Int32(jsonValueIgpExpireTime)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPQrCodeNewDeviceResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPQrCodeNewDeviceResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPQrCodeNewDevice: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPQrCodeNewDevice> {
        var mergedArray = Array<IGPQrCodeNewDevice>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPQrCodeNewDevice? {
        return try IGPQrCodeNewDevice.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder().mergeFrom(data: data, extensionRegistry:QrCodeNewDeviceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDevice {
        return try IGPQrCodeNewDevice.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpAppName": return self.igpAppName
        case "igpAppId": return self.igpAppId
        case "igpAppBuildVersion": return self.igpAppBuildVersion
        case "igpAppVersion": return self.igpAppVersion
        case "igpPlatform": return self.igpPlatform
        case "igpPlatformVersion": return self.igpPlatformVersion
        case "igpDevice": return self.igpDevice
        case "igpDeviceName": return self.igpDeviceName
        default: return nil
        }
    }
}
extension IGPQrCodeNewDevice.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPQrCodeNewDevice
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpAppName": return self.igpAppName
            case "igpAppId": return self.igpAppId
            case "igpAppBuildVersion": return self.igpAppBuildVersion
            case "igpAppVersion": return self.igpAppVersion
            case "igpPlatform": return self.igpPlatform
            case "igpPlatformVersion": return self.igpPlatformVersion
            case "igpDevice": return self.igpDevice
            case "igpDeviceName": return self.igpDeviceName
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpAppName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAppName = newSubscriptValue
            case "igpAppId":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAppId = newSubscriptValue
            case "igpAppBuildVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAppBuildVersion = newSubscriptValue
            case "igpAppVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAppVersion = newSubscriptValue
            case "igpPlatform":
                guard let newSubscriptValue = newSubscriptValue as? IGPPlatform else {
                    return
                }
                self.igpPlatform = newSubscriptValue
            case "igpPlatformVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPlatformVersion = newSubscriptValue
            case "igpDevice":
                guard let newSubscriptValue = newSubscriptValue as? IGPDevice else {
                    return
                }
                self.igpDevice = newSubscriptValue
            case "igpDeviceName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpDeviceName = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPQrCodeNewDeviceResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPQrCodeNewDeviceResponse> {
        var mergedArray = Array<IGPQrCodeNewDeviceResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPQrCodeNewDeviceResponse? {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeFrom(data: data, extensionRegistry:QrCodeNewDeviceRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPQrCodeNewDeviceResponse {
        return try IGPQrCodeNewDeviceResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpQrCodeImage": return self.igpQrCodeImage
        case "igpExpireTime": return self.igpExpireTime
        default: return nil
        }
    }
}
extension IGPQrCodeNewDeviceResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPQrCodeNewDeviceResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpQrCodeImage": return self.igpQrCodeImage
            case "igpExpireTime": return self.igpExpireTime
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpQrCodeImage":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.igpQrCodeImage = newSubscriptValue
            case "igpExpireTime":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpExpireTime = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
