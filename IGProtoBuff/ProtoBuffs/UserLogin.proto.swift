/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "UserLogin.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct UserLoginRoot {
    public static let `default` = UserLoginRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPUserLogin : GeneratedMessage {
    public typealias BuilderType = IGPUserLogin.Builder

    public static func == (lhs: IGPUserLogin, rhs: IGPUserLogin) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpToken == rhs.hasIgpToken) && (!lhs.hasIgpToken || lhs.igpToken == rhs.igpToken)
        fieldCheck = fieldCheck && (lhs.hasIgpAppName == rhs.hasIgpAppName) && (!lhs.hasIgpAppName || lhs.igpAppName == rhs.igpAppName)
        fieldCheck = fieldCheck && (lhs.hasIgpAppId == rhs.hasIgpAppId) && (!lhs.hasIgpAppId || lhs.igpAppId == rhs.igpAppId)
        fieldCheck = fieldCheck && (lhs.hasIgpAppBuildVersion == rhs.hasIgpAppBuildVersion) && (!lhs.hasIgpAppBuildVersion || lhs.igpAppBuildVersion == rhs.igpAppBuildVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpAppVersion == rhs.hasIgpAppVersion) && (!lhs.hasIgpAppVersion || lhs.igpAppVersion == rhs.igpAppVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpPlatform == rhs.hasIgpPlatform) && (!lhs.hasIgpPlatform || lhs.igpPlatform == rhs.igpPlatform)
        fieldCheck = fieldCheck && (lhs.hasIgpPlatformVersion == rhs.hasIgpPlatformVersion) && (!lhs.hasIgpPlatformVersion || lhs.igpPlatformVersion == rhs.igpPlatformVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpDevice == rhs.hasIgpDevice) && (!lhs.hasIgpDevice || lhs.igpDevice == rhs.igpDevice)
        fieldCheck = fieldCheck && (lhs.hasIgpDeviceName == rhs.hasIgpDeviceName) && (!lhs.hasIgpDeviceName || lhs.igpDeviceName == rhs.igpDeviceName)
        fieldCheck = fieldCheck && (lhs.hasIgpLanguage == rhs.hasIgpLanguage) && (!lhs.hasIgpLanguage || lhs.igpLanguage == rhs.igpLanguage)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpToken:String! = nil
    public fileprivate(set) var hasIgpToken:Bool = false

    public fileprivate(set) var igpAppName:String! = nil
    public fileprivate(set) var hasIgpAppName:Bool = false

    public fileprivate(set) var igpAppId:Int32! = nil
    public fileprivate(set) var hasIgpAppId:Bool = false

    public fileprivate(set) var igpAppBuildVersion:Int32! = nil
    public fileprivate(set) var hasIgpAppBuildVersion:Bool = false

    public fileprivate(set) var igpAppVersion:String! = nil
    public fileprivate(set) var hasIgpAppVersion:Bool = false

    public fileprivate(set) var igpPlatform:IGPPlatform = IGPPlatform.unknownPlatform
    public fileprivate(set) var hasIgpPlatform:Bool = false
    public fileprivate(set) var igpPlatformVersion:String! = nil
    public fileprivate(set) var hasIgpPlatformVersion:Bool = false

    public fileprivate(set) var igpDevice:IGPDevice = IGPDevice.unknownDevice
    public fileprivate(set) var hasIgpDevice:Bool = false
    public fileprivate(set) var igpDeviceName:String! = nil
    public fileprivate(set) var hasIgpDeviceName:Bool = false

    public fileprivate(set) var igpLanguage:IGPLanguage = IGPLanguage.enUs
    public fileprivate(set) var hasIgpLanguage:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpToken {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpToken)
        }
        if hasIgpAppName {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpAppName)
        }
        if hasIgpAppId {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpAppId)
        }
        if hasIgpAppBuildVersion {
            try codedOutputStream.writeInt32(fieldNumber: 5, value:igpAppBuildVersion)
        }
        if hasIgpAppVersion {
            try codedOutputStream.writeString(fieldNumber: 6, value:igpAppVersion)
        }
        if hasIgpPlatform {
            try codedOutputStream.writeEnum(fieldNumber: 7, value:igpPlatform.rawValue)
        }
        if hasIgpPlatformVersion {
            try codedOutputStream.writeString(fieldNumber: 8, value:igpPlatformVersion)
        }
        if hasIgpDevice {
            try codedOutputStream.writeEnum(fieldNumber: 9, value:igpDevice.rawValue)
        }
        if hasIgpDeviceName {
            try codedOutputStream.writeString(fieldNumber: 10, value:igpDeviceName)
        }
        if hasIgpLanguage {
            try codedOutputStream.writeEnum(fieldNumber: 11, value:igpLanguage.rawValue)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpToken {
            serialize_size += igpToken.computeStringSize(fieldNumber: 2)
        }
        if hasIgpAppName {
            serialize_size += igpAppName.computeStringSize(fieldNumber: 3)
        }
        if hasIgpAppId {
            serialize_size += igpAppId.computeInt32Size(fieldNumber: 4)
        }
        if hasIgpAppBuildVersion {
            serialize_size += igpAppBuildVersion.computeInt32Size(fieldNumber: 5)
        }
        if hasIgpAppVersion {
            serialize_size += igpAppVersion.computeStringSize(fieldNumber: 6)
        }
        if (hasIgpPlatform) {
            serialize_size += igpPlatform.rawValue.computeEnumSize(fieldNumber: 7)
        }
        if hasIgpPlatformVersion {
            serialize_size += igpPlatformVersion.computeStringSize(fieldNumber: 8)
        }
        if (hasIgpDevice) {
            serialize_size += igpDevice.rawValue.computeEnumSize(fieldNumber: 9)
        }
        if hasIgpDeviceName {
            serialize_size += igpDeviceName.computeStringSize(fieldNumber: 10)
        }
        if (hasIgpLanguage) {
            serialize_size += igpLanguage.rawValue.computeEnumSize(fieldNumber: 11)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserLogin.Builder {
        return IGPUserLogin.classBuilder() as! IGPUserLogin.Builder
    }
    public func getBuilder() -> IGPUserLogin.Builder {
        return classBuilder() as! IGPUserLogin.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserLogin.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserLogin.Builder()
    }
    public func toBuilder() throws -> IGPUserLogin.Builder {
        return try IGPUserLogin.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserLogin) throws -> IGPUserLogin.Builder {
        return try IGPUserLogin.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpToken {
            jsonMap["IGPToken"] = igpToken
        }
        if hasIgpAppName {
            jsonMap["IGPAppName"] = igpAppName
        }
        if hasIgpAppId {
            jsonMap["IGPAppId"] = Int(igpAppId)
        }
        if hasIgpAppBuildVersion {
            jsonMap["IGPAppBuildVersion"] = Int(igpAppBuildVersion)
        }
        if hasIgpAppVersion {
            jsonMap["IGPAppVersion"] = igpAppVersion
        }
        if hasIgpPlatform {
            jsonMap["IGPPlatform"] = igpPlatform.toString()
        }
        if hasIgpPlatformVersion {
            jsonMap["IGPPlatformVersion"] = igpPlatformVersion
        }
        if hasIgpDevice {
            jsonMap["IGPDevice"] = igpDevice.toString()
        }
        if hasIgpDeviceName {
            jsonMap["IGPDeviceName"] = igpDeviceName
        }
        if hasIgpLanguage {
            jsonMap["IGPLanguage"] = igpLanguage.toString()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpToken {
            output += "\(indent) igpToken: \(igpToken) \n"
        }
        if hasIgpAppName {
            output += "\(indent) igpAppName: \(igpAppName) \n"
        }
        if hasIgpAppId {
            output += "\(indent) igpAppId: \(igpAppId) \n"
        }
        if hasIgpAppBuildVersion {
            output += "\(indent) igpAppBuildVersion: \(igpAppBuildVersion) \n"
        }
        if hasIgpAppVersion {
            output += "\(indent) igpAppVersion: \(igpAppVersion) \n"
        }
        if (hasIgpPlatform) {
            output += "\(indent) igpPlatform: \(igpPlatform.description)\n"
        }
        if hasIgpPlatformVersion {
            output += "\(indent) igpPlatformVersion: \(igpPlatformVersion) \n"
        }
        if (hasIgpDevice) {
            output += "\(indent) igpDevice: \(igpDevice.description)\n"
        }
        if hasIgpDeviceName {
            output += "\(indent) igpDeviceName: \(igpDeviceName) \n"
        }
        if (hasIgpLanguage) {
            output += "\(indent) igpLanguage: \(igpLanguage.description)\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpToken {
                hashCode = (hashCode &* 31) &+ igpToken.hashValue
            }
            if hasIgpAppName {
                hashCode = (hashCode &* 31) &+ igpAppName.hashValue
            }
            if hasIgpAppId {
                hashCode = (hashCode &* 31) &+ igpAppId.hashValue
            }
            if hasIgpAppBuildVersion {
                hashCode = (hashCode &* 31) &+ igpAppBuildVersion.hashValue
            }
            if hasIgpAppVersion {
                hashCode = (hashCode &* 31) &+ igpAppVersion.hashValue
            }
            if hasIgpPlatform {
                 hashCode = (hashCode &* 31) &+ igpPlatform.hashValue
            }
            if hasIgpPlatformVersion {
                hashCode = (hashCode &* 31) &+ igpPlatformVersion.hashValue
            }
            if hasIgpDevice {
                 hashCode = (hashCode &* 31) &+ igpDevice.hashValue
            }
            if hasIgpDeviceName {
                hashCode = (hashCode &* 31) &+ igpDeviceName.hashValue
            }
            if hasIgpLanguage {
                 hashCode = (hashCode &* 31) &+ igpLanguage.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserLogin"
    }
    override public func className() -> String {
        return "IGPUserLogin"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPUserLogin = IGPUserLogin()
        public func getMessage() -> IGPUserLogin {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPUserLogin.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPUserLogin.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPUserLogin.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpToken:String {
            get {
                return builderResult.igpToken
            }
            set (value) {
                builderResult.hasIgpToken = true
                builderResult.igpToken = value
            }
        }
        public var hasIgpToken:Bool {
            get {
                return builderResult.hasIgpToken
            }
        }
        @discardableResult
        public func setIgpToken(_ value:String) -> IGPUserLogin.Builder {
            self.igpToken = value
            return self
        }
        @discardableResult
        public func clearIgpToken() -> IGPUserLogin.Builder{
            builderResult.hasIgpToken = false
            builderResult.igpToken = nil
            return self
        }
        public var igpAppName:String {
            get {
                return builderResult.igpAppName
            }
            set (value) {
                builderResult.hasIgpAppName = true
                builderResult.igpAppName = value
            }
        }
        public var hasIgpAppName:Bool {
            get {
                return builderResult.hasIgpAppName
            }
        }
        @discardableResult
        public func setIgpAppName(_ value:String) -> IGPUserLogin.Builder {
            self.igpAppName = value
            return self
        }
        @discardableResult
        public func clearIgpAppName() -> IGPUserLogin.Builder{
            builderResult.hasIgpAppName = false
            builderResult.igpAppName = nil
            return self
        }
        public var igpAppId:Int32 {
            get {
                return builderResult.igpAppId
            }
            set (value) {
                builderResult.hasIgpAppId = true
                builderResult.igpAppId = value
            }
        }
        public var hasIgpAppId:Bool {
            get {
                return builderResult.hasIgpAppId
            }
        }
        @discardableResult
        public func setIgpAppId(_ value:Int32) -> IGPUserLogin.Builder {
            self.igpAppId = value
            return self
        }
        @discardableResult
        public func clearIgpAppId() -> IGPUserLogin.Builder{
            builderResult.hasIgpAppId = false
            builderResult.igpAppId = nil
            return self
        }
        public var igpAppBuildVersion:Int32 {
            get {
                return builderResult.igpAppBuildVersion
            }
            set (value) {
                builderResult.hasIgpAppBuildVersion = true
                builderResult.igpAppBuildVersion = value
            }
        }
        public var hasIgpAppBuildVersion:Bool {
            get {
                return builderResult.hasIgpAppBuildVersion
            }
        }
        @discardableResult
        public func setIgpAppBuildVersion(_ value:Int32) -> IGPUserLogin.Builder {
            self.igpAppBuildVersion = value
            return self
        }
        @discardableResult
        public func clearIgpAppBuildVersion() -> IGPUserLogin.Builder{
            builderResult.hasIgpAppBuildVersion = false
            builderResult.igpAppBuildVersion = nil
            return self
        }
        public var igpAppVersion:String {
            get {
                return builderResult.igpAppVersion
            }
            set (value) {
                builderResult.hasIgpAppVersion = true
                builderResult.igpAppVersion = value
            }
        }
        public var hasIgpAppVersion:Bool {
            get {
                return builderResult.hasIgpAppVersion
            }
        }
        @discardableResult
        public func setIgpAppVersion(_ value:String) -> IGPUserLogin.Builder {
            self.igpAppVersion = value
            return self
        }
        @discardableResult
        public func clearIgpAppVersion() -> IGPUserLogin.Builder{
            builderResult.hasIgpAppVersion = false
            builderResult.igpAppVersion = nil
            return self
        }
            public var igpPlatform:IGPPlatform {
                get {
                    return builderResult.igpPlatform
                }
                set (value) {
                    builderResult.hasIgpPlatform = true
                    builderResult.igpPlatform = value
                }
            }
            public var hasIgpPlatform:Bool{
                get {
                    return builderResult.hasIgpPlatform
                }
            }
        @discardableResult
            public func setIgpPlatform(_ value:IGPPlatform) -> IGPUserLogin.Builder {
              self.igpPlatform = value
              return self
            }
        @discardableResult
            public func clearIgpPlatform() -> IGPUserLogin.Builder {
               builderResult.hasIgpPlatform = false
               builderResult.igpPlatform = .unknownPlatform
               return self
            }
        public var igpPlatformVersion:String {
            get {
                return builderResult.igpPlatformVersion
            }
            set (value) {
                builderResult.hasIgpPlatformVersion = true
                builderResult.igpPlatformVersion = value
            }
        }
        public var hasIgpPlatformVersion:Bool {
            get {
                return builderResult.hasIgpPlatformVersion
            }
        }
        @discardableResult
        public func setIgpPlatformVersion(_ value:String) -> IGPUserLogin.Builder {
            self.igpPlatformVersion = value
            return self
        }
        @discardableResult
        public func clearIgpPlatformVersion() -> IGPUserLogin.Builder{
            builderResult.hasIgpPlatformVersion = false
            builderResult.igpPlatformVersion = nil
            return self
        }
            public var igpDevice:IGPDevice {
                get {
                    return builderResult.igpDevice
                }
                set (value) {
                    builderResult.hasIgpDevice = true
                    builderResult.igpDevice = value
                }
            }
            public var hasIgpDevice:Bool{
                get {
                    return builderResult.hasIgpDevice
                }
            }
        @discardableResult
            public func setIgpDevice(_ value:IGPDevice) -> IGPUserLogin.Builder {
              self.igpDevice = value
              return self
            }
        @discardableResult
            public func clearIgpDevice() -> IGPUserLogin.Builder {
               builderResult.hasIgpDevice = false
               builderResult.igpDevice = .unknownDevice
               return self
            }
        public var igpDeviceName:String {
            get {
                return builderResult.igpDeviceName
            }
            set (value) {
                builderResult.hasIgpDeviceName = true
                builderResult.igpDeviceName = value
            }
        }
        public var hasIgpDeviceName:Bool {
            get {
                return builderResult.hasIgpDeviceName
            }
        }
        @discardableResult
        public func setIgpDeviceName(_ value:String) -> IGPUserLogin.Builder {
            self.igpDeviceName = value
            return self
        }
        @discardableResult
        public func clearIgpDeviceName() -> IGPUserLogin.Builder{
            builderResult.hasIgpDeviceName = false
            builderResult.igpDeviceName = nil
            return self
        }
            public var igpLanguage:IGPLanguage {
                get {
                    return builderResult.igpLanguage
                }
                set (value) {
                    builderResult.hasIgpLanguage = true
                    builderResult.igpLanguage = value
                }
            }
            public var hasIgpLanguage:Bool{
                get {
                    return builderResult.hasIgpLanguage
                }
            }
        @discardableResult
            public func setIgpLanguage(_ value:IGPLanguage) -> IGPUserLogin.Builder {
              self.igpLanguage = value
              return self
            }
        @discardableResult
            public func clearIgpLanguage() -> IGPUserLogin.Builder {
               builderResult.hasIgpLanguage = false
               builderResult.igpLanguage = .enUs
               return self
            }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserLogin.Builder {
            builderResult = IGPUserLogin()
            return self
        }
        override public func clone() throws -> IGPUserLogin.Builder {
            return try IGPUserLogin.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserLogin {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserLogin {
            let returnMe:IGPUserLogin = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserLogin) throws -> IGPUserLogin.Builder {
            if other == IGPUserLogin() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpToken {
                igpToken = other.igpToken
            }
            if other.hasIgpAppName {
                igpAppName = other.igpAppName
            }
            if other.hasIgpAppId {
                igpAppId = other.igpAppId
            }
            if other.hasIgpAppBuildVersion {
                igpAppBuildVersion = other.igpAppBuildVersion
            }
            if other.hasIgpAppVersion {
                igpAppVersion = other.igpAppVersion
            }
            if other.hasIgpPlatform {
                igpPlatform = other.igpPlatform
            }
            if other.hasIgpPlatformVersion {
                igpPlatformVersion = other.igpPlatformVersion
            }
            if other.hasIgpDevice {
                igpDevice = other.igpDevice
            }
            if other.hasIgpDeviceName {
                igpDeviceName = other.igpDeviceName
            }
            if other.hasIgpLanguage {
                igpLanguage = other.igpLanguage
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserLogin.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserLogin.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    igpToken = try codedInputStream.readString()

                case 26:
                    igpAppName = try codedInputStream.readString()

                case 32:
                    igpAppId = try codedInputStream.readInt32()

                case 40:
                    igpAppBuildVersion = try codedInputStream.readInt32()

                case 50:
                    igpAppVersion = try codedInputStream.readString()

                case 56:
                    let valueIntigpPlatform = try codedInputStream.readEnum()
                    if let enumsigpPlatform = IGPPlatform(rawValue:valueIntigpPlatform){
                        igpPlatform = enumsigpPlatform
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 7, value:Int64(valueIntigpPlatform))
                    }

                case 66:
                    igpPlatformVersion = try codedInputStream.readString()

                case 72:
                    let valueIntigpDevice = try codedInputStream.readEnum()
                    if let enumsigpDevice = IGPDevice(rawValue:valueIntigpDevice){
                        igpDevice = enumsigpDevice
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 9, value:Int64(valueIntigpDevice))
                    }

                case 82:
                    igpDeviceName = try codedInputStream.readString()

                case 88:
                    let valueIntigpLanguage = try codedInputStream.readEnum()
                    if let enumsigpLanguage = IGPLanguage(rawValue:valueIntigpLanguage){
                        igpLanguage = enumsigpLanguage
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 11, value:Int64(valueIntigpLanguage))
                    }

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserLogin.Builder {
            let resultDecodedBuilder = IGPUserLogin.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpToken = jsonMap["IGPToken"] as? String {
                resultDecodedBuilder.igpToken = jsonValueIgpToken
            }
            if let jsonValueIgpAppName = jsonMap["IGPAppName"] as? String {
                resultDecodedBuilder.igpAppName = jsonValueIgpAppName
            }
            if let jsonValueIgpAppId = jsonMap["IGPAppId"] as? Int {
                resultDecodedBuilder.igpAppId = Int32(jsonValueIgpAppId)
            } else if let jsonValueIgpAppId = jsonMap["IGPAppId"] as? String {
                resultDecodedBuilder.igpAppId = Int32(jsonValueIgpAppId)!
            }
            if let jsonValueIgpAppBuildVersion = jsonMap["IGPAppBuildVersion"] as? Int {
                resultDecodedBuilder.igpAppBuildVersion = Int32(jsonValueIgpAppBuildVersion)
            } else if let jsonValueIgpAppBuildVersion = jsonMap["IGPAppBuildVersion"] as? String {
                resultDecodedBuilder.igpAppBuildVersion = Int32(jsonValueIgpAppBuildVersion)!
            }
            if let jsonValueIgpAppVersion = jsonMap["IGPAppVersion"] as? String {
                resultDecodedBuilder.igpAppVersion = jsonValueIgpAppVersion
            }
            if let jsonValueIgpPlatform = jsonMap["IGPPlatform"] as? String {
                resultDecodedBuilder.igpPlatform = try IGPPlatform.fromString(jsonValueIgpPlatform)
            }
            if let jsonValueIgpPlatformVersion = jsonMap["IGPPlatformVersion"] as? String {
                resultDecodedBuilder.igpPlatformVersion = jsonValueIgpPlatformVersion
            }
            if let jsonValueIgpDevice = jsonMap["IGPDevice"] as? String {
                resultDecodedBuilder.igpDevice = try IGPDevice.fromString(jsonValueIgpDevice)
            }
            if let jsonValueIgpDeviceName = jsonMap["IGPDeviceName"] as? String {
                resultDecodedBuilder.igpDeviceName = jsonValueIgpDeviceName
            }
            if let jsonValueIgpLanguage = jsonMap["IGPLanguage"] as? String {
                resultDecodedBuilder.igpLanguage = try IGPLanguage.fromString(jsonValueIgpLanguage)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserLogin.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserLogin.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPUserLoginResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPUserLoginResponse.Builder

    public static func == (lhs: IGPUserLoginResponse, rhs: IGPUserLoginResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpDeprecatedClient == rhs.hasIgpDeprecatedClient) && (!lhs.hasIgpDeprecatedClient || lhs.igpDeprecatedClient == rhs.igpDeprecatedClient)
        fieldCheck = fieldCheck && (lhs.hasIgpSecondaryNodeName == rhs.hasIgpSecondaryNodeName) && (!lhs.hasIgpSecondaryNodeName || lhs.igpSecondaryNodeName == rhs.igpSecondaryNodeName)
        fieldCheck = fieldCheck && (lhs.hasIgpUpdateAvailable == rhs.hasIgpUpdateAvailable) && (!lhs.hasIgpUpdateAvailable || lhs.igpUpdateAvailable == rhs.igpUpdateAvailable)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpDeprecatedClient:Bool! = nil
    public fileprivate(set) var hasIgpDeprecatedClient:Bool = false

    public fileprivate(set) var igpSecondaryNodeName:String! = nil
    public fileprivate(set) var hasIgpSecondaryNodeName:Bool = false

    public fileprivate(set) var igpUpdateAvailable:Bool! = nil
    public fileprivate(set) var hasIgpUpdateAvailable:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpDeprecatedClient {
            try codedOutputStream.writeBool(fieldNumber: 2, value:igpDeprecatedClient)
        }
        if hasIgpSecondaryNodeName {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpSecondaryNodeName)
        }
        if hasIgpUpdateAvailable {
            try codedOutputStream.writeBool(fieldNumber: 4, value:igpUpdateAvailable)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpDeprecatedClient {
            serialize_size += igpDeprecatedClient.computeBoolSize(fieldNumber: 2)
        }
        if hasIgpSecondaryNodeName {
            serialize_size += igpSecondaryNodeName.computeStringSize(fieldNumber: 3)
        }
        if hasIgpUpdateAvailable {
            serialize_size += igpUpdateAvailable.computeBoolSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserLoginResponse.Builder {
        return IGPUserLoginResponse.classBuilder() as! IGPUserLoginResponse.Builder
    }
    public func getBuilder() -> IGPUserLoginResponse.Builder {
        return classBuilder() as! IGPUserLoginResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserLoginResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserLoginResponse.Builder()
    }
    public func toBuilder() throws -> IGPUserLoginResponse.Builder {
        return try IGPUserLoginResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserLoginResponse) throws -> IGPUserLoginResponse.Builder {
        return try IGPUserLoginResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpDeprecatedClient {
            jsonMap["IGPDeprecatedClient"] = igpDeprecatedClient
        }
        if hasIgpSecondaryNodeName {
            jsonMap["IGPSecondaryNodeName"] = igpSecondaryNodeName
        }
        if hasIgpUpdateAvailable {
            jsonMap["IGPUpdateAvailable"] = igpUpdateAvailable
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpDeprecatedClient {
            output += "\(indent) igpDeprecatedClient: \(igpDeprecatedClient) \n"
        }
        if hasIgpSecondaryNodeName {
            output += "\(indent) igpSecondaryNodeName: \(igpSecondaryNodeName) \n"
        }
        if hasIgpUpdateAvailable {
            output += "\(indent) igpUpdateAvailable: \(igpUpdateAvailable) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpDeprecatedClient {
                hashCode = (hashCode &* 31) &+ igpDeprecatedClient.hashValue
            }
            if hasIgpSecondaryNodeName {
                hashCode = (hashCode &* 31) &+ igpSecondaryNodeName.hashValue
            }
            if hasIgpUpdateAvailable {
                hashCode = (hashCode &* 31) &+ igpUpdateAvailable.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserLoginResponse"
    }
    override public func className() -> String {
        return "IGPUserLoginResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPUserLoginResponse = IGPUserLoginResponse()
        public func getMessage() -> IGPUserLoginResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPUserLoginResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPUserLoginResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPUserLoginResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpDeprecatedClient:Bool {
            get {
                return builderResult.igpDeprecatedClient
            }
            set (value) {
                builderResult.hasIgpDeprecatedClient = true
                builderResult.igpDeprecatedClient = value
            }
        }
        public var hasIgpDeprecatedClient:Bool {
            get {
                return builderResult.hasIgpDeprecatedClient
            }
        }
        @discardableResult
        public func setIgpDeprecatedClient(_ value:Bool) -> IGPUserLoginResponse.Builder {
            self.igpDeprecatedClient = value
            return self
        }
        @discardableResult
        public func clearIgpDeprecatedClient() -> IGPUserLoginResponse.Builder{
            builderResult.hasIgpDeprecatedClient = false
            builderResult.igpDeprecatedClient = nil
            return self
        }
        public var igpSecondaryNodeName:String {
            get {
                return builderResult.igpSecondaryNodeName
            }
            set (value) {
                builderResult.hasIgpSecondaryNodeName = true
                builderResult.igpSecondaryNodeName = value
            }
        }
        public var hasIgpSecondaryNodeName:Bool {
            get {
                return builderResult.hasIgpSecondaryNodeName
            }
        }
        @discardableResult
        public func setIgpSecondaryNodeName(_ value:String) -> IGPUserLoginResponse.Builder {
            self.igpSecondaryNodeName = value
            return self
        }
        @discardableResult
        public func clearIgpSecondaryNodeName() -> IGPUserLoginResponse.Builder{
            builderResult.hasIgpSecondaryNodeName = false
            builderResult.igpSecondaryNodeName = nil
            return self
        }
        public var igpUpdateAvailable:Bool {
            get {
                return builderResult.igpUpdateAvailable
            }
            set (value) {
                builderResult.hasIgpUpdateAvailable = true
                builderResult.igpUpdateAvailable = value
            }
        }
        public var hasIgpUpdateAvailable:Bool {
            get {
                return builderResult.hasIgpUpdateAvailable
            }
        }
        @discardableResult
        public func setIgpUpdateAvailable(_ value:Bool) -> IGPUserLoginResponse.Builder {
            self.igpUpdateAvailable = value
            return self
        }
        @discardableResult
        public func clearIgpUpdateAvailable() -> IGPUserLoginResponse.Builder{
            builderResult.hasIgpUpdateAvailable = false
            builderResult.igpUpdateAvailable = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserLoginResponse.Builder {
            builderResult = IGPUserLoginResponse()
            return self
        }
        override public func clone() throws -> IGPUserLoginResponse.Builder {
            return try IGPUserLoginResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserLoginResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserLoginResponse {
            let returnMe:IGPUserLoginResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserLoginResponse) throws -> IGPUserLoginResponse.Builder {
            if other == IGPUserLoginResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpDeprecatedClient {
                igpDeprecatedClient = other.igpDeprecatedClient
            }
            if other.hasIgpSecondaryNodeName {
                igpSecondaryNodeName = other.igpSecondaryNodeName
            }
            if other.hasIgpUpdateAvailable {
                igpUpdateAvailable = other.igpUpdateAvailable
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserLoginResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserLoginResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpDeprecatedClient = try codedInputStream.readBool()

                case 26:
                    igpSecondaryNodeName = try codedInputStream.readString()

                case 32:
                    igpUpdateAvailable = try codedInputStream.readBool()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserLoginResponse.Builder {
            let resultDecodedBuilder = IGPUserLoginResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpDeprecatedClient = jsonMap["IGPDeprecatedClient"] as? Bool {
                resultDecodedBuilder.igpDeprecatedClient = jsonValueIgpDeprecatedClient
            }
            if let jsonValueIgpSecondaryNodeName = jsonMap["IGPSecondaryNodeName"] as? String {
                resultDecodedBuilder.igpSecondaryNodeName = jsonValueIgpSecondaryNodeName
            }
            if let jsonValueIgpUpdateAvailable = jsonMap["IGPUpdateAvailable"] as? Bool {
                resultDecodedBuilder.igpUpdateAvailable = jsonValueIgpUpdateAvailable
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserLoginResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserLoginResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPUserLogin: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserLogin> {
        var mergedArray = Array<IGPUserLogin>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserLogin? {
        return try IGPUserLogin.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder().mergeFrom(data: data, extensionRegistry:UserLoginRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserLogin {
        return try IGPUserLogin.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpToken": return self.igpToken
        case "igpAppName": return self.igpAppName
        case "igpAppId": return self.igpAppId
        case "igpAppBuildVersion": return self.igpAppBuildVersion
        case "igpAppVersion": return self.igpAppVersion
        case "igpPlatform": return self.igpPlatform
        case "igpPlatformVersion": return self.igpPlatformVersion
        case "igpDevice": return self.igpDevice
        case "igpDeviceName": return self.igpDeviceName
        case "igpLanguage": return self.igpLanguage
        default: return nil
        }
    }
}
extension IGPUserLogin.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserLogin
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpToken": return self.igpToken
            case "igpAppName": return self.igpAppName
            case "igpAppId": return self.igpAppId
            case "igpAppBuildVersion": return self.igpAppBuildVersion
            case "igpAppVersion": return self.igpAppVersion
            case "igpPlatform": return self.igpPlatform
            case "igpPlatformVersion": return self.igpPlatformVersion
            case "igpDevice": return self.igpDevice
            case "igpDeviceName": return self.igpDeviceName
            case "igpLanguage": return self.igpLanguage
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpToken = newSubscriptValue
            case "igpAppName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAppName = newSubscriptValue
            case "igpAppId":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAppId = newSubscriptValue
            case "igpAppBuildVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAppBuildVersion = newSubscriptValue
            case "igpAppVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAppVersion = newSubscriptValue
            case "igpPlatform":
                guard let newSubscriptValue = newSubscriptValue as? IGPPlatform else {
                    return
                }
                self.igpPlatform = newSubscriptValue
            case "igpPlatformVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPlatformVersion = newSubscriptValue
            case "igpDevice":
                guard let newSubscriptValue = newSubscriptValue as? IGPDevice else {
                    return
                }
                self.igpDevice = newSubscriptValue
            case "igpDeviceName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpDeviceName = newSubscriptValue
            case "igpLanguage":
                guard let newSubscriptValue = newSubscriptValue as? IGPLanguage else {
                    return
                }
                self.igpLanguage = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserLoginResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserLoginResponse> {
        var mergedArray = Array<IGPUserLoginResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserLoginResponse? {
        return try IGPUserLoginResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder().mergeFrom(data: data, extensionRegistry:UserLoginRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserLoginResponse {
        return try IGPUserLoginResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpDeprecatedClient": return self.igpDeprecatedClient
        case "igpSecondaryNodeName": return self.igpSecondaryNodeName
        case "igpUpdateAvailable": return self.igpUpdateAvailable
        default: return nil
        }
    }
}
extension IGPUserLoginResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserLoginResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpDeprecatedClient": return self.igpDeprecatedClient
            case "igpSecondaryNodeName": return self.igpSecondaryNodeName
            case "igpUpdateAvailable": return self.igpUpdateAvailable
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpDeprecatedClient":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpDeprecatedClient = newSubscriptValue
            case "igpSecondaryNodeName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpSecondaryNodeName = newSubscriptValue
            case "igpUpdateAvailable":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpUpdateAvailable = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
