/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "Global.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct GlobalRoot {
    public static let `default` = GlobalRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}



//Enum type declaration start 

public enum IGPGender:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case unknown = 0
    case male = 1
    case female = 2
    public func toString() -> String {
        switch self {
        case .unknown: return "UNKNOWN"
        case .male: return "MALE"
        case .female: return "FEMALE"
        }
    }
    public static func fromString(str:String) throws -> IGPGender {
        switch str {
        case "UNKNOWN":    return .unknown
        case "MALE":    return .male
        case "FEMALE":    return .female
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .unknown: return ".unknown"
        case .male: return ".male"
        case .female: return ".female"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPGender, rhs:IGPGender) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPDevice:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case unknownDevice = 0
    case pc = 1
    case tablet = 2
    case mobile = 3
    public func toString() -> String {
        switch self {
        case .unknownDevice: return "UNKNOWN_DEVICE"
        case .pc: return "PC"
        case .tablet: return "TABLET"
        case .mobile: return "MOBILE"
        }
    }
    public static func fromString(str:String) throws -> IGPDevice {
        switch str {
        case "UNKNOWN_DEVICE":    return .unknownDevice
        case "PC":    return .pc
        case "TABLET":    return .tablet
        case "MOBILE":    return .mobile
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .unknownDevice: return ".unknownDevice"
        case .pc: return ".pc"
        case .tablet: return ".tablet"
        case .mobile: return ".mobile"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPDevice, rhs:IGPDevice) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPPlatform:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case unknownPlatform = 0
    case android = 1
    case ios = 2
    case macOs = 3
    case windows = 4
    case linux = 5
    case blackBerry = 6
    public func toString() -> String {
        switch self {
        case .unknownPlatform: return "UNKNOWN_PLATFORM"
        case .android: return "ANDROID"
        case .ios: return "IOS"
        case .macOs: return "MAC_OS"
        case .windows: return "WINDOWS"
        case .linux: return "LINUX"
        case .blackBerry: return "BLACK_BERRY"
        }
    }
    public static func fromString(str:String) throws -> IGPPlatform {
        switch str {
        case "UNKNOWN_PLATFORM":    return .unknownPlatform
        case "ANDROID":    return .android
        case "IOS":    return .ios
        case "MAC_OS":    return .macOs
        case "WINDOWS":    return .windows
        case "LINUX":    return .linux
        case "BLACK_BERRY":    return .blackBerry
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .unknownPlatform: return ".unknownPlatform"
        case .android: return ".android"
        case .ios: return ".ios"
        case .macOs: return ".macOs"
        case .windows: return ".windows"
        case .linux: return ".linux"
        case .blackBerry: return ".blackBerry"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPPlatform, rhs:IGPPlatform) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPLanguage:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case enUs = 0
    case faIr = 1
    public func toString() -> String {
        switch self {
        case .enUs: return "EN_US"
        case .faIr: return "FA_IR"
        }
    }
    public static func fromString(str:String) throws -> IGPLanguage {
        switch str {
        case "EN_US":    return .enUs
        case "FA_IR":    return .faIr
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .enUs: return ".enUs"
        case .faIr: return ".faIr"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPLanguage, rhs:IGPLanguage) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPRoomMessageType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case text = 0
    case image = 1
    case imageText = 2
    case video = 3
    case videoText = 4
    case audio = 5
    case audioText = 6
    case voice = 7
    case gif = 8
    case gifText = 14
    case file = 9
    case fileText = 10
    case location = 11
    case log = 12
    case contact = 13
    public func toString() -> String {
        switch self {
        case .text: return "TEXT"
        case .image: return "IMAGE"
        case .imageText: return "IMAGE_TEXT"
        case .video: return "VIDEO"
        case .videoText: return "VIDEO_TEXT"
        case .audio: return "AUDIO"
        case .audioText: return "AUDIO_TEXT"
        case .voice: return "VOICE"
        case .gif: return "GIF"
        case .gifText: return "GIF_TEXT"
        case .file: return "FILE"
        case .fileText: return "FILE_TEXT"
        case .location: return "LOCATION"
        case .log: return "LOG"
        case .contact: return "CONTACT"
        }
    }
    public static func fromString(str:String) throws -> IGPRoomMessageType {
        switch str {
        case "TEXT":    return .text
        case "IMAGE":    return .image
        case "IMAGE_TEXT":    return .imageText
        case "VIDEO":    return .video
        case "VIDEO_TEXT":    return .videoText
        case "AUDIO":    return .audio
        case "AUDIO_TEXT":    return .audioText
        case "VOICE":    return .voice
        case "GIF":    return .gif
        case "GIF_TEXT":    return .gifText
        case "FILE":    return .file
        case "FILE_TEXT":    return .fileText
        case "LOCATION":    return .location
        case "LOG":    return .log
        case "CONTACT":    return .contact
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .text: return ".text"
        case .image: return ".image"
        case .imageText: return ".imageText"
        case .video: return ".video"
        case .videoText: return ".videoText"
        case .audio: return ".audio"
        case .audioText: return ".audioText"
        case .voice: return ".voice"
        case .gif: return ".gif"
        case .gifText: return ".gifText"
        case .file: return ".file"
        case .fileText: return ".fileText"
        case .location: return ".location"
        case .log: return ".log"
        case .contact: return ".contact"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPRoomMessageType, rhs:IGPRoomMessageType) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPRoomMessageStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case failed = 0
    case sending = 1
    case sent = 2
    case delivered = 3
    case seen = 4
    public func toString() -> String {
        switch self {
        case .failed: return "FAILED"
        case .sending: return "SENDING"
        case .sent: return "SENT"
        case .delivered: return "DELIVERED"
        case .seen: return "SEEN"
        }
    }
    public static func fromString(str:String) throws -> IGPRoomMessageStatus {
        switch str {
        case "FAILED":    return .failed
        case "SENDING":    return .sending
        case "SENT":    return .sent
        case "DELIVERED":    return .delivered
        case "SEEN":    return .seen
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .failed: return ".failed"
        case .sending: return ".sending"
        case .sent: return ".sent"
        case .delivered: return ".delivered"
        case .seen: return ".seen"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPRoomMessageStatus, rhs:IGPRoomMessageStatus) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPRoomMessageReaction:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case thumbsUp = 0
    case thumbsDown = 1
    public func toString() -> String {
        switch self {
        case .thumbsUp: return "THUMBS_UP"
        case .thumbsDown: return "THUMBS_DOWN"
        }
    }
    public static func fromString(str:String) throws -> IGPRoomMessageReaction {
        switch str {
        case "THUMBS_UP":    return .thumbsUp
        case "THUMBS_DOWN":    return .thumbsDown
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .thumbsUp: return ".thumbsUp"
        case .thumbsDown: return ".thumbsDown"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPRoomMessageReaction, rhs:IGPRoomMessageReaction) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPClientAction:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case cancel = 0
    case typing = 1
    case sendingImage = 2
    case capturingImage = 3
    case sendingVideo = 4
    case capturingVideo = 5
    case sendingAudio = 6
    case recordingVoice = 7
    case sendingVoice = 8
    case sendingDocument = 9
    case sendingGif = 10
    case sendingFile = 11
    case sendingLocation = 12
    case choosingContact = 13
    case painting = 14
    public func toString() -> String {
        switch self {
        case .cancel: return "CANCEL"
        case .typing: return "TYPING"
        case .sendingImage: return "SENDING_IMAGE"
        case .capturingImage: return "CAPTURING_IMAGE"
        case .sendingVideo: return "SENDING_VIDEO"
        case .capturingVideo: return "CAPTURING_VIDEO"
        case .sendingAudio: return "SENDING_AUDIO"
        case .recordingVoice: return "RECORDING_VOICE"
        case .sendingVoice: return "SENDING_VOICE"
        case .sendingDocument: return "SENDING_DOCUMENT"
        case .sendingGif: return "SENDING_GIF"
        case .sendingFile: return "SENDING_FILE"
        case .sendingLocation: return "SENDING_LOCATION"
        case .choosingContact: return "CHOOSING_CONTACT"
        case .painting: return "PAINTING"
        }
    }
    public static func fromString(str:String) throws -> IGPClientAction {
        switch str {
        case "CANCEL":    return .cancel
        case "TYPING":    return .typing
        case "SENDING_IMAGE":    return .sendingImage
        case "CAPTURING_IMAGE":    return .capturingImage
        case "SENDING_VIDEO":    return .sendingVideo
        case "CAPTURING_VIDEO":    return .capturingVideo
        case "SENDING_AUDIO":    return .sendingAudio
        case "RECORDING_VOICE":    return .recordingVoice
        case "SENDING_VOICE":    return .sendingVoice
        case "SENDING_DOCUMENT":    return .sendingDocument
        case "SENDING_GIF":    return .sendingGif
        case "SENDING_FILE":    return .sendingFile
        case "SENDING_LOCATION":    return .sendingLocation
        case "CHOOSING_CONTACT":    return .choosingContact
        case "PAINTING":    return .painting
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .cancel: return ".cancel"
        case .typing: return ".typing"
        case .sendingImage: return ".sendingImage"
        case .capturingImage: return ".capturingImage"
        case .sendingVideo: return ".sendingVideo"
        case .capturingVideo: return ".capturingVideo"
        case .sendingAudio: return ".sendingAudio"
        case .recordingVoice: return ".recordingVoice"
        case .sendingVoice: return ".sendingVoice"
        case .sendingDocument: return ".sendingDocument"
        case .sendingGif: return ".sendingGif"
        case .sendingFile: return ".sendingFile"
        case .sendingLocation: return ".sendingLocation"
        case .choosingContact: return ".choosingContact"
        case .painting: return ".painting"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPClientAction, rhs:IGPClientAction) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPPrivacyType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case userStatus = 0
    case avatar = 1
    case groupInvite = 2
    case channelInvite = 3
    public func toString() -> String {
        switch self {
        case .userStatus: return "USER_STATUS"
        case .avatar: return "AVATAR"
        case .groupInvite: return "GROUP_INVITE"
        case .channelInvite: return "CHANNEL_INVITE"
        }
    }
    public static func fromString(str:String) throws -> IGPPrivacyType {
        switch str {
        case "USER_STATUS":    return .userStatus
        case "AVATAR":    return .avatar
        case "GROUP_INVITE":    return .groupInvite
        case "CHANNEL_INVITE":    return .channelInvite
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .userStatus: return ".userStatus"
        case .avatar: return ".avatar"
        case .groupInvite: return ".groupInvite"
        case .channelInvite: return ".channelInvite"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPPrivacyType, rhs:IGPPrivacyType) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 



//Enum type declaration start 

public enum IGPPrivacyLevel:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
    case allowAll = 0
    case denyAll = 1
    case allowContacts = 2
    public func toString() -> String {
        switch self {
        case .allowAll: return "ALLOW_ALL"
        case .denyAll: return "DENY_ALL"
        case .allowContacts: return "ALLOW_CONTACTS"
        }
    }
    public static func fromString(str:String) throws -> IGPPrivacyLevel {
        switch str {
        case "ALLOW_ALL":    return .allowAll
        case "DENY_ALL":    return .denyAll
        case "ALLOW_CONTACTS":    return .allowContacts
        default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
        }
    }
    public var debugDescription:String { return getDescription() }
    public var description:String { return getDescription() }
    private func getDescription() -> String { 
        switch self {
        case .allowAll: return ".allowAll"
        case .denyAll: return ".denyAll"
        case .allowContacts: return ".allowContacts"
        }
    }
    public var hashValue:Int {
        return self.rawValue.hashValue
    }
    public static func ==(lhs:IGPPrivacyLevel, rhs:IGPPrivacyLevel) -> Bool {
        return lhs.hashValue == rhs.hashValue
    }
}

//Enum type declaration end 

final public class IGPRoomMessageLocation : GeneratedMessage {

    public static func == (lhs: IGPRoomMessageLocation, rhs: IGPRoomMessageLocation) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpLat == rhs.hasIgpLat) && (!lhs.hasIgpLat || lhs.igpLat == rhs.igpLat)
        fieldCheck = fieldCheck && (lhs.hasIgpLon == rhs.hasIgpLon) && (!lhs.hasIgpLon || lhs.igpLon == rhs.igpLon)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpLat:Double = Double(0)
    public fileprivate(set) var hasIgpLat:Bool = false

    public fileprivate(set) var igpLon:Double = Double(0)
    public fileprivate(set) var hasIgpLon:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpLat {
            try codedOutputStream.writeDouble(fieldNumber: 1, value:igpLat)
        }
        if hasIgpLon {
            try codedOutputStream.writeDouble(fieldNumber: 2, value:igpLon)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpLat {
            serialize_size += igpLat.computeDoubleSize(fieldNumber: 1)
        }
        if hasIgpLon {
            serialize_size += igpLon.computeDoubleSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRoomMessageLocation.Builder {
        return IGPRoomMessageLocation.classBuilder() as! IGPRoomMessageLocation.Builder
    }
    public func getBuilder() -> IGPRoomMessageLocation.Builder {
        return classBuilder() as! IGPRoomMessageLocation.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageLocation.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageLocation.Builder()
    }
    public func toBuilder() throws -> IGPRoomMessageLocation.Builder {
        return try IGPRoomMessageLocation.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRoomMessageLocation) throws -> IGPRoomMessageLocation.Builder {
        return try IGPRoomMessageLocation.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpLat {
            jsonMap["IGPLat"] = Double(igpLat)
        }
        if hasIgpLon {
            jsonMap["IGPLon"] = Double(igpLon)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpLat {
            output += "\(indent) igpLat: \(igpLat) \n"
        }
        if hasIgpLon {
            output += "\(indent) igpLon: \(igpLon) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpLat {
                hashCode = (hashCode &* 31) &+ igpLat.hashValue
            }
            if hasIgpLon {
                hashCode = (hashCode &* 31) &+ igpLon.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRoomMessageLocation"
    }
    override public func className() -> String {
        return "IGPRoomMessageLocation"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRoomMessageLocation = IGPRoomMessageLocation()
        public func getMessage() -> IGPRoomMessageLocation {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpLat:Double {
            get {
                return builderResult.igpLat
            }
            set (value) {
                builderResult.hasIgpLat = true
                builderResult.igpLat = value
            }
        }
        public var hasIgpLat:Bool {
            get {
                return builderResult.hasIgpLat
            }
        }
        @discardableResult
        public func setIgpLat(_ value:Double) -> IGPRoomMessageLocation.Builder {
            self.igpLat = value
            return self
        }
        @discardableResult
        public func clearIgpLat() -> IGPRoomMessageLocation.Builder{
            builderResult.hasIgpLat = false
            builderResult.igpLat = Double(0)
            return self
        }
        public var igpLon:Double {
            get {
                return builderResult.igpLon
            }
            set (value) {
                builderResult.hasIgpLon = true
                builderResult.igpLon = value
            }
        }
        public var hasIgpLon:Bool {
            get {
                return builderResult.hasIgpLon
            }
        }
        @discardableResult
        public func setIgpLon(_ value:Double) -> IGPRoomMessageLocation.Builder {
            self.igpLon = value
            return self
        }
        @discardableResult
        public func clearIgpLon() -> IGPRoomMessageLocation.Builder{
            builderResult.hasIgpLon = false
            builderResult.igpLon = Double(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRoomMessageLocation.Builder {
            builderResult = IGPRoomMessageLocation()
            return self
        }
        override public func clone() throws -> IGPRoomMessageLocation.Builder {
            return try IGPRoomMessageLocation.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRoomMessageLocation {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRoomMessageLocation {
            let returnMe:IGPRoomMessageLocation = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRoomMessageLocation) throws -> IGPRoomMessageLocation.Builder {
            if other == IGPRoomMessageLocation() {
                return self
            }
            if other.hasIgpLat {
                igpLat = other.igpLat
            }
            if other.hasIgpLon {
                igpLon = other.igpLon
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageLocation.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLocation.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 9:
                    igpLat = try codedInputStream.readDouble()

                case 17:
                    igpLon = try codedInputStream.readDouble()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageLocation.Builder {
            let resultDecodedBuilder = IGPRoomMessageLocation.Builder()
            if let jsonValueIgpLat = jsonMap["IGPLat"] as? Double {
                resultDecodedBuilder.igpLat = Double(jsonValueIgpLat)
            } else if let jsonValueIgpLat = jsonMap["IGPLat"] as? String {
                resultDecodedBuilder.igpLat = Double(jsonValueIgpLat)!
            }
            if let jsonValueIgpLon = jsonMap["IGPLon"] as? Double {
                resultDecodedBuilder.igpLon = Double(jsonValueIgpLon)
            } else if let jsonValueIgpLon = jsonMap["IGPLon"] as? String {
                resultDecodedBuilder.igpLon = Double(jsonValueIgpLon)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessageLocation.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRoomMessageLocation.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPRoomMessageLog : GeneratedMessage {

    public static func == (lhs: IGPRoomMessageLog, rhs: IGPRoomMessageLog) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
        fieldCheck = fieldCheck && (lhs.hasIgpExtraType == rhs.hasIgpExtraType) && (!lhs.hasIgpExtraType || lhs.igpExtraType == rhs.igpExtraType)
        fieldCheck = fieldCheck && (lhs.hasIgpTargetUser == rhs.hasIgpTargetUser) && (!lhs.hasIgpTargetUser || lhs.igpTargetUser == rhs.igpTargetUser)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPTargetUser : GeneratedMessage {

        public static func == (lhs: IGPRoomMessageLog.IGPTargetUser, rhs: IGPRoomMessageLog.IGPTargetUser) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpId == rhs.hasIgpId) && (!lhs.hasIgpId || lhs.igpId == rhs.igpId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:igpId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpId {
                serialize_size += igpId.computeInt64Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPRoomMessageLog.IGPTargetUser.Builder {
            return IGPRoomMessageLog.IGPTargetUser.classBuilder() as! IGPRoomMessageLog.IGPTargetUser.Builder
        }
        public func getBuilder() -> IGPRoomMessageLog.IGPTargetUser.Builder {
            return classBuilder() as! IGPRoomMessageLog.IGPTargetUser.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPRoomMessageLog.IGPTargetUser.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPRoomMessageLog.IGPTargetUser.Builder()
        }
        public func toBuilder() throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
            return try IGPRoomMessageLog.IGPTargetUser.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPRoomMessageLog.IGPTargetUser) throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
            return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpId {
                jsonMap["IGPId"] = "\(igpId)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageLog.IGPTargetUser {
            return try IGPRoomMessageLog.IGPTargetUser.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPRoomMessageLog.IGPTargetUser {
            return try IGPRoomMessageLog.IGPTargetUser.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpId {
                output += "\(indent) igpId: \(igpId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpId {
                    hashCode = (hashCode &* 31) &+ igpId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPRoomMessageLog.IGPTargetUser"
        }
        override public func className() -> String {
            return "IGPRoomMessageLog.IGPTargetUser"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPRoomMessageLog.IGPTargetUser = IGPRoomMessageLog.IGPTargetUser()
            public func getMessage() -> IGPRoomMessageLog.IGPTargetUser {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpId:Int64 {
                get {
                    return builderResult.igpId
                }
                set (value) {
                    builderResult.hasIgpId = true
                    builderResult.igpId = value
                }
            }
            public var hasIgpId:Bool {
                get {
                    return builderResult.hasIgpId
                }
            }
            @discardableResult
            public func setIgpId(_ value:Int64) -> IGPRoomMessageLog.IGPTargetUser.Builder {
                self.igpId = value
                return self
            }
            @discardableResult
            public func clearIgpId() -> IGPRoomMessageLog.IGPTargetUser.Builder{
                builderResult.hasIgpId = false
                builderResult.igpId = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPRoomMessageLog.IGPTargetUser.Builder {
                builderResult = IGPRoomMessageLog.IGPTargetUser()
                return self
            }
            override public func clone() throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
                return try IGPRoomMessageLog.IGPTargetUser.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPRoomMessageLog.IGPTargetUser {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPRoomMessageLog.IGPTargetUser {
                let returnMe:IGPRoomMessageLog.IGPTargetUser = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPRoomMessageLog.IGPTargetUser) throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
                if other == IGPRoomMessageLog.IGPTargetUser() {
                    return self
                }
                if other.hasIgpId {
                    igpId = other.igpId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        igpId = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
                let resultDecodedBuilder = IGPRoomMessageLog.IGPTargetUser.Builder()
                if let jsonValueIgpId = jsonMap["IGPId"] as? String {
                    resultDecodedBuilder.igpId = Int64(jsonValueIgpId)!
                } else if let jsonValueIgpId = jsonMap["IGPId"] as? Int {
                    resultDecodedBuilder.igpId = Int64(jsonValueIgpId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessageLog.IGPTargetUser.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPRoomMessageLog.IGPTargetUser.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case userJoined = 0
            case userDeleted = 1
            case roomCreated = 2
            case memberAdded = 3
            case memberKicked = 4
            case memberLeft = 5
            case roomConvertedToPublic = 6
            case roomConvertedToPrivate = 7
            case memberJoinedByInviteLink = 8
            case roomDeleted = 9
            public func toString() -> String {
                switch self {
                case .userJoined: return "USER_JOINED"
                case .userDeleted: return "USER_DELETED"
                case .roomCreated: return "ROOM_CREATED"
                case .memberAdded: return "MEMBER_ADDED"
                case .memberKicked: return "MEMBER_KICKED"
                case .memberLeft: return "MEMBER_LEFT"
                case .roomConvertedToPublic: return "ROOM_CONVERTED_TO_PUBLIC"
                case .roomConvertedToPrivate: return "ROOM_CONVERTED_TO_PRIVATE"
                case .memberJoinedByInviteLink: return "MEMBER_JOINED_BY_INVITE_LINK"
                case .roomDeleted: return "ROOM_DELETED"
                }
            }
            public static func fromString(str:String) throws -> IGPRoomMessageLog.IGPType {
                switch str {
                case "USER_JOINED":    return .userJoined
                case "USER_DELETED":    return .userDeleted
                case "ROOM_CREATED":    return .roomCreated
                case "MEMBER_ADDED":    return .memberAdded
                case "MEMBER_KICKED":    return .memberKicked
                case "MEMBER_LEFT":    return .memberLeft
                case "ROOM_CONVERTED_TO_PUBLIC":    return .roomConvertedToPublic
                case "ROOM_CONVERTED_TO_PRIVATE":    return .roomConvertedToPrivate
                case "MEMBER_JOINED_BY_INVITE_LINK":    return .memberJoinedByInviteLink
                case "ROOM_DELETED":    return .roomDeleted
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .userJoined: return ".userJoined"
                case .userDeleted: return ".userDeleted"
                case .roomCreated: return ".roomCreated"
                case .memberAdded: return ".memberAdded"
                case .memberKicked: return ".memberKicked"
                case .memberLeft: return ".memberLeft"
                case .roomConvertedToPublic: return ".roomConvertedToPublic"
                case .roomConvertedToPrivate: return ".roomConvertedToPrivate"
                case .memberJoinedByInviteLink: return ".memberJoinedByInviteLink"
                case .roomDeleted: return ".roomDeleted"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPType, rhs:IGPType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 



        //Enum type declaration start 

        public enum IGPExtraType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case noExtra = 0
            case targetUser = 1
            public func toString() -> String {
                switch self {
                case .noExtra: return "NO_EXTRA"
                case .targetUser: return "TARGET_USER"
                }
            }
            public static func fromString(str:String) throws -> IGPRoomMessageLog.IGPExtraType {
                switch str {
                case "NO_EXTRA":    return .noExtra
                case "TARGET_USER":    return .targetUser
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .noExtra: return ".noExtra"
                case .targetUser: return ".targetUser"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPExtraType, rhs:IGPExtraType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpType:IGPRoomMessageLog.IGPType = IGPRoomMessageLog.IGPType.userJoined
    public fileprivate(set) var hasIgpType:Bool = false
    public fileprivate(set) var igpExtraType:IGPRoomMessageLog.IGPExtraType = IGPRoomMessageLog.IGPExtraType.noExtra
    public fileprivate(set) var hasIgpExtraType:Bool = false
    public fileprivate(set) var igpTargetUser:IGPRoomMessageLog.IGPTargetUser!
    public fileprivate(set) var hasIgpTargetUser:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpType {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:igpType.rawValue)
        }
        if hasIgpExtraType {
            try codedOutputStream.writeEnum(fieldNumber: 2, value:igpExtraType.rawValue)
        }
        if hasIgpTargetUser {
            try codedOutputStream.writeMessage(fieldNumber: 3, value:igpTargetUser)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if (hasIgpType) {
            serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 1)
        }
        if (hasIgpExtraType) {
            serialize_size += igpExtraType.rawValue.computeEnumSize(fieldNumber: 2)
        }
        if hasIgpTargetUser {
            if let varSizeigpTargetUser = igpTargetUser?.computeMessageSize(fieldNumber: 3) {
                serialize_size += varSizeigpTargetUser
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRoomMessageLog.Builder {
        return IGPRoomMessageLog.classBuilder() as! IGPRoomMessageLog.Builder
    }
    public func getBuilder() -> IGPRoomMessageLog.Builder {
        return classBuilder() as! IGPRoomMessageLog.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageLog.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageLog.Builder()
    }
    public func toBuilder() throws -> IGPRoomMessageLog.Builder {
        return try IGPRoomMessageLog.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRoomMessageLog) throws -> IGPRoomMessageLog.Builder {
        return try IGPRoomMessageLog.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpType {
            jsonMap["IGPType"] = igpType.toString()
        }
        if hasIgpExtraType {
            jsonMap["IGPExtraType"] = igpExtraType.toString()
        }
        if hasIgpTargetUser {
            jsonMap["IGPTargetUser"] = try igpTargetUser.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if (hasIgpType) {
            output += "\(indent) igpType: \(igpType.description)\n"
        }
        if (hasIgpExtraType) {
            output += "\(indent) igpExtraType: \(igpExtraType.description)\n"
        }
        if hasIgpTargetUser {
            output += "\(indent) igpTargetUser {\n"
            if let outDescIgpTargetUser = igpTargetUser {
                output += try outDescIgpTargetUser.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpType {
                 hashCode = (hashCode &* 31) &+ igpType.hashValue
            }
            if hasIgpExtraType {
                 hashCode = (hashCode &* 31) &+ igpExtraType.hashValue
            }
            if hasIgpTargetUser {
                if let hashValueigpTargetUser = igpTargetUser?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpTargetUser
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRoomMessageLog"
    }
    override public func className() -> String {
        return "IGPRoomMessageLog"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRoomMessageLog = IGPRoomMessageLog()
        public func getMessage() -> IGPRoomMessageLog {
            return builderResult
        }

        required override public init () {
            super.init()
        }
            public var igpType:IGPRoomMessageLog.IGPType {
                get {
                    return builderResult.igpType
                }
                set (value) {
                    builderResult.hasIgpType = true
                    builderResult.igpType = value
                }
            }
            public var hasIgpType:Bool{
                get {
                    return builderResult.hasIgpType
                }
            }
        @discardableResult
            public func setIgpType(_ value:IGPRoomMessageLog.IGPType) -> IGPRoomMessageLog.Builder {
              self.igpType = value
              return self
            }
        @discardableResult
            public func clearIgpType() -> IGPRoomMessageLog.Builder {
               builderResult.hasIgpType = false
               builderResult.igpType = .userJoined
               return self
            }
            public var igpExtraType:IGPRoomMessageLog.IGPExtraType {
                get {
                    return builderResult.igpExtraType
                }
                set (value) {
                    builderResult.hasIgpExtraType = true
                    builderResult.igpExtraType = value
                }
            }
            public var hasIgpExtraType:Bool{
                get {
                    return builderResult.hasIgpExtraType
                }
            }
        @discardableResult
            public func setIgpExtraType(_ value:IGPRoomMessageLog.IGPExtraType) -> IGPRoomMessageLog.Builder {
              self.igpExtraType = value
              return self
            }
        @discardableResult
            public func clearIgpExtraType() -> IGPRoomMessageLog.Builder {
               builderResult.hasIgpExtraType = false
               builderResult.igpExtraType = .noExtra
               return self
            }
        public var igpTargetUser:IGPRoomMessageLog.IGPTargetUser! {
            get {
                if igpTargetUserBuilder_ != nil {
                    builderResult.igpTargetUser = igpTargetUserBuilder_.getMessage()
                }
                return builderResult.igpTargetUser
            }
            set (value) {
                builderResult.hasIgpTargetUser = true
                builderResult.igpTargetUser = value
            }
        }
        public var hasIgpTargetUser:Bool {
            get {
                return builderResult.hasIgpTargetUser
            }
        }
        fileprivate var igpTargetUserBuilder_:IGPRoomMessageLog.IGPTargetUser.Builder! {
            didSet {
                builderResult.hasIgpTargetUser = true
            }
        }
        public func getIgpTargetUserBuilder() -> IGPRoomMessageLog.IGPTargetUser.Builder {
            if igpTargetUserBuilder_ == nil {
                igpTargetUserBuilder_ = IGPRoomMessageLog.IGPTargetUser.Builder()
                builderResult.igpTargetUser = igpTargetUserBuilder_.getMessage()
                if igpTargetUser != nil {
                    try! igpTargetUserBuilder_.mergeFrom(other: igpTargetUser)
                }
            }
            return igpTargetUserBuilder_
        }
        @discardableResult
        public func setIgpTargetUser(_ value:IGPRoomMessageLog.IGPTargetUser!) -> IGPRoomMessageLog.Builder {
            self.igpTargetUser = value
            return self
        }
        @discardableResult
        public func mergeIgpTargetUser(value:IGPRoomMessageLog.IGPTargetUser) throws -> IGPRoomMessageLog.Builder {
            if builderResult.hasIgpTargetUser {
                builderResult.igpTargetUser = try IGPRoomMessageLog.IGPTargetUser.builderWithPrototype(prototype:builderResult.igpTargetUser).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpTargetUser = value
            }
            builderResult.hasIgpTargetUser = true
            return self
        }
        @discardableResult
        public func clearIgpTargetUser() -> IGPRoomMessageLog.Builder {
            igpTargetUserBuilder_ = nil
            builderResult.hasIgpTargetUser = false
            builderResult.igpTargetUser = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRoomMessageLog.Builder {
            builderResult = IGPRoomMessageLog()
            return self
        }
        override public func clone() throws -> IGPRoomMessageLog.Builder {
            return try IGPRoomMessageLog.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRoomMessageLog {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRoomMessageLog {
            let returnMe:IGPRoomMessageLog = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRoomMessageLog) throws -> IGPRoomMessageLog.Builder {
            if other == IGPRoomMessageLog() {
                return self
            }
            if other.hasIgpType {
                igpType = other.igpType
            }
            if other.hasIgpExtraType {
                igpExtraType = other.igpExtraType
            }
            if (other.hasIgpTargetUser) {
                try mergeIgpTargetUser(value: other.igpTargetUser)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageLog.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    let valueIntigpType = try codedInputStream.readEnum()
                    if let enumsigpType = IGPRoomMessageLog.IGPType(rawValue:valueIntigpType){
                        igpType = enumsigpType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntigpType))
                    }

                case 16:
                    let valueIntigpExtraType = try codedInputStream.readEnum()
                    if let enumsigpExtraType = IGPRoomMessageLog.IGPExtraType(rawValue:valueIntigpExtraType){
                        igpExtraType = enumsigpExtraType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntigpExtraType))
                    }

                case 26:
                    let subBuilder:IGPRoomMessageLog.IGPTargetUser.Builder = IGPRoomMessageLog.IGPTargetUser.Builder()
                    if hasIgpTargetUser {
                        try subBuilder.mergeFrom(other: igpTargetUser)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpTargetUser = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageLog.Builder {
            let resultDecodedBuilder = IGPRoomMessageLog.Builder()
            if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                resultDecodedBuilder.igpType = try IGPRoomMessageLog.IGPType.fromString(str: jsonValueIgpType)
            }
            if let jsonValueIgpExtraType = jsonMap["IGPExtraType"] as? String {
                resultDecodedBuilder.igpExtraType = try IGPRoomMessageLog.IGPExtraType.fromString(str: jsonValueIgpExtraType)
            }
            if let jsonValueIgpTargetUser = jsonMap["IGPTargetUser"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpTargetUser = try IGPRoomMessageLog.IGPTargetUser.Builder.decodeToBuilder(jsonMap:jsonValueIgpTargetUser).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessageLog.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRoomMessageLog.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPRoomMessageContact : GeneratedMessage {

    public static func == (lhs: IGPRoomMessageContact, rhs: IGPRoomMessageContact) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpFirstName == rhs.hasIgpFirstName) && (!lhs.hasIgpFirstName || lhs.igpFirstName == rhs.igpFirstName)
        fieldCheck = fieldCheck && (lhs.hasIgpLastName == rhs.hasIgpLastName) && (!lhs.hasIgpLastName || lhs.igpLastName == rhs.igpLastName)
        fieldCheck = fieldCheck && (lhs.hasIgpNickname == rhs.hasIgpNickname) && (!lhs.hasIgpNickname || lhs.igpNickname == rhs.igpNickname)
        fieldCheck = fieldCheck && (lhs.igpPhone == rhs.igpPhone)
        fieldCheck = fieldCheck && (lhs.igpEmail == rhs.igpEmail)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpFirstName:String = ""
    public fileprivate(set) var hasIgpFirstName:Bool = false

    public fileprivate(set) var igpLastName:String = ""
    public fileprivate(set) var hasIgpLastName:Bool = false

    public fileprivate(set) var igpNickname:String = ""
    public fileprivate(set) var hasIgpNickname:Bool = false

    public fileprivate(set) var igpPhone:Array<String> = Array<String>()
    public fileprivate(set) var igpEmail:Array<String> = Array<String>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpFirstName {
            try codedOutputStream.writeString(fieldNumber: 1, value:igpFirstName)
        }
        if hasIgpLastName {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpLastName)
        }
        if hasIgpNickname {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpNickname)
        }
        if !igpPhone.isEmpty {
            for oneValueigpPhone in igpPhone {
                try codedOutputStream.writeString(fieldNumber: 4, value:oneValueigpPhone)
            }
        }
        if !igpEmail.isEmpty {
            for oneValueigpEmail in igpEmail {
                try codedOutputStream.writeString(fieldNumber: 5, value:oneValueigpEmail)
            }
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpFirstName {
            serialize_size += igpFirstName.computeStringSize(fieldNumber: 1)
        }
        if hasIgpLastName {
            serialize_size += igpLastName.computeStringSize(fieldNumber: 2)
        }
        if hasIgpNickname {
            serialize_size += igpNickname.computeStringSize(fieldNumber: 3)
        }
        var dataSizeIgpPhone:Int32 = 0
        for oneValueigpPhone in igpPhone {
            dataSizeIgpPhone += oneValueigpPhone.computeStringSizeNoTag()
        }
        serialize_size += dataSizeIgpPhone
        serialize_size += 1 * Int32(igpPhone.count)
        var dataSizeIgpEmail:Int32 = 0
        for oneValueigpEmail in igpEmail {
            dataSizeIgpEmail += oneValueigpEmail.computeStringSizeNoTag()
        }
        serialize_size += dataSizeIgpEmail
        serialize_size += 1 * Int32(igpEmail.count)
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRoomMessageContact.Builder {
        return IGPRoomMessageContact.classBuilder() as! IGPRoomMessageContact.Builder
    }
    public func getBuilder() -> IGPRoomMessageContact.Builder {
        return classBuilder() as! IGPRoomMessageContact.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageContact.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageContact.Builder()
    }
    public func toBuilder() throws -> IGPRoomMessageContact.Builder {
        return try IGPRoomMessageContact.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRoomMessageContact) throws -> IGPRoomMessageContact.Builder {
        return try IGPRoomMessageContact.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpFirstName {
            jsonMap["IGPFirstName"] = igpFirstName
        }
        if hasIgpLastName {
            jsonMap["IGPLastName"] = igpLastName
        }
        if hasIgpNickname {
            jsonMap["IGPNickname"] = igpNickname
        }
        if !igpPhone.isEmpty {
            var jsonArrayIgpPhone:Array<String> = []
            for oneValueIgpPhone in igpPhone {
                jsonArrayIgpPhone.append(oneValueIgpPhone)
            }
            jsonMap["IGPPhone"] = jsonArrayIgpPhone
        }
        if !igpEmail.isEmpty {
            var jsonArrayIgpEmail:Array<String> = []
            for oneValueIgpEmail in igpEmail {
                jsonArrayIgpEmail.append(oneValueIgpEmail)
            }
            jsonMap["IGPEmail"] = jsonArrayIgpEmail
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpFirstName {
            output += "\(indent) igpFirstName: \(igpFirstName) \n"
        }
        if hasIgpLastName {
            output += "\(indent) igpLastName: \(igpLastName) \n"
        }
        if hasIgpNickname {
            output += "\(indent) igpNickname: \(igpNickname) \n"
        }
        var igpPhoneElementIndex:Int = 0
        for oneValueIgpPhone in igpPhone  {
            output += "\(indent) igpPhone[\(igpPhoneElementIndex)]: \(oneValueIgpPhone)\n"
            igpPhoneElementIndex += 1
        }
        var igpEmailElementIndex:Int = 0
        for oneValueIgpEmail in igpEmail  {
            output += "\(indent) igpEmail[\(igpEmailElementIndex)]: \(oneValueIgpEmail)\n"
            igpEmailElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpFirstName {
                hashCode = (hashCode &* 31) &+ igpFirstName.hashValue
            }
            if hasIgpLastName {
                hashCode = (hashCode &* 31) &+ igpLastName.hashValue
            }
            if hasIgpNickname {
                hashCode = (hashCode &* 31) &+ igpNickname.hashValue
            }
            for oneValueIgpPhone in igpPhone {
                hashCode = (hashCode &* 31) &+ oneValueIgpPhone.hashValue
            }
            for oneValueIgpEmail in igpEmail {
                hashCode = (hashCode &* 31) &+ oneValueIgpEmail.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRoomMessageContact"
    }
    override public func className() -> String {
        return "IGPRoomMessageContact"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRoomMessageContact = IGPRoomMessageContact()
        public func getMessage() -> IGPRoomMessageContact {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpFirstName:String {
            get {
                return builderResult.igpFirstName
            }
            set (value) {
                builderResult.hasIgpFirstName = true
                builderResult.igpFirstName = value
            }
        }
        public var hasIgpFirstName:Bool {
            get {
                return builderResult.hasIgpFirstName
            }
        }
        @discardableResult
        public func setIgpFirstName(_ value:String) -> IGPRoomMessageContact.Builder {
            self.igpFirstName = value
            return self
        }
        @discardableResult
        public func clearIgpFirstName() -> IGPRoomMessageContact.Builder{
            builderResult.hasIgpFirstName = false
            builderResult.igpFirstName = ""
            return self
        }
        public var igpLastName:String {
            get {
                return builderResult.igpLastName
            }
            set (value) {
                builderResult.hasIgpLastName = true
                builderResult.igpLastName = value
            }
        }
        public var hasIgpLastName:Bool {
            get {
                return builderResult.hasIgpLastName
            }
        }
        @discardableResult
        public func setIgpLastName(_ value:String) -> IGPRoomMessageContact.Builder {
            self.igpLastName = value
            return self
        }
        @discardableResult
        public func clearIgpLastName() -> IGPRoomMessageContact.Builder{
            builderResult.hasIgpLastName = false
            builderResult.igpLastName = ""
            return self
        }
        public var igpNickname:String {
            get {
                return builderResult.igpNickname
            }
            set (value) {
                builderResult.hasIgpNickname = true
                builderResult.igpNickname = value
            }
        }
        public var hasIgpNickname:Bool {
            get {
                return builderResult.hasIgpNickname
            }
        }
        @discardableResult
        public func setIgpNickname(_ value:String) -> IGPRoomMessageContact.Builder {
            self.igpNickname = value
            return self
        }
        @discardableResult
        public func clearIgpNickname() -> IGPRoomMessageContact.Builder{
            builderResult.hasIgpNickname = false
            builderResult.igpNickname = ""
            return self
        }
        public var igpPhone:Array<String> {
            get {
                return builderResult.igpPhone
            }
            set (array) {
                builderResult.igpPhone = array
            }
        }
        @discardableResult
        public func setIgpPhone(_ value:Array<String>) -> IGPRoomMessageContact.Builder {
            self.igpPhone = value
            return self
        }
        @discardableResult
        public func clearIgpPhone() -> IGPRoomMessageContact.Builder {
            builderResult.igpPhone.removeAll(keepingCapacity: false)
            return self
        }
        public var igpEmail:Array<String> {
            get {
                return builderResult.igpEmail
            }
            set (array) {
                builderResult.igpEmail = array
            }
        }
        @discardableResult
        public func setIgpEmail(_ value:Array<String>) -> IGPRoomMessageContact.Builder {
            self.igpEmail = value
            return self
        }
        @discardableResult
        public func clearIgpEmail() -> IGPRoomMessageContact.Builder {
            builderResult.igpEmail.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRoomMessageContact.Builder {
            builderResult = IGPRoomMessageContact()
            return self
        }
        override public func clone() throws -> IGPRoomMessageContact.Builder {
            return try IGPRoomMessageContact.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRoomMessageContact {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRoomMessageContact {
            let returnMe:IGPRoomMessageContact = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRoomMessageContact) throws -> IGPRoomMessageContact.Builder {
            if other == IGPRoomMessageContact() {
                return self
            }
            if other.hasIgpFirstName {
                igpFirstName = other.igpFirstName
            }
            if other.hasIgpLastName {
                igpLastName = other.igpLastName
            }
            if other.hasIgpNickname {
                igpNickname = other.igpNickname
            }
            if !other.igpPhone.isEmpty {
                builderResult.igpPhone += other.igpPhone
            }
            if !other.igpEmail.isEmpty {
                builderResult.igpEmail += other.igpEmail
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageContact.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageContact.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    igpFirstName = try codedInputStream.readString()

                case 18:
                    igpLastName = try codedInputStream.readString()

                case 26:
                    igpNickname = try codedInputStream.readString()

                case 34:
                    igpPhone += [try codedInputStream.readString()]

                case 42:
                    igpEmail += [try codedInputStream.readString()]

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageContact.Builder {
            let resultDecodedBuilder = IGPRoomMessageContact.Builder()
            if let jsonValueIgpFirstName = jsonMap["IGPFirstName"] as? String {
                resultDecodedBuilder.igpFirstName = jsonValueIgpFirstName
            }
            if let jsonValueIgpLastName = jsonMap["IGPLastName"] as? String {
                resultDecodedBuilder.igpLastName = jsonValueIgpLastName
            }
            if let jsonValueIgpNickname = jsonMap["IGPNickname"] as? String {
                resultDecodedBuilder.igpNickname = jsonValueIgpNickname
            }
            if let jsonValueIgpPhone = jsonMap["IGPPhone"] as? Array<String> {
                var jsonArrayIgpPhone:Array<String> = []
                for oneValueIgpPhone in jsonValueIgpPhone {
                    jsonArrayIgpPhone.append(oneValueIgpPhone)
                }
                resultDecodedBuilder.igpPhone = jsonArrayIgpPhone
            }
            if let jsonValueIgpEmail = jsonMap["IGPEmail"] as? Array<String> {
                var jsonArrayIgpEmail:Array<String> = []
                for oneValueIgpEmail in jsonValueIgpEmail {
                    jsonArrayIgpEmail.append(oneValueIgpEmail)
                }
                resultDecodedBuilder.igpEmail = jsonArrayIgpEmail
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessageContact.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRoomMessageContact.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPRoomMessageForwardFrom : GeneratedMessage {

    public static func == (lhs: IGPRoomMessageForwardFrom, rhs: IGPRoomMessageForwardFrom) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageId == rhs.hasIgpMessageId) && (!lhs.hasIgpMessageId || lhs.igpMessageId == rhs.igpMessageId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpMessageId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpMessageId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:igpRoomId)
        }
        if hasIgpMessageId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpMessageId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 1)
        }
        if hasIgpMessageId {
            serialize_size += igpMessageId.computeInt64Size(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRoomMessageForwardFrom.Builder {
        return IGPRoomMessageForwardFrom.classBuilder() as! IGPRoomMessageForwardFrom.Builder
    }
    public func getBuilder() -> IGPRoomMessageForwardFrom.Builder {
        return classBuilder() as! IGPRoomMessageForwardFrom.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageForwardFrom.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessageForwardFrom.Builder()
    }
    public func toBuilder() throws -> IGPRoomMessageForwardFrom.Builder {
        return try IGPRoomMessageForwardFrom.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRoomMessageForwardFrom) throws -> IGPRoomMessageForwardFrom.Builder {
        return try IGPRoomMessageForwardFrom.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        if hasIgpMessageId {
            jsonMap["IGPMessageId"] = "\(igpMessageId)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpMessageId {
            output += "\(indent) igpMessageId: \(igpMessageId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpMessageId {
                hashCode = (hashCode &* 31) &+ igpMessageId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRoomMessageForwardFrom"
    }
    override public func className() -> String {
        return "IGPRoomMessageForwardFrom"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRoomMessageForwardFrom = IGPRoomMessageForwardFrom()
        public func getMessage() -> IGPRoomMessageForwardFrom {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPRoomMessageForwardFrom.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPRoomMessageForwardFrom.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
        public var igpMessageId:Int64 {
            get {
                return builderResult.igpMessageId
            }
            set (value) {
                builderResult.hasIgpMessageId = true
                builderResult.igpMessageId = value
            }
        }
        public var hasIgpMessageId:Bool {
            get {
                return builderResult.hasIgpMessageId
            }
        }
        @discardableResult
        public func setIgpMessageId(_ value:Int64) -> IGPRoomMessageForwardFrom.Builder {
            self.igpMessageId = value
            return self
        }
        @discardableResult
        public func clearIgpMessageId() -> IGPRoomMessageForwardFrom.Builder{
            builderResult.hasIgpMessageId = false
            builderResult.igpMessageId = Int64(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRoomMessageForwardFrom.Builder {
            builderResult = IGPRoomMessageForwardFrom()
            return self
        }
        override public func clone() throws -> IGPRoomMessageForwardFrom.Builder {
            return try IGPRoomMessageForwardFrom.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRoomMessageForwardFrom {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRoomMessageForwardFrom {
            let returnMe:IGPRoomMessageForwardFrom = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRoomMessageForwardFrom) throws -> IGPRoomMessageForwardFrom.Builder {
            if other == IGPRoomMessageForwardFrom() {
                return self
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpMessageId {
                igpMessageId = other.igpMessageId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageForwardFrom.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageForwardFrom.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    igpRoomId = try codedInputStream.readInt64()

                case 16:
                    igpMessageId = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessageForwardFrom.Builder {
            let resultDecodedBuilder = IGPRoomMessageForwardFrom.Builder()
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? String {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)!
            } else if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? Int {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessageForwardFrom.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRoomMessageForwardFrom.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPRegisteredUser : GeneratedMessage {

    public static func == (lhs: IGPRegisteredUser, rhs: IGPRegisteredUser) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpId == rhs.hasIgpId) && (!lhs.hasIgpId || lhs.igpId == rhs.igpId)
        fieldCheck = fieldCheck && (lhs.hasIgpUsername == rhs.hasIgpUsername) && (!lhs.hasIgpUsername || lhs.igpUsername == rhs.igpUsername)
        fieldCheck = fieldCheck && (lhs.hasIgpPhone == rhs.hasIgpPhone) && (!lhs.hasIgpPhone || lhs.igpPhone == rhs.igpPhone)
        fieldCheck = fieldCheck && (lhs.hasIgpFirstName == rhs.hasIgpFirstName) && (!lhs.hasIgpFirstName || lhs.igpFirstName == rhs.igpFirstName)
        fieldCheck = fieldCheck && (lhs.hasIgpLastName == rhs.hasIgpLastName) && (!lhs.hasIgpLastName || lhs.igpLastName == rhs.igpLastName)
        fieldCheck = fieldCheck && (lhs.hasIgpDisplayName == rhs.hasIgpDisplayName) && (!lhs.hasIgpDisplayName || lhs.igpDisplayName == rhs.igpDisplayName)
        fieldCheck = fieldCheck && (lhs.hasIgpInitials == rhs.hasIgpInitials) && (!lhs.hasIgpInitials || lhs.igpInitials == rhs.igpInitials)
        fieldCheck = fieldCheck && (lhs.hasIgpColor == rhs.hasIgpColor) && (!lhs.hasIgpColor || lhs.igpColor == rhs.igpColor)
        fieldCheck = fieldCheck && (lhs.hasIgpStatus == rhs.hasIgpStatus) && (!lhs.hasIgpStatus || lhs.igpStatus == rhs.igpStatus)
        fieldCheck = fieldCheck && (lhs.hasIgpLastSeen == rhs.hasIgpLastSeen) && (!lhs.hasIgpLastSeen || lhs.igpLastSeen == rhs.igpLastSeen)
        fieldCheck = fieldCheck && (lhs.hasIgpAvatarCount == rhs.hasIgpAvatarCount) && (!lhs.hasIgpAvatarCount || lhs.igpAvatarCount == rhs.igpAvatarCount)
        fieldCheck = fieldCheck && (lhs.hasIgpAvatar == rhs.hasIgpAvatar) && (!lhs.hasIgpAvatar || lhs.igpAvatar == rhs.igpAvatar)
        fieldCheck = fieldCheck && (lhs.hasIgpMutual == rhs.hasIgpMutual) && (!lhs.hasIgpMutual || lhs.igpMutual == rhs.igpMutual)
        fieldCheck = fieldCheck && (lhs.hasIgpDeleted == rhs.hasIgpDeleted) && (!lhs.hasIgpDeleted || lhs.igpDeleted == rhs.igpDeleted)
        fieldCheck = fieldCheck && (lhs.hasIgpCacheId == rhs.hasIgpCacheId) && (!lhs.hasIgpCacheId || lhs.igpCacheId == rhs.igpCacheId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPStatus:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case longTimeAgo = 0
            case lastMonth = 1
            case lastWeek = 2
            case online = 3
            case exactly = 4
            case recently = 5
            case support = 6
            case serviceNotifications = 7
            public func toString() -> String {
                switch self {
                case .longTimeAgo: return "LONG_TIME_AGO"
                case .lastMonth: return "LAST_MONTH"
                case .lastWeek: return "LAST_WEEK"
                case .online: return "ONLINE"
                case .exactly: return "EXACTLY"
                case .recently: return "RECENTLY"
                case .support: return "SUPPORT"
                case .serviceNotifications: return "SERVICE_NOTIFICATIONS"
                }
            }
            public static func fromString(str:String) throws -> IGPRegisteredUser.IGPStatus {
                switch str {
                case "LONG_TIME_AGO":    return .longTimeAgo
                case "LAST_MONTH":    return .lastMonth
                case "LAST_WEEK":    return .lastWeek
                case "ONLINE":    return .online
                case "EXACTLY":    return .exactly
                case "RECENTLY":    return .recently
                case "SUPPORT":    return .support
                case "SERVICE_NOTIFICATIONS":    return .serviceNotifications
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .longTimeAgo: return ".longTimeAgo"
                case .lastMonth: return ".lastMonth"
                case .lastWeek: return ".lastWeek"
                case .online: return ".online"
                case .exactly: return ".exactly"
                case .recently: return ".recently"
                case .support: return ".support"
                case .serviceNotifications: return ".serviceNotifications"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPStatus, rhs:IGPStatus) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpId:Bool = false

    public fileprivate(set) var igpUsername:String = ""
    public fileprivate(set) var hasIgpUsername:Bool = false

    public fileprivate(set) var igpPhone:Int64 = Int64(0)
    public fileprivate(set) var hasIgpPhone:Bool = false

    public fileprivate(set) var igpFirstName:String = ""
    public fileprivate(set) var hasIgpFirstName:Bool = false

    public fileprivate(set) var igpLastName:String = ""
    public fileprivate(set) var hasIgpLastName:Bool = false

    public fileprivate(set) var igpDisplayName:String = ""
    public fileprivate(set) var hasIgpDisplayName:Bool = false

    public fileprivate(set) var igpInitials:String = ""
    public fileprivate(set) var hasIgpInitials:Bool = false

    public fileprivate(set) var igpColor:String = ""
    public fileprivate(set) var hasIgpColor:Bool = false

    public fileprivate(set) var igpStatus:IGPRegisteredUser.IGPStatus = IGPRegisteredUser.IGPStatus.longTimeAgo
    public fileprivate(set) var hasIgpStatus:Bool = false
    public fileprivate(set) var igpLastSeen:Int32 = Int32(0)
    public fileprivate(set) var hasIgpLastSeen:Bool = false

    public fileprivate(set) var igpAvatarCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpAvatarCount:Bool = false

    public fileprivate(set) var igpAvatar:IGPAvatar!
    public fileprivate(set) var hasIgpAvatar:Bool = false
    public fileprivate(set) var igpMutual:Bool = false
    public fileprivate(set) var hasIgpMutual:Bool = false

    public fileprivate(set) var igpDeleted:Bool = false
    public fileprivate(set) var hasIgpDeleted:Bool = false

    public fileprivate(set) var igpCacheId:String = ""
    public fileprivate(set) var hasIgpCacheId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:igpId)
        }
        if hasIgpUsername {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpUsername)
        }
        if hasIgpPhone {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:igpPhone)
        }
        if hasIgpFirstName {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpFirstName)
        }
        if hasIgpLastName {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpLastName)
        }
        if hasIgpDisplayName {
            try codedOutputStream.writeString(fieldNumber: 6, value:igpDisplayName)
        }
        if hasIgpInitials {
            try codedOutputStream.writeString(fieldNumber: 7, value:igpInitials)
        }
        if hasIgpColor {
            try codedOutputStream.writeString(fieldNumber: 8, value:igpColor)
        }
        if hasIgpStatus {
            try codedOutputStream.writeEnum(fieldNumber: 9, value:igpStatus.rawValue)
        }
        if hasIgpLastSeen {
            try codedOutputStream.writeInt32(fieldNumber: 10, value:igpLastSeen)
        }
        if hasIgpAvatarCount {
            try codedOutputStream.writeInt32(fieldNumber: 11, value:igpAvatarCount)
        }
        if hasIgpAvatar {
            try codedOutputStream.writeMessage(fieldNumber: 12, value:igpAvatar)
        }
        if hasIgpMutual {
            try codedOutputStream.writeBool(fieldNumber: 13, value:igpMutual)
        }
        if hasIgpDeleted {
            try codedOutputStream.writeBool(fieldNumber: 14, value:igpDeleted)
        }
        if hasIgpCacheId {
            try codedOutputStream.writeString(fieldNumber: 15, value:igpCacheId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpId {
            serialize_size += igpId.computeInt64Size(fieldNumber: 1)
        }
        if hasIgpUsername {
            serialize_size += igpUsername.computeStringSize(fieldNumber: 2)
        }
        if hasIgpPhone {
            serialize_size += igpPhone.computeInt64Size(fieldNumber: 3)
        }
        if hasIgpFirstName {
            serialize_size += igpFirstName.computeStringSize(fieldNumber: 4)
        }
        if hasIgpLastName {
            serialize_size += igpLastName.computeStringSize(fieldNumber: 5)
        }
        if hasIgpDisplayName {
            serialize_size += igpDisplayName.computeStringSize(fieldNumber: 6)
        }
        if hasIgpInitials {
            serialize_size += igpInitials.computeStringSize(fieldNumber: 7)
        }
        if hasIgpColor {
            serialize_size += igpColor.computeStringSize(fieldNumber: 8)
        }
        if (hasIgpStatus) {
            serialize_size += igpStatus.rawValue.computeEnumSize(fieldNumber: 9)
        }
        if hasIgpLastSeen {
            serialize_size += igpLastSeen.computeInt32Size(fieldNumber: 10)
        }
        if hasIgpAvatarCount {
            serialize_size += igpAvatarCount.computeInt32Size(fieldNumber: 11)
        }
        if hasIgpAvatar {
            if let varSizeigpAvatar = igpAvatar?.computeMessageSize(fieldNumber: 12) {
                serialize_size += varSizeigpAvatar
            }
        }
        if hasIgpMutual {
            serialize_size += igpMutual.computeBoolSize(fieldNumber: 13)
        }
        if hasIgpDeleted {
            serialize_size += igpDeleted.computeBoolSize(fieldNumber: 14)
        }
        if hasIgpCacheId {
            serialize_size += igpCacheId.computeStringSize(fieldNumber: 15)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRegisteredUser.Builder {
        return IGPRegisteredUser.classBuilder() as! IGPRegisteredUser.Builder
    }
    public func getBuilder() -> IGPRegisteredUser.Builder {
        return classBuilder() as! IGPRegisteredUser.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRegisteredUser.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRegisteredUser.Builder()
    }
    public func toBuilder() throws -> IGPRegisteredUser.Builder {
        return try IGPRegisteredUser.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRegisteredUser) throws -> IGPRegisteredUser.Builder {
        return try IGPRegisteredUser.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpId {
            jsonMap["IGPId"] = "\(igpId)"
        }
        if hasIgpUsername {
            jsonMap["IGPUsername"] = igpUsername
        }
        if hasIgpPhone {
            jsonMap["IGPPhone"] = "\(igpPhone)"
        }
        if hasIgpFirstName {
            jsonMap["IGPFirstName"] = igpFirstName
        }
        if hasIgpLastName {
            jsonMap["IGPLastName"] = igpLastName
        }
        if hasIgpDisplayName {
            jsonMap["IGPDisplayName"] = igpDisplayName
        }
        if hasIgpInitials {
            jsonMap["IGPInitials"] = igpInitials
        }
        if hasIgpColor {
            jsonMap["IGPColor"] = igpColor
        }
        if hasIgpStatus {
            jsonMap["IGPStatus"] = igpStatus.toString()
        }
        if hasIgpLastSeen {
            jsonMap["IGPLastSeen"] = Int(igpLastSeen)
        }
        if hasIgpAvatarCount {
            jsonMap["IGPAvatarCount"] = Int(igpAvatarCount)
        }
        if hasIgpAvatar {
            jsonMap["IGPAvatar"] = try igpAvatar.encode()
        }
        if hasIgpMutual {
            jsonMap["IGPMutual"] = igpMutual
        }
        if hasIgpDeleted {
            jsonMap["IGPDeleted"] = igpDeleted
        }
        if hasIgpCacheId {
            jsonMap["IGPCacheId"] = igpCacheId
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpId {
            output += "\(indent) igpId: \(igpId) \n"
        }
        if hasIgpUsername {
            output += "\(indent) igpUsername: \(igpUsername) \n"
        }
        if hasIgpPhone {
            output += "\(indent) igpPhone: \(igpPhone) \n"
        }
        if hasIgpFirstName {
            output += "\(indent) igpFirstName: \(igpFirstName) \n"
        }
        if hasIgpLastName {
            output += "\(indent) igpLastName: \(igpLastName) \n"
        }
        if hasIgpDisplayName {
            output += "\(indent) igpDisplayName: \(igpDisplayName) \n"
        }
        if hasIgpInitials {
            output += "\(indent) igpInitials: \(igpInitials) \n"
        }
        if hasIgpColor {
            output += "\(indent) igpColor: \(igpColor) \n"
        }
        if (hasIgpStatus) {
            output += "\(indent) igpStatus: \(igpStatus.description)\n"
        }
        if hasIgpLastSeen {
            output += "\(indent) igpLastSeen: \(igpLastSeen) \n"
        }
        if hasIgpAvatarCount {
            output += "\(indent) igpAvatarCount: \(igpAvatarCount) \n"
        }
        if hasIgpAvatar {
            output += "\(indent) igpAvatar {\n"
            if let outDescIgpAvatar = igpAvatar {
                output += try outDescIgpAvatar.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpMutual {
            output += "\(indent) igpMutual: \(igpMutual) \n"
        }
        if hasIgpDeleted {
            output += "\(indent) igpDeleted: \(igpDeleted) \n"
        }
        if hasIgpCacheId {
            output += "\(indent) igpCacheId: \(igpCacheId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpId {
                hashCode = (hashCode &* 31) &+ igpId.hashValue
            }
            if hasIgpUsername {
                hashCode = (hashCode &* 31) &+ igpUsername.hashValue
            }
            if hasIgpPhone {
                hashCode = (hashCode &* 31) &+ igpPhone.hashValue
            }
            if hasIgpFirstName {
                hashCode = (hashCode &* 31) &+ igpFirstName.hashValue
            }
            if hasIgpLastName {
                hashCode = (hashCode &* 31) &+ igpLastName.hashValue
            }
            if hasIgpDisplayName {
                hashCode = (hashCode &* 31) &+ igpDisplayName.hashValue
            }
            if hasIgpInitials {
                hashCode = (hashCode &* 31) &+ igpInitials.hashValue
            }
            if hasIgpColor {
                hashCode = (hashCode &* 31) &+ igpColor.hashValue
            }
            if hasIgpStatus {
                 hashCode = (hashCode &* 31) &+ igpStatus.hashValue
            }
            if hasIgpLastSeen {
                hashCode = (hashCode &* 31) &+ igpLastSeen.hashValue
            }
            if hasIgpAvatarCount {
                hashCode = (hashCode &* 31) &+ igpAvatarCount.hashValue
            }
            if hasIgpAvatar {
                if let hashValueigpAvatar = igpAvatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpAvatar
                }
            }
            if hasIgpMutual {
                hashCode = (hashCode &* 31) &+ igpMutual.hashValue
            }
            if hasIgpDeleted {
                hashCode = (hashCode &* 31) &+ igpDeleted.hashValue
            }
            if hasIgpCacheId {
                hashCode = (hashCode &* 31) &+ igpCacheId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRegisteredUser"
    }
    override public func className() -> String {
        return "IGPRegisteredUser"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRegisteredUser = IGPRegisteredUser()
        public func getMessage() -> IGPRegisteredUser {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpId:Int64 {
            get {
                return builderResult.igpId
            }
            set (value) {
                builderResult.hasIgpId = true
                builderResult.igpId = value
            }
        }
        public var hasIgpId:Bool {
            get {
                return builderResult.hasIgpId
            }
        }
        @discardableResult
        public func setIgpId(_ value:Int64) -> IGPRegisteredUser.Builder {
            self.igpId = value
            return self
        }
        @discardableResult
        public func clearIgpId() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpId = false
            builderResult.igpId = Int64(0)
            return self
        }
        public var igpUsername:String {
            get {
                return builderResult.igpUsername
            }
            set (value) {
                builderResult.hasIgpUsername = true
                builderResult.igpUsername = value
            }
        }
        public var hasIgpUsername:Bool {
            get {
                return builderResult.hasIgpUsername
            }
        }
        @discardableResult
        public func setIgpUsername(_ value:String) -> IGPRegisteredUser.Builder {
            self.igpUsername = value
            return self
        }
        @discardableResult
        public func clearIgpUsername() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpUsername = false
            builderResult.igpUsername = ""
            return self
        }
        public var igpPhone:Int64 {
            get {
                return builderResult.igpPhone
            }
            set (value) {
                builderResult.hasIgpPhone = true
                builderResult.igpPhone = value
            }
        }
        public var hasIgpPhone:Bool {
            get {
                return builderResult.hasIgpPhone
            }
        }
        @discardableResult
        public func setIgpPhone(_ value:Int64) -> IGPRegisteredUser.Builder {
            self.igpPhone = value
            return self
        }
        @discardableResult
        public func clearIgpPhone() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpPhone = false
            builderResult.igpPhone = Int64(0)
            return self
        }
        public var igpFirstName:String {
            get {
                return builderResult.igpFirstName
            }
            set (value) {
                builderResult.hasIgpFirstName = true
                builderResult.igpFirstName = value
            }
        }
        public var hasIgpFirstName:Bool {
            get {
                return builderResult.hasIgpFirstName
            }
        }
        @discardableResult
        public func setIgpFirstName(_ value:String) -> IGPRegisteredUser.Builder {
            self.igpFirstName = value
            return self
        }
        @discardableResult
        public func clearIgpFirstName() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpFirstName = false
            builderResult.igpFirstName = ""
            return self
        }
        public var igpLastName:String {
            get {
                return builderResult.igpLastName
            }
            set (value) {
                builderResult.hasIgpLastName = true
                builderResult.igpLastName = value
            }
        }
        public var hasIgpLastName:Bool {
            get {
                return builderResult.hasIgpLastName
            }
        }
        @discardableResult
        public func setIgpLastName(_ value:String) -> IGPRegisteredUser.Builder {
            self.igpLastName = value
            return self
        }
        @discardableResult
        public func clearIgpLastName() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpLastName = false
            builderResult.igpLastName = ""
            return self
        }
        public var igpDisplayName:String {
            get {
                return builderResult.igpDisplayName
            }
            set (value) {
                builderResult.hasIgpDisplayName = true
                builderResult.igpDisplayName = value
            }
        }
        public var hasIgpDisplayName:Bool {
            get {
                return builderResult.hasIgpDisplayName
            }
        }
        @discardableResult
        public func setIgpDisplayName(_ value:String) -> IGPRegisteredUser.Builder {
            self.igpDisplayName = value
            return self
        }
        @discardableResult
        public func clearIgpDisplayName() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpDisplayName = false
            builderResult.igpDisplayName = ""
            return self
        }
        public var igpInitials:String {
            get {
                return builderResult.igpInitials
            }
            set (value) {
                builderResult.hasIgpInitials = true
                builderResult.igpInitials = value
            }
        }
        public var hasIgpInitials:Bool {
            get {
                return builderResult.hasIgpInitials
            }
        }
        @discardableResult
        public func setIgpInitials(_ value:String) -> IGPRegisteredUser.Builder {
            self.igpInitials = value
            return self
        }
        @discardableResult
        public func clearIgpInitials() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpInitials = false
            builderResult.igpInitials = ""
            return self
        }
        public var igpColor:String {
            get {
                return builderResult.igpColor
            }
            set (value) {
                builderResult.hasIgpColor = true
                builderResult.igpColor = value
            }
        }
        public var hasIgpColor:Bool {
            get {
                return builderResult.hasIgpColor
            }
        }
        @discardableResult
        public func setIgpColor(_ value:String) -> IGPRegisteredUser.Builder {
            self.igpColor = value
            return self
        }
        @discardableResult
        public func clearIgpColor() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpColor = false
            builderResult.igpColor = ""
            return self
        }
            public var igpStatus:IGPRegisteredUser.IGPStatus {
                get {
                    return builderResult.igpStatus
                }
                set (value) {
                    builderResult.hasIgpStatus = true
                    builderResult.igpStatus = value
                }
            }
            public var hasIgpStatus:Bool{
                get {
                    return builderResult.hasIgpStatus
                }
            }
        @discardableResult
            public func setIgpStatus(_ value:IGPRegisteredUser.IGPStatus) -> IGPRegisteredUser.Builder {
              self.igpStatus = value
              return self
            }
        @discardableResult
            public func clearIgpStatus() -> IGPRegisteredUser.Builder {
               builderResult.hasIgpStatus = false
               builderResult.igpStatus = .longTimeAgo
               return self
            }
        public var igpLastSeen:Int32 {
            get {
                return builderResult.igpLastSeen
            }
            set (value) {
                builderResult.hasIgpLastSeen = true
                builderResult.igpLastSeen = value
            }
        }
        public var hasIgpLastSeen:Bool {
            get {
                return builderResult.hasIgpLastSeen
            }
        }
        @discardableResult
        public func setIgpLastSeen(_ value:Int32) -> IGPRegisteredUser.Builder {
            self.igpLastSeen = value
            return self
        }
        @discardableResult
        public func clearIgpLastSeen() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpLastSeen = false
            builderResult.igpLastSeen = Int32(0)
            return self
        }
        public var igpAvatarCount:Int32 {
            get {
                return builderResult.igpAvatarCount
            }
            set (value) {
                builderResult.hasIgpAvatarCount = true
                builderResult.igpAvatarCount = value
            }
        }
        public var hasIgpAvatarCount:Bool {
            get {
                return builderResult.hasIgpAvatarCount
            }
        }
        @discardableResult
        public func setIgpAvatarCount(_ value:Int32) -> IGPRegisteredUser.Builder {
            self.igpAvatarCount = value
            return self
        }
        @discardableResult
        public func clearIgpAvatarCount() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpAvatarCount = false
            builderResult.igpAvatarCount = Int32(0)
            return self
        }
        public var igpAvatar:IGPAvatar! {
            get {
                if igpAvatarBuilder_ != nil {
                    builderResult.igpAvatar = igpAvatarBuilder_.getMessage()
                }
                return builderResult.igpAvatar
            }
            set (value) {
                builderResult.hasIgpAvatar = true
                builderResult.igpAvatar = value
            }
        }
        public var hasIgpAvatar:Bool {
            get {
                return builderResult.hasIgpAvatar
            }
        }
        fileprivate var igpAvatarBuilder_:IGPAvatar.Builder! {
            didSet {
                builderResult.hasIgpAvatar = true
            }
        }
        public func getIgpAvatarBuilder() -> IGPAvatar.Builder {
            if igpAvatarBuilder_ == nil {
                igpAvatarBuilder_ = IGPAvatar.Builder()
                builderResult.igpAvatar = igpAvatarBuilder_.getMessage()
                if igpAvatar != nil {
                    try! igpAvatarBuilder_.mergeFrom(other: igpAvatar)
                }
            }
            return igpAvatarBuilder_
        }
        @discardableResult
        public func setIgpAvatar(_ value:IGPAvatar!) -> IGPRegisteredUser.Builder {
            self.igpAvatar = value
            return self
        }
        @discardableResult
        public func mergeIgpAvatar(value:IGPAvatar) throws -> IGPRegisteredUser.Builder {
            if builderResult.hasIgpAvatar {
                builderResult.igpAvatar = try IGPAvatar.builderWithPrototype(prototype:builderResult.igpAvatar).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpAvatar = value
            }
            builderResult.hasIgpAvatar = true
            return self
        }
        @discardableResult
        public func clearIgpAvatar() -> IGPRegisteredUser.Builder {
            igpAvatarBuilder_ = nil
            builderResult.hasIgpAvatar = false
            builderResult.igpAvatar = nil
            return self
        }
        public var igpMutual:Bool {
            get {
                return builderResult.igpMutual
            }
            set (value) {
                builderResult.hasIgpMutual = true
                builderResult.igpMutual = value
            }
        }
        public var hasIgpMutual:Bool {
            get {
                return builderResult.hasIgpMutual
            }
        }
        @discardableResult
        public func setIgpMutual(_ value:Bool) -> IGPRegisteredUser.Builder {
            self.igpMutual = value
            return self
        }
        @discardableResult
        public func clearIgpMutual() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpMutual = false
            builderResult.igpMutual = false
            return self
        }
        public var igpDeleted:Bool {
            get {
                return builderResult.igpDeleted
            }
            set (value) {
                builderResult.hasIgpDeleted = true
                builderResult.igpDeleted = value
            }
        }
        public var hasIgpDeleted:Bool {
            get {
                return builderResult.hasIgpDeleted
            }
        }
        @discardableResult
        public func setIgpDeleted(_ value:Bool) -> IGPRegisteredUser.Builder {
            self.igpDeleted = value
            return self
        }
        @discardableResult
        public func clearIgpDeleted() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpDeleted = false
            builderResult.igpDeleted = false
            return self
        }
        public var igpCacheId:String {
            get {
                return builderResult.igpCacheId
            }
            set (value) {
                builderResult.hasIgpCacheId = true
                builderResult.igpCacheId = value
            }
        }
        public var hasIgpCacheId:Bool {
            get {
                return builderResult.hasIgpCacheId
            }
        }
        @discardableResult
        public func setIgpCacheId(_ value:String) -> IGPRegisteredUser.Builder {
            self.igpCacheId = value
            return self
        }
        @discardableResult
        public func clearIgpCacheId() -> IGPRegisteredUser.Builder{
            builderResult.hasIgpCacheId = false
            builderResult.igpCacheId = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRegisteredUser.Builder {
            builderResult = IGPRegisteredUser()
            return self
        }
        override public func clone() throws -> IGPRegisteredUser.Builder {
            return try IGPRegisteredUser.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRegisteredUser {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRegisteredUser {
            let returnMe:IGPRegisteredUser = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRegisteredUser) throws -> IGPRegisteredUser.Builder {
            if other == IGPRegisteredUser() {
                return self
            }
            if other.hasIgpId {
                igpId = other.igpId
            }
            if other.hasIgpUsername {
                igpUsername = other.igpUsername
            }
            if other.hasIgpPhone {
                igpPhone = other.igpPhone
            }
            if other.hasIgpFirstName {
                igpFirstName = other.igpFirstName
            }
            if other.hasIgpLastName {
                igpLastName = other.igpLastName
            }
            if other.hasIgpDisplayName {
                igpDisplayName = other.igpDisplayName
            }
            if other.hasIgpInitials {
                igpInitials = other.igpInitials
            }
            if other.hasIgpColor {
                igpColor = other.igpColor
            }
            if other.hasIgpStatus {
                igpStatus = other.igpStatus
            }
            if other.hasIgpLastSeen {
                igpLastSeen = other.igpLastSeen
            }
            if other.hasIgpAvatarCount {
                igpAvatarCount = other.igpAvatarCount
            }
            if (other.hasIgpAvatar) {
                try mergeIgpAvatar(value: other.igpAvatar)
            }
            if other.hasIgpMutual {
                igpMutual = other.igpMutual
            }
            if other.hasIgpDeleted {
                igpDeleted = other.igpDeleted
            }
            if other.hasIgpCacheId {
                igpCacheId = other.igpCacheId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRegisteredUser.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRegisteredUser.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    igpId = try codedInputStream.readInt64()

                case 18:
                    igpUsername = try codedInputStream.readString()

                case 24:
                    igpPhone = try codedInputStream.readInt64()

                case 34:
                    igpFirstName = try codedInputStream.readString()

                case 42:
                    igpLastName = try codedInputStream.readString()

                case 50:
                    igpDisplayName = try codedInputStream.readString()

                case 58:
                    igpInitials = try codedInputStream.readString()

                case 66:
                    igpColor = try codedInputStream.readString()

                case 72:
                    let valueIntigpStatus = try codedInputStream.readEnum()
                    if let enumsigpStatus = IGPRegisteredUser.IGPStatus(rawValue:valueIntigpStatus){
                        igpStatus = enumsigpStatus
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 9, value:Int64(valueIntigpStatus))
                    }

                case 80:
                    igpLastSeen = try codedInputStream.readInt32()

                case 88:
                    igpAvatarCount = try codedInputStream.readInt32()

                case 98:
                    let subBuilder:IGPAvatar.Builder = IGPAvatar.Builder()
                    if hasIgpAvatar {
                        try subBuilder.mergeFrom(other: igpAvatar)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpAvatar = subBuilder.buildPartial()

                case 104:
                    igpMutual = try codedInputStream.readBool()

                case 112:
                    igpDeleted = try codedInputStream.readBool()

                case 122:
                    igpCacheId = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRegisteredUser.Builder {
            let resultDecodedBuilder = IGPRegisteredUser.Builder()
            if let jsonValueIgpId = jsonMap["IGPId"] as? String {
                resultDecodedBuilder.igpId = Int64(jsonValueIgpId)!
            } else if let jsonValueIgpId = jsonMap["IGPId"] as? Int {
                resultDecodedBuilder.igpId = Int64(jsonValueIgpId)
            }
            if let jsonValueIgpUsername = jsonMap["IGPUsername"] as? String {
                resultDecodedBuilder.igpUsername = jsonValueIgpUsername
            }
            if let jsonValueIgpPhone = jsonMap["IGPPhone"] as? String {
                resultDecodedBuilder.igpPhone = Int64(jsonValueIgpPhone)!
            } else if let jsonValueIgpPhone = jsonMap["IGPPhone"] as? Int {
                resultDecodedBuilder.igpPhone = Int64(jsonValueIgpPhone)
            }
            if let jsonValueIgpFirstName = jsonMap["IGPFirstName"] as? String {
                resultDecodedBuilder.igpFirstName = jsonValueIgpFirstName
            }
            if let jsonValueIgpLastName = jsonMap["IGPLastName"] as? String {
                resultDecodedBuilder.igpLastName = jsonValueIgpLastName
            }
            if let jsonValueIgpDisplayName = jsonMap["IGPDisplayName"] as? String {
                resultDecodedBuilder.igpDisplayName = jsonValueIgpDisplayName
            }
            if let jsonValueIgpInitials = jsonMap["IGPInitials"] as? String {
                resultDecodedBuilder.igpInitials = jsonValueIgpInitials
            }
            if let jsonValueIgpColor = jsonMap["IGPColor"] as? String {
                resultDecodedBuilder.igpColor = jsonValueIgpColor
            }
            if let jsonValueIgpStatus = jsonMap["IGPStatus"] as? String {
                resultDecodedBuilder.igpStatus = try IGPRegisteredUser.IGPStatus.fromString(str: jsonValueIgpStatus)
            }
            if let jsonValueIgpLastSeen = jsonMap["IGPLastSeen"] as? Int {
                resultDecodedBuilder.igpLastSeen = Int32(jsonValueIgpLastSeen)
            } else if let jsonValueIgpLastSeen = jsonMap["IGPLastSeen"] as? String {
                resultDecodedBuilder.igpLastSeen = Int32(jsonValueIgpLastSeen)!
            }
            if let jsonValueIgpAvatarCount = jsonMap["IGPAvatarCount"] as? Int {
                resultDecodedBuilder.igpAvatarCount = Int32(jsonValueIgpAvatarCount)
            } else if let jsonValueIgpAvatarCount = jsonMap["IGPAvatarCount"] as? String {
                resultDecodedBuilder.igpAvatarCount = Int32(jsonValueIgpAvatarCount)!
            }
            if let jsonValueIgpAvatar = jsonMap["IGPAvatar"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpAvatar = try IGPAvatar.Builder.decodeToBuilder(jsonMap:jsonValueIgpAvatar).build()

            }
            if let jsonValueIgpMutual = jsonMap["IGPMutual"] as? Bool {
                resultDecodedBuilder.igpMutual = jsonValueIgpMutual
            }
            if let jsonValueIgpDeleted = jsonMap["IGPDeleted"] as? Bool {
                resultDecodedBuilder.igpDeleted = jsonValueIgpDeleted
            }
            if let jsonValueIgpCacheId = jsonMap["IGPCacheId"] as? String {
                resultDecodedBuilder.igpCacheId = jsonValueIgpCacheId
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRegisteredUser.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRegisteredUser.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPAvatar : GeneratedMessage {

    public static func == (lhs: IGPAvatar, rhs: IGPAvatar) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpId == rhs.hasIgpId) && (!lhs.hasIgpId || lhs.igpId == rhs.igpId)
        fieldCheck = fieldCheck && (lhs.hasIgpFile == rhs.hasIgpFile) && (!lhs.hasIgpFile || lhs.igpFile == rhs.igpFile)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpId:Bool = false

    public fileprivate(set) var igpFile:IGPFile!
    public fileprivate(set) var hasIgpFile:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:igpId)
        }
        if hasIgpFile {
            try codedOutputStream.writeMessage(fieldNumber: 2, value:igpFile)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpId {
            serialize_size += igpId.computeInt64Size(fieldNumber: 1)
        }
        if hasIgpFile {
            if let varSizeigpFile = igpFile?.computeMessageSize(fieldNumber: 2) {
                serialize_size += varSizeigpFile
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPAvatar.Builder {
        return IGPAvatar.classBuilder() as! IGPAvatar.Builder
    }
    public func getBuilder() -> IGPAvatar.Builder {
        return classBuilder() as! IGPAvatar.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPAvatar.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPAvatar.Builder()
    }
    public func toBuilder() throws -> IGPAvatar.Builder {
        return try IGPAvatar.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPAvatar) throws -> IGPAvatar.Builder {
        return try IGPAvatar.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpId {
            jsonMap["IGPId"] = "\(igpId)"
        }
        if hasIgpFile {
            jsonMap["IGPFile"] = try igpFile.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPAvatar {
        return try IGPAvatar.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPAvatar {
        return try IGPAvatar.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpId {
            output += "\(indent) igpId: \(igpId) \n"
        }
        if hasIgpFile {
            output += "\(indent) igpFile {\n"
            if let outDescIgpFile = igpFile {
                output += try outDescIgpFile.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpId {
                hashCode = (hashCode &* 31) &+ igpId.hashValue
            }
            if hasIgpFile {
                if let hashValueigpFile = igpFile?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpFile
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPAvatar"
    }
    override public func className() -> String {
        return "IGPAvatar"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPAvatar = IGPAvatar()
        public func getMessage() -> IGPAvatar {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpId:Int64 {
            get {
                return builderResult.igpId
            }
            set (value) {
                builderResult.hasIgpId = true
                builderResult.igpId = value
            }
        }
        public var hasIgpId:Bool {
            get {
                return builderResult.hasIgpId
            }
        }
        @discardableResult
        public func setIgpId(_ value:Int64) -> IGPAvatar.Builder {
            self.igpId = value
            return self
        }
        @discardableResult
        public func clearIgpId() -> IGPAvatar.Builder{
            builderResult.hasIgpId = false
            builderResult.igpId = Int64(0)
            return self
        }
        public var igpFile:IGPFile! {
            get {
                if igpFileBuilder_ != nil {
                    builderResult.igpFile = igpFileBuilder_.getMessage()
                }
                return builderResult.igpFile
            }
            set (value) {
                builderResult.hasIgpFile = true
                builderResult.igpFile = value
            }
        }
        public var hasIgpFile:Bool {
            get {
                return builderResult.hasIgpFile
            }
        }
        fileprivate var igpFileBuilder_:IGPFile.Builder! {
            didSet {
                builderResult.hasIgpFile = true
            }
        }
        public func getIgpFileBuilder() -> IGPFile.Builder {
            if igpFileBuilder_ == nil {
                igpFileBuilder_ = IGPFile.Builder()
                builderResult.igpFile = igpFileBuilder_.getMessage()
                if igpFile != nil {
                    try! igpFileBuilder_.mergeFrom(other: igpFile)
                }
            }
            return igpFileBuilder_
        }
        @discardableResult
        public func setIgpFile(_ value:IGPFile!) -> IGPAvatar.Builder {
            self.igpFile = value
            return self
        }
        @discardableResult
        public func mergeIgpFile(value:IGPFile) throws -> IGPAvatar.Builder {
            if builderResult.hasIgpFile {
                builderResult.igpFile = try IGPFile.builderWithPrototype(prototype:builderResult.igpFile).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpFile = value
            }
            builderResult.hasIgpFile = true
            return self
        }
        @discardableResult
        public func clearIgpFile() -> IGPAvatar.Builder {
            igpFileBuilder_ = nil
            builderResult.hasIgpFile = false
            builderResult.igpFile = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPAvatar.Builder {
            builderResult = IGPAvatar()
            return self
        }
        override public func clone() throws -> IGPAvatar.Builder {
            return try IGPAvatar.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPAvatar {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPAvatar {
            let returnMe:IGPAvatar = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPAvatar) throws -> IGPAvatar.Builder {
            if other == IGPAvatar() {
                return self
            }
            if other.hasIgpId {
                igpId = other.igpId
            }
            if (other.hasIgpFile) {
                try mergeIgpFile(value: other.igpFile)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPAvatar.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPAvatar.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    igpId = try codedInputStream.readInt64()

                case 18:
                    let subBuilder:IGPFile.Builder = IGPFile.Builder()
                    if hasIgpFile {
                        try subBuilder.mergeFrom(other: igpFile)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpFile = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPAvatar.Builder {
            let resultDecodedBuilder = IGPAvatar.Builder()
            if let jsonValueIgpId = jsonMap["IGPId"] as? String {
                resultDecodedBuilder.igpId = Int64(jsonValueIgpId)!
            } else if let jsonValueIgpId = jsonMap["IGPId"] as? Int {
                resultDecodedBuilder.igpId = Int64(jsonValueIgpId)
            }
            if let jsonValueIgpFile = jsonMap["IGPFile"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpFile = try IGPFile.Builder.decodeToBuilder(jsonMap:jsonValueIgpFile).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPAvatar.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPAvatar.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPRoomMessage : GeneratedMessage {

    public static func == (lhs: IGPRoomMessage, rhs: IGPRoomMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageId == rhs.hasIgpMessageId) && (!lhs.hasIgpMessageId || lhs.igpMessageId == rhs.igpMessageId)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageVersion == rhs.hasIgpMessageVersion) && (!lhs.hasIgpMessageVersion || lhs.igpMessageVersion == rhs.igpMessageVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpStatus == rhs.hasIgpStatus) && (!lhs.hasIgpStatus || lhs.igpStatus == rhs.igpStatus)
        fieldCheck = fieldCheck && (lhs.hasIgpStatusVersion == rhs.hasIgpStatusVersion) && (!lhs.hasIgpStatusVersion || lhs.igpStatusVersion == rhs.igpStatusVersion)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageType == rhs.hasIgpMessageType) && (!lhs.hasIgpMessageType || lhs.igpMessageType == rhs.igpMessageType)
        fieldCheck = fieldCheck && (lhs.hasIgpMessage == rhs.hasIgpMessage) && (!lhs.hasIgpMessage || lhs.igpMessage == rhs.igpMessage)
        fieldCheck = fieldCheck && (lhs.hasIgpAttachment == rhs.hasIgpAttachment) && (!lhs.hasIgpAttachment || lhs.igpAttachment == rhs.igpAttachment)
        fieldCheck = fieldCheck && (lhs.hasIgpAuthor == rhs.hasIgpAuthor) && (!lhs.hasIgpAuthor || lhs.igpAuthor == rhs.igpAuthor)
        fieldCheck = fieldCheck && (lhs.hasIgpLocation == rhs.hasIgpLocation) && (!lhs.hasIgpLocation || lhs.igpLocation == rhs.igpLocation)
        fieldCheck = fieldCheck && (lhs.hasIgpLog == rhs.hasIgpLog) && (!lhs.hasIgpLog || lhs.igpLog == rhs.igpLog)
        fieldCheck = fieldCheck && (lhs.hasIgpContact == rhs.hasIgpContact) && (!lhs.hasIgpContact || lhs.igpContact == rhs.igpContact)
        fieldCheck = fieldCheck && (lhs.hasIgpEdited == rhs.hasIgpEdited) && (!lhs.hasIgpEdited || lhs.igpEdited == rhs.igpEdited)
        fieldCheck = fieldCheck && (lhs.hasIgpCreateTime == rhs.hasIgpCreateTime) && (!lhs.hasIgpCreateTime || lhs.igpCreateTime == rhs.igpCreateTime)
        fieldCheck = fieldCheck && (lhs.hasIgpUpdateTime == rhs.hasIgpUpdateTime) && (!lhs.hasIgpUpdateTime || lhs.igpUpdateTime == rhs.igpUpdateTime)
        fieldCheck = fieldCheck && (lhs.hasIgpDeleted == rhs.hasIgpDeleted) && (!lhs.hasIgpDeleted || lhs.igpDeleted == rhs.igpDeleted)
        fieldCheck = fieldCheck && (lhs.hasIgpForwardFrom == rhs.hasIgpForwardFrom) && (!lhs.hasIgpForwardFrom || lhs.igpForwardFrom == rhs.igpForwardFrom)
        fieldCheck = fieldCheck && (lhs.hasIgpReplyTo == rhs.hasIgpReplyTo) && (!lhs.hasIgpReplyTo || lhs.igpReplyTo == rhs.igpReplyTo)
        fieldCheck = fieldCheck && (lhs.hasIgpPreviousMessageId == rhs.hasIgpPreviousMessageId) && (!lhs.hasIgpPreviousMessageId || lhs.igpPreviousMessageId == rhs.igpPreviousMessageId)
        fieldCheck = fieldCheck && (lhs.hasIgpExtraType == rhs.hasIgpExtraType) && (!lhs.hasIgpExtraType || lhs.igpExtraType == rhs.igpExtraType)
        fieldCheck = fieldCheck && (lhs.hasIgpChannelExtra == rhs.hasIgpChannelExtra) && (!lhs.hasIgpChannelExtra || lhs.igpChannelExtra == rhs.igpChannelExtra)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPAuthor : GeneratedMessage {

        public static func == (lhs: IGPRoomMessage.IGPAuthor, rhs: IGPRoomMessage.IGPAuthor) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpHash == rhs.hasIgpHash) && (!lhs.hasIgpHash || lhs.igpHash == rhs.igpHash)
            fieldCheck = fieldCheck && (lhs.hasIgpUser == rhs.hasIgpUser) && (!lhs.hasIgpUser || lhs.igpUser == rhs.igpUser)
            fieldCheck = fieldCheck && (lhs.hasIgpRoom == rhs.hasIgpRoom) && (!lhs.hasIgpRoom || lhs.igpRoom == rhs.igpRoom)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        final public class IGPUser : GeneratedMessage {

            public static func == (lhs: IGPRoomMessage.IGPAuthor.IGPUser, rhs: IGPRoomMessage.IGPAuthor.IGPUser) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasIgpUserId == rhs.hasIgpUserId) && (!lhs.hasIgpUserId || lhs.igpUserId == rhs.igpUserId)
                fieldCheck = fieldCheck && (lhs.hasIgpCacheId == rhs.hasIgpCacheId) && (!lhs.hasIgpCacheId || lhs.igpCacheId == rhs.igpCacheId)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }



            //iGap Properties declaration start



            //iGap Properties declaration end

            public fileprivate(set) var igpUserId:Int64 = Int64(0)
            public fileprivate(set) var hasIgpUserId:Bool = false

            public fileprivate(set) var igpCacheId:String = ""
            public fileprivate(set) var hasIgpCacheId:Bool = false

            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasIgpUserId {
                    try codedOutputStream.writeInt64(fieldNumber: 1, value:igpUserId)
                }
                if hasIgpCacheId {
                    try codedOutputStream.writeString(fieldNumber: 2, value:igpCacheId)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if hasIgpUserId {
                    serialize_size += igpUserId.computeInt64Size(fieldNumber: 1)
                }
                if hasIgpCacheId {
                    serialize_size += igpCacheId.computeStringSize(fieldNumber: 2)
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                return IGPRoomMessage.IGPAuthor.IGPUser.classBuilder() as! IGPRoomMessage.IGPAuthor.IGPUser.Builder
            }
            public func getBuilder() -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                return classBuilder() as! IGPRoomMessage.IGPAuthor.IGPUser.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return IGPRoomMessage.IGPAuthor.IGPUser.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return IGPRoomMessage.IGPAuthor.IGPUser.Builder()
            }
            public func toBuilder() throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                return try IGPRoomMessage.IGPAuthor.IGPUser.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:IGPRoomMessage.IGPAuthor.IGPUser) throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasIgpUserId {
                    jsonMap["IGPUserId"] = "\(igpUserId)"
                }
                if hasIgpCacheId {
                    jsonMap["IGPCacheId"] = igpCacheId
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
                return try IGPRoomMessage.IGPAuthor.IGPUser.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
                return try IGPRoomMessage.IGPAuthor.IGPUser.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if hasIgpUserId {
                    output += "\(indent) igpUserId: \(igpUserId) \n"
                }
                if hasIgpCacheId {
                    output += "\(indent) igpCacheId: \(igpCacheId) \n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasIgpUserId {
                        hashCode = (hashCode &* 31) &+ igpUserId.hashValue
                    }
                    if hasIgpCacheId {
                        hashCode = (hashCode &* 31) &+ igpCacheId.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "IGPRoomMessage.IGPAuthor.IGPUser"
            }
            override public func className() -> String {
                return "IGPRoomMessage.IGPAuthor.IGPUser"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:IGPRoomMessage.IGPAuthor.IGPUser = IGPRoomMessage.IGPAuthor.IGPUser()
                public func getMessage() -> IGPRoomMessage.IGPAuthor.IGPUser {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                public var igpUserId:Int64 {
                    get {
                        return builderResult.igpUserId
                    }
                    set (value) {
                        builderResult.hasIgpUserId = true
                        builderResult.igpUserId = value
                    }
                }
                public var hasIgpUserId:Bool {
                    get {
                        return builderResult.hasIgpUserId
                    }
                }
                @discardableResult
                public func setIgpUserId(_ value:Int64) -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    self.igpUserId = value
                    return self
                }
                @discardableResult
                public func clearIgpUserId() -> IGPRoomMessage.IGPAuthor.IGPUser.Builder{
                    builderResult.hasIgpUserId = false
                    builderResult.igpUserId = Int64(0)
                    return self
                }
                public var igpCacheId:String {
                    get {
                        return builderResult.igpCacheId
                    }
                    set (value) {
                        builderResult.hasIgpCacheId = true
                        builderResult.igpCacheId = value
                    }
                }
                public var hasIgpCacheId:Bool {
                    get {
                        return builderResult.hasIgpCacheId
                    }
                }
                @discardableResult
                public func setIgpCacheId(_ value:String) -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    self.igpCacheId = value
                    return self
                }
                @discardableResult
                public func clearIgpCacheId() -> IGPRoomMessage.IGPAuthor.IGPUser.Builder{
                    builderResult.hasIgpCacheId = false
                    builderResult.igpCacheId = ""
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    builderResult = IGPRoomMessage.IGPAuthor.IGPUser()
                    return self
                }
                override public func clone() throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    return try IGPRoomMessage.IGPAuthor.IGPUser.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> IGPRoomMessage.IGPAuthor.IGPUser {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> IGPRoomMessage.IGPAuthor.IGPUser {
                    let returnMe:IGPRoomMessage.IGPAuthor.IGPUser = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:IGPRoomMessage.IGPAuthor.IGPUser) throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    if other == IGPRoomMessage.IGPAuthor.IGPUser() {
                        return self
                    }
                    if other.hasIgpUserId {
                        igpUserId = other.igpUserId
                    }
                    if other.hasIgpCacheId {
                        igpCacheId = other.igpCacheId
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 8:
                            igpUserId = try codedInputStream.readInt64()

                        case 18:
                            igpCacheId = try codedInputStream.readString()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    let resultDecodedBuilder = IGPRoomMessage.IGPAuthor.IGPUser.Builder()
                    if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? String {
                        resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)!
                    } else if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? Int {
                        resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)
                    }
                    if let jsonValueIgpCacheId = jsonMap["IGPCacheId"] as? String {
                        resultDecodedBuilder.igpCacheId = jsonValueIgpCacheId
                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try IGPRoomMessage.IGPAuthor.IGPUser.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end



        //Nested type declaration start

        final public class IGPRoom : GeneratedMessage {

            public static func == (lhs: IGPRoomMessage.IGPAuthor.IGPRoom, rhs: IGPRoomMessage.IGPAuthor.IGPRoom) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }



            //iGap Properties declaration start



            //iGap Properties declaration end

            public fileprivate(set) var igpRoomId:Int64 = Int64(0)
            public fileprivate(set) var hasIgpRoomId:Bool = false

            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasIgpRoomId {
                    try codedOutputStream.writeInt64(fieldNumber: 1, value:igpRoomId)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if hasIgpRoomId {
                    serialize_size += igpRoomId.computeInt64Size(fieldNumber: 1)
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                return IGPRoomMessage.IGPAuthor.IGPRoom.classBuilder() as! IGPRoomMessage.IGPAuthor.IGPRoom.Builder
            }
            public func getBuilder() -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                return classBuilder() as! IGPRoomMessage.IGPAuthor.IGPRoom.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return IGPRoomMessage.IGPAuthor.IGPRoom.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return IGPRoomMessage.IGPAuthor.IGPRoom.Builder()
            }
            public func toBuilder() throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                return try IGPRoomMessage.IGPAuthor.IGPRoom.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:IGPRoomMessage.IGPAuthor.IGPRoom) throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasIgpRoomId {
                    jsonMap["IGPRoomId"] = "\(igpRoomId)"
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
                return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
                return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if hasIgpRoomId {
                    output += "\(indent) igpRoomId: \(igpRoomId) \n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasIgpRoomId {
                        hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "IGPRoomMessage.IGPAuthor.IGPRoom"
            }
            override public func className() -> String {
                return "IGPRoomMessage.IGPAuthor.IGPRoom"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:IGPRoomMessage.IGPAuthor.IGPRoom = IGPRoomMessage.IGPAuthor.IGPRoom()
                public func getMessage() -> IGPRoomMessage.IGPAuthor.IGPRoom {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                public var igpRoomId:Int64 {
                    get {
                        return builderResult.igpRoomId
                    }
                    set (value) {
                        builderResult.hasIgpRoomId = true
                        builderResult.igpRoomId = value
                    }
                }
                public var hasIgpRoomId:Bool {
                    get {
                        return builderResult.hasIgpRoomId
                    }
                }
                @discardableResult
                public func setIgpRoomId(_ value:Int64) -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    self.igpRoomId = value
                    return self
                }
                @discardableResult
                public func clearIgpRoomId() -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder{
                    builderResult.hasIgpRoomId = false
                    builderResult.igpRoomId = Int64(0)
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    builderResult = IGPRoomMessage.IGPAuthor.IGPRoom()
                    return self
                }
                override public func clone() throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    return try IGPRoomMessage.IGPAuthor.IGPRoom.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> IGPRoomMessage.IGPAuthor.IGPRoom {
                    let returnMe:IGPRoomMessage.IGPAuthor.IGPRoom = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:IGPRoomMessage.IGPAuthor.IGPRoom) throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    if other == IGPRoomMessage.IGPAuthor.IGPRoom() {
                        return self
                    }
                    if other.hasIgpRoomId {
                        igpRoomId = other.igpRoomId
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 8:
                            igpRoomId = try codedInputStream.readInt64()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    let resultDecodedBuilder = IGPRoomMessage.IGPAuthor.IGPRoom.Builder()
                    if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                        resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
                    } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                        resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpHash:String = ""
        public fileprivate(set) var hasIgpHash:Bool = false

        public fileprivate(set) var igpUser:IGPRoomMessage.IGPAuthor.IGPUser!
        public fileprivate(set) var hasIgpUser:Bool = false
        public fileprivate(set) var igpRoom:IGPRoomMessage.IGPAuthor.IGPRoom!
        public fileprivate(set) var hasIgpRoom:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpHash {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpHash)
            }
            if hasIgpUser {
                try codedOutputStream.writeMessage(fieldNumber: 2, value:igpUser)
            }
            if hasIgpRoom {
                try codedOutputStream.writeMessage(fieldNumber: 3, value:igpRoom)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpHash {
                serialize_size += igpHash.computeStringSize(fieldNumber: 1)
            }
            if hasIgpUser {
                if let varSizeigpUser = igpUser?.computeMessageSize(fieldNumber: 2) {
                    serialize_size += varSizeigpUser
                }
            }
            if hasIgpRoom {
                if let varSizeigpRoom = igpRoom?.computeMessageSize(fieldNumber: 3) {
                    serialize_size += varSizeigpRoom
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPRoomMessage.IGPAuthor.Builder {
            return IGPRoomMessage.IGPAuthor.classBuilder() as! IGPRoomMessage.IGPAuthor.Builder
        }
        public func getBuilder() -> IGPRoomMessage.IGPAuthor.Builder {
            return classBuilder() as! IGPRoomMessage.IGPAuthor.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPRoomMessage.IGPAuthor.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPRoomMessage.IGPAuthor.Builder()
        }
        public func toBuilder() throws -> IGPRoomMessage.IGPAuthor.Builder {
            return try IGPRoomMessage.IGPAuthor.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPRoomMessage.IGPAuthor) throws -> IGPRoomMessage.IGPAuthor.Builder {
            return try IGPRoomMessage.IGPAuthor.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpHash {
                jsonMap["IGPHash"] = igpHash
            }
            if hasIgpUser {
                jsonMap["IGPUser"] = try igpUser.encode()
            }
            if hasIgpRoom {
                jsonMap["IGPRoom"] = try igpRoom.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPAuthor {
            return try IGPRoomMessage.IGPAuthor.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPRoomMessage.IGPAuthor {
            return try IGPRoomMessage.IGPAuthor.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpHash {
                output += "\(indent) igpHash: \(igpHash) \n"
            }
            if hasIgpUser {
                output += "\(indent) igpUser {\n"
                if let outDescIgpUser = igpUser {
                    output += try outDescIgpUser.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasIgpRoom {
                output += "\(indent) igpRoom {\n"
                if let outDescIgpRoom = igpRoom {
                    output += try outDescIgpRoom.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpHash {
                    hashCode = (hashCode &* 31) &+ igpHash.hashValue
                }
                if hasIgpUser {
                    if let hashValueigpUser = igpUser?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueigpUser
                    }
                }
                if hasIgpRoom {
                    if let hashValueigpRoom = igpRoom?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueigpRoom
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPRoomMessage.IGPAuthor"
        }
        override public func className() -> String {
            return "IGPRoomMessage.IGPAuthor"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPRoomMessage.IGPAuthor = IGPRoomMessage.IGPAuthor()
            public func getMessage() -> IGPRoomMessage.IGPAuthor {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpHash:String {
                get {
                    return builderResult.igpHash
                }
                set (value) {
                    builderResult.hasIgpHash = true
                    builderResult.igpHash = value
                }
            }
            public var hasIgpHash:Bool {
                get {
                    return builderResult.hasIgpHash
                }
            }
            @discardableResult
            public func setIgpHash(_ value:String) -> IGPRoomMessage.IGPAuthor.Builder {
                self.igpHash = value
                return self
            }
            @discardableResult
            public func clearIgpHash() -> IGPRoomMessage.IGPAuthor.Builder{
                builderResult.hasIgpHash = false
                builderResult.igpHash = ""
                return self
            }
            public var igpUser:IGPRoomMessage.IGPAuthor.IGPUser! {
                get {
                    if igpUserBuilder_ != nil {
                        builderResult.igpUser = igpUserBuilder_.getMessage()
                    }
                    return builderResult.igpUser
                }
                set (value) {
                    builderResult.hasIgpUser = true
                    builderResult.igpUser = value
                }
            }
            public var hasIgpUser:Bool {
                get {
                    return builderResult.hasIgpUser
                }
            }
            fileprivate var igpUserBuilder_:IGPRoomMessage.IGPAuthor.IGPUser.Builder! {
                didSet {
                    builderResult.hasIgpUser = true
                }
            }
            public func getIgpUserBuilder() -> IGPRoomMessage.IGPAuthor.IGPUser.Builder {
                if igpUserBuilder_ == nil {
                    igpUserBuilder_ = IGPRoomMessage.IGPAuthor.IGPUser.Builder()
                    builderResult.igpUser = igpUserBuilder_.getMessage()
                    if igpUser != nil {
                        try! igpUserBuilder_.mergeFrom(other: igpUser)
                    }
                }
                return igpUserBuilder_
            }
            @discardableResult
            public func setIgpUser(_ value:IGPRoomMessage.IGPAuthor.IGPUser!) -> IGPRoomMessage.IGPAuthor.Builder {
                self.igpUser = value
                return self
            }
            @discardableResult
            public func mergeIgpUser(value:IGPRoomMessage.IGPAuthor.IGPUser) throws -> IGPRoomMessage.IGPAuthor.Builder {
                if builderResult.hasIgpUser {
                    builderResult.igpUser = try IGPRoomMessage.IGPAuthor.IGPUser.builderWithPrototype(prototype:builderResult.igpUser).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.igpUser = value
                }
                builderResult.hasIgpUser = true
                return self
            }
            @discardableResult
            public func clearIgpUser() -> IGPRoomMessage.IGPAuthor.Builder {
                igpUserBuilder_ = nil
                builderResult.hasIgpUser = false
                builderResult.igpUser = nil
                return self
            }
            public var igpRoom:IGPRoomMessage.IGPAuthor.IGPRoom! {
                get {
                    if igpRoomBuilder_ != nil {
                        builderResult.igpRoom = igpRoomBuilder_.getMessage()
                    }
                    return builderResult.igpRoom
                }
                set (value) {
                    builderResult.hasIgpRoom = true
                    builderResult.igpRoom = value
                }
            }
            public var hasIgpRoom:Bool {
                get {
                    return builderResult.hasIgpRoom
                }
            }
            fileprivate var igpRoomBuilder_:IGPRoomMessage.IGPAuthor.IGPRoom.Builder! {
                didSet {
                    builderResult.hasIgpRoom = true
                }
            }
            public func getIgpRoomBuilder() -> IGPRoomMessage.IGPAuthor.IGPRoom.Builder {
                if igpRoomBuilder_ == nil {
                    igpRoomBuilder_ = IGPRoomMessage.IGPAuthor.IGPRoom.Builder()
                    builderResult.igpRoom = igpRoomBuilder_.getMessage()
                    if igpRoom != nil {
                        try! igpRoomBuilder_.mergeFrom(other: igpRoom)
                    }
                }
                return igpRoomBuilder_
            }
            @discardableResult
            public func setIgpRoom(_ value:IGPRoomMessage.IGPAuthor.IGPRoom!) -> IGPRoomMessage.IGPAuthor.Builder {
                self.igpRoom = value
                return self
            }
            @discardableResult
            public func mergeIgpRoom(value:IGPRoomMessage.IGPAuthor.IGPRoom) throws -> IGPRoomMessage.IGPAuthor.Builder {
                if builderResult.hasIgpRoom {
                    builderResult.igpRoom = try IGPRoomMessage.IGPAuthor.IGPRoom.builderWithPrototype(prototype:builderResult.igpRoom).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.igpRoom = value
                }
                builderResult.hasIgpRoom = true
                return self
            }
            @discardableResult
            public func clearIgpRoom() -> IGPRoomMessage.IGPAuthor.Builder {
                igpRoomBuilder_ = nil
                builderResult.hasIgpRoom = false
                builderResult.igpRoom = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPRoomMessage.IGPAuthor.Builder {
                builderResult = IGPRoomMessage.IGPAuthor()
                return self
            }
            override public func clone() throws -> IGPRoomMessage.IGPAuthor.Builder {
                return try IGPRoomMessage.IGPAuthor.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPRoomMessage.IGPAuthor {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPRoomMessage.IGPAuthor {
                let returnMe:IGPRoomMessage.IGPAuthor = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPRoomMessage.IGPAuthor) throws -> IGPRoomMessage.IGPAuthor.Builder {
                if other == IGPRoomMessage.IGPAuthor() {
                    return self
                }
                if other.hasIgpHash {
                    igpHash = other.igpHash
                }
                if (other.hasIgpUser) {
                    try mergeIgpUser(value: other.igpUser)
                }
                if (other.hasIgpRoom) {
                    try mergeIgpRoom(value: other.igpRoom)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPAuthor.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpHash = try codedInputStream.readString()

                    case 18:
                        let subBuilder:IGPRoomMessage.IGPAuthor.IGPUser.Builder = IGPRoomMessage.IGPAuthor.IGPUser.Builder()
                        if hasIgpUser {
                            try subBuilder.mergeFrom(other: igpUser)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        igpUser = subBuilder.buildPartial()

                    case 26:
                        let subBuilder:IGPRoomMessage.IGPAuthor.IGPRoom.Builder = IGPRoomMessage.IGPAuthor.IGPRoom.Builder()
                        if hasIgpRoom {
                            try subBuilder.mergeFrom(other: igpRoom)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        igpRoom = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPAuthor.Builder {
                let resultDecodedBuilder = IGPRoomMessage.IGPAuthor.Builder()
                if let jsonValueIgpHash = jsonMap["IGPHash"] as? String {
                    resultDecodedBuilder.igpHash = jsonValueIgpHash
                }
                if let jsonValueIgpUser = jsonMap["IGPUser"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.igpUser = try IGPRoomMessage.IGPAuthor.IGPUser.Builder.decodeToBuilder(jsonMap:jsonValueIgpUser).build()

                }
                if let jsonValueIgpRoom = jsonMap["IGPRoom"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.igpRoom = try IGPRoomMessage.IGPAuthor.IGPRoom.Builder.decodeToBuilder(jsonMap:jsonValueIgpRoom).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessage.IGPAuthor.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPRoomMessage.IGPAuthor.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //Nested type declaration start

    final public class IGPChannelExtra : GeneratedMessage {

        public static func == (lhs: IGPRoomMessage.IGPChannelExtra, rhs: IGPRoomMessage.IGPChannelExtra) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpSignature == rhs.hasIgpSignature) && (!lhs.hasIgpSignature || lhs.igpSignature == rhs.igpSignature)
            fieldCheck = fieldCheck && (lhs.hasIgpViewsLabel == rhs.hasIgpViewsLabel) && (!lhs.hasIgpViewsLabel || lhs.igpViewsLabel == rhs.igpViewsLabel)
            fieldCheck = fieldCheck && (lhs.hasIgpThumbsUpLabel == rhs.hasIgpThumbsUpLabel) && (!lhs.hasIgpThumbsUpLabel || lhs.igpThumbsUpLabel == rhs.igpThumbsUpLabel)
            fieldCheck = fieldCheck && (lhs.hasIgpThumbsDownLabel == rhs.hasIgpThumbsDownLabel) && (!lhs.hasIgpThumbsDownLabel || lhs.igpThumbsDownLabel == rhs.igpThumbsDownLabel)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpSignature:String = ""
        public fileprivate(set) var hasIgpSignature:Bool = false

        public fileprivate(set) var igpViewsLabel:String = ""
        public fileprivate(set) var hasIgpViewsLabel:Bool = false

        public fileprivate(set) var igpThumbsUpLabel:String = ""
        public fileprivate(set) var hasIgpThumbsUpLabel:Bool = false

        public fileprivate(set) var igpThumbsDownLabel:String = ""
        public fileprivate(set) var hasIgpThumbsDownLabel:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpSignature {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpSignature)
            }
            if hasIgpViewsLabel {
                try codedOutputStream.writeString(fieldNumber: 2, value:igpViewsLabel)
            }
            if hasIgpThumbsUpLabel {
                try codedOutputStream.writeString(fieldNumber: 3, value:igpThumbsUpLabel)
            }
            if hasIgpThumbsDownLabel {
                try codedOutputStream.writeString(fieldNumber: 4, value:igpThumbsDownLabel)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpSignature {
                serialize_size += igpSignature.computeStringSize(fieldNumber: 1)
            }
            if hasIgpViewsLabel {
                serialize_size += igpViewsLabel.computeStringSize(fieldNumber: 2)
            }
            if hasIgpThumbsUpLabel {
                serialize_size += igpThumbsUpLabel.computeStringSize(fieldNumber: 3)
            }
            if hasIgpThumbsDownLabel {
                serialize_size += igpThumbsDownLabel.computeStringSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPRoomMessage.IGPChannelExtra.Builder {
            return IGPRoomMessage.IGPChannelExtra.classBuilder() as! IGPRoomMessage.IGPChannelExtra.Builder
        }
        public func getBuilder() -> IGPRoomMessage.IGPChannelExtra.Builder {
            return classBuilder() as! IGPRoomMessage.IGPChannelExtra.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPRoomMessage.IGPChannelExtra.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPRoomMessage.IGPChannelExtra.Builder()
        }
        public func toBuilder() throws -> IGPRoomMessage.IGPChannelExtra.Builder {
            return try IGPRoomMessage.IGPChannelExtra.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPRoomMessage.IGPChannelExtra) throws -> IGPRoomMessage.IGPChannelExtra.Builder {
            return try IGPRoomMessage.IGPChannelExtra.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpSignature {
                jsonMap["IGPSignature"] = igpSignature
            }
            if hasIgpViewsLabel {
                jsonMap["IGPViewsLabel"] = igpViewsLabel
            }
            if hasIgpThumbsUpLabel {
                jsonMap["IGPThumbsUpLabel"] = igpThumbsUpLabel
            }
            if hasIgpThumbsDownLabel {
                jsonMap["IGPThumbsDownLabel"] = igpThumbsDownLabel
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPChannelExtra {
            return try IGPRoomMessage.IGPChannelExtra.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPRoomMessage.IGPChannelExtra {
            return try IGPRoomMessage.IGPChannelExtra.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpSignature {
                output += "\(indent) igpSignature: \(igpSignature) \n"
            }
            if hasIgpViewsLabel {
                output += "\(indent) igpViewsLabel: \(igpViewsLabel) \n"
            }
            if hasIgpThumbsUpLabel {
                output += "\(indent) igpThumbsUpLabel: \(igpThumbsUpLabel) \n"
            }
            if hasIgpThumbsDownLabel {
                output += "\(indent) igpThumbsDownLabel: \(igpThumbsDownLabel) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpSignature {
                    hashCode = (hashCode &* 31) &+ igpSignature.hashValue
                }
                if hasIgpViewsLabel {
                    hashCode = (hashCode &* 31) &+ igpViewsLabel.hashValue
                }
                if hasIgpThumbsUpLabel {
                    hashCode = (hashCode &* 31) &+ igpThumbsUpLabel.hashValue
                }
                if hasIgpThumbsDownLabel {
                    hashCode = (hashCode &* 31) &+ igpThumbsDownLabel.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPRoomMessage.IGPChannelExtra"
        }
        override public func className() -> String {
            return "IGPRoomMessage.IGPChannelExtra"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPRoomMessage.IGPChannelExtra = IGPRoomMessage.IGPChannelExtra()
            public func getMessage() -> IGPRoomMessage.IGPChannelExtra {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpSignature:String {
                get {
                    return builderResult.igpSignature
                }
                set (value) {
                    builderResult.hasIgpSignature = true
                    builderResult.igpSignature = value
                }
            }
            public var hasIgpSignature:Bool {
                get {
                    return builderResult.hasIgpSignature
                }
            }
            @discardableResult
            public func setIgpSignature(_ value:String) -> IGPRoomMessage.IGPChannelExtra.Builder {
                self.igpSignature = value
                return self
            }
            @discardableResult
            public func clearIgpSignature() -> IGPRoomMessage.IGPChannelExtra.Builder{
                builderResult.hasIgpSignature = false
                builderResult.igpSignature = ""
                return self
            }
            public var igpViewsLabel:String {
                get {
                    return builderResult.igpViewsLabel
                }
                set (value) {
                    builderResult.hasIgpViewsLabel = true
                    builderResult.igpViewsLabel = value
                }
            }
            public var hasIgpViewsLabel:Bool {
                get {
                    return builderResult.hasIgpViewsLabel
                }
            }
            @discardableResult
            public func setIgpViewsLabel(_ value:String) -> IGPRoomMessage.IGPChannelExtra.Builder {
                self.igpViewsLabel = value
                return self
            }
            @discardableResult
            public func clearIgpViewsLabel() -> IGPRoomMessage.IGPChannelExtra.Builder{
                builderResult.hasIgpViewsLabel = false
                builderResult.igpViewsLabel = ""
                return self
            }
            public var igpThumbsUpLabel:String {
                get {
                    return builderResult.igpThumbsUpLabel
                }
                set (value) {
                    builderResult.hasIgpThumbsUpLabel = true
                    builderResult.igpThumbsUpLabel = value
                }
            }
            public var hasIgpThumbsUpLabel:Bool {
                get {
                    return builderResult.hasIgpThumbsUpLabel
                }
            }
            @discardableResult
            public func setIgpThumbsUpLabel(_ value:String) -> IGPRoomMessage.IGPChannelExtra.Builder {
                self.igpThumbsUpLabel = value
                return self
            }
            @discardableResult
            public func clearIgpThumbsUpLabel() -> IGPRoomMessage.IGPChannelExtra.Builder{
                builderResult.hasIgpThumbsUpLabel = false
                builderResult.igpThumbsUpLabel = ""
                return self
            }
            public var igpThumbsDownLabel:String {
                get {
                    return builderResult.igpThumbsDownLabel
                }
                set (value) {
                    builderResult.hasIgpThumbsDownLabel = true
                    builderResult.igpThumbsDownLabel = value
                }
            }
            public var hasIgpThumbsDownLabel:Bool {
                get {
                    return builderResult.hasIgpThumbsDownLabel
                }
            }
            @discardableResult
            public func setIgpThumbsDownLabel(_ value:String) -> IGPRoomMessage.IGPChannelExtra.Builder {
                self.igpThumbsDownLabel = value
                return self
            }
            @discardableResult
            public func clearIgpThumbsDownLabel() -> IGPRoomMessage.IGPChannelExtra.Builder{
                builderResult.hasIgpThumbsDownLabel = false
                builderResult.igpThumbsDownLabel = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPRoomMessage.IGPChannelExtra.Builder {
                builderResult = IGPRoomMessage.IGPChannelExtra()
                return self
            }
            override public func clone() throws -> IGPRoomMessage.IGPChannelExtra.Builder {
                return try IGPRoomMessage.IGPChannelExtra.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPRoomMessage.IGPChannelExtra {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPRoomMessage.IGPChannelExtra {
                let returnMe:IGPRoomMessage.IGPChannelExtra = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPRoomMessage.IGPChannelExtra) throws -> IGPRoomMessage.IGPChannelExtra.Builder {
                if other == IGPRoomMessage.IGPChannelExtra() {
                    return self
                }
                if other.hasIgpSignature {
                    igpSignature = other.igpSignature
                }
                if other.hasIgpViewsLabel {
                    igpViewsLabel = other.igpViewsLabel
                }
                if other.hasIgpThumbsUpLabel {
                    igpThumbsUpLabel = other.igpThumbsUpLabel
                }
                if other.hasIgpThumbsDownLabel {
                    igpThumbsDownLabel = other.igpThumbsDownLabel
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPChannelExtra.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPChannelExtra.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpSignature = try codedInputStream.readString()

                    case 18:
                        igpViewsLabel = try codedInputStream.readString()

                    case 26:
                        igpThumbsUpLabel = try codedInputStream.readString()

                    case 34:
                        igpThumbsDownLabel = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.IGPChannelExtra.Builder {
                let resultDecodedBuilder = IGPRoomMessage.IGPChannelExtra.Builder()
                if let jsonValueIgpSignature = jsonMap["IGPSignature"] as? String {
                    resultDecodedBuilder.igpSignature = jsonValueIgpSignature
                }
                if let jsonValueIgpViewsLabel = jsonMap["IGPViewsLabel"] as? String {
                    resultDecodedBuilder.igpViewsLabel = jsonValueIgpViewsLabel
                }
                if let jsonValueIgpThumbsUpLabel = jsonMap["IGPThumbsUpLabel"] as? String {
                    resultDecodedBuilder.igpThumbsUpLabel = jsonValueIgpThumbsUpLabel
                }
                if let jsonValueIgpThumbsDownLabel = jsonMap["IGPThumbsDownLabel"] as? String {
                    resultDecodedBuilder.igpThumbsDownLabel = jsonValueIgpThumbsDownLabel
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessage.IGPChannelExtra.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPRoomMessage.IGPChannelExtra.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPExtraType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case noExtra = 0
            case channelExtra = 1
            public func toString() -> String {
                switch self {
                case .noExtra: return "NO_EXTRA"
                case .channelExtra: return "CHANNEL_EXTRA"
                }
            }
            public static func fromString(str:String) throws -> IGPRoomMessage.IGPExtraType {
                switch str {
                case "NO_EXTRA":    return .noExtra
                case "CHANNEL_EXTRA":    return .channelExtra
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .noExtra: return ".noExtra"
                case .channelExtra: return ".channelExtra"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPExtraType, rhs:IGPExtraType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpMessageId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpMessageId:Bool = false

    public fileprivate(set) var igpMessageVersion:Int64 = Int64(0)
    public fileprivate(set) var hasIgpMessageVersion:Bool = false

    public fileprivate(set) var igpStatus:IGPRoomMessageStatus = IGPRoomMessageStatus.failed
    public fileprivate(set) var hasIgpStatus:Bool = false
    public fileprivate(set) var igpStatusVersion:Int64 = Int64(0)
    public fileprivate(set) var hasIgpStatusVersion:Bool = false

    public fileprivate(set) var igpMessageType:IGPRoomMessageType = IGPRoomMessageType.text
    public fileprivate(set) var hasIgpMessageType:Bool = false
    public fileprivate(set) var igpMessage:String = ""
    public fileprivate(set) var hasIgpMessage:Bool = false

    public fileprivate(set) var igpAttachment:IGPFile!
    public fileprivate(set) var hasIgpAttachment:Bool = false
    public fileprivate(set) var igpAuthor:IGPRoomMessage.IGPAuthor!
    public fileprivate(set) var hasIgpAuthor:Bool = false
    public fileprivate(set) var igpLocation:IGPRoomMessageLocation!
    public fileprivate(set) var hasIgpLocation:Bool = false
    public fileprivate(set) var igpLog:IGPRoomMessageLog!
    public fileprivate(set) var hasIgpLog:Bool = false
    public fileprivate(set) var igpContact:IGPRoomMessageContact!
    public fileprivate(set) var hasIgpContact:Bool = false
    public fileprivate(set) var igpEdited:Bool = false
    public fileprivate(set) var hasIgpEdited:Bool = false

    public fileprivate(set) var igpCreateTime:Int32 = Int32(0)
    public fileprivate(set) var hasIgpCreateTime:Bool = false

    public fileprivate(set) var igpUpdateTime:Int32 = Int32(0)
    public fileprivate(set) var hasIgpUpdateTime:Bool = false

    public fileprivate(set) var igpDeleted:Bool = false
    public fileprivate(set) var hasIgpDeleted:Bool = false

    public fileprivate(set) var igpForwardFrom:IGPRoomMessage!
    public fileprivate(set) var hasIgpForwardFrom:Bool = false
    public fileprivate(set) var igpReplyTo:IGPRoomMessage!
    public fileprivate(set) var hasIgpReplyTo:Bool = false
    public fileprivate(set) var igpPreviousMessageId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpPreviousMessageId:Bool = false

    public fileprivate(set) var igpExtraType:IGPRoomMessage.IGPExtraType = IGPRoomMessage.IGPExtraType.noExtra
    public fileprivate(set) var hasIgpExtraType:Bool = false
    public fileprivate(set) var igpChannelExtra:IGPRoomMessage.IGPChannelExtra!
    public fileprivate(set) var hasIgpChannelExtra:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpMessageId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:igpMessageId)
        }
        if hasIgpMessageVersion {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpMessageVersion)
        }
        if hasIgpStatus {
            try codedOutputStream.writeEnum(fieldNumber: 3, value:igpStatus.rawValue)
        }
        if hasIgpStatusVersion {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:igpStatusVersion)
        }
        if hasIgpMessageType {
            try codedOutputStream.writeEnum(fieldNumber: 5, value:igpMessageType.rawValue)
        }
        if hasIgpMessage {
            try codedOutputStream.writeString(fieldNumber: 6, value:igpMessage)
        }
        if hasIgpAttachment {
            try codedOutputStream.writeMessage(fieldNumber: 7, value:igpAttachment)
        }
        if hasIgpAuthor {
            try codedOutputStream.writeMessage(fieldNumber: 8, value:igpAuthor)
        }
        if hasIgpLocation {
            try codedOutputStream.writeMessage(fieldNumber: 9, value:igpLocation)
        }
        if hasIgpLog {
            try codedOutputStream.writeMessage(fieldNumber: 10, value:igpLog)
        }
        if hasIgpContact {
            try codedOutputStream.writeMessage(fieldNumber: 11, value:igpContact)
        }
        if hasIgpEdited {
            try codedOutputStream.writeBool(fieldNumber: 12, value:igpEdited)
        }
        if hasIgpCreateTime {
            try codedOutputStream.writeInt32(fieldNumber: 13, value:igpCreateTime)
        }
        if hasIgpUpdateTime {
            try codedOutputStream.writeInt32(fieldNumber: 14, value:igpUpdateTime)
        }
        if hasIgpDeleted {
            try codedOutputStream.writeBool(fieldNumber: 15, value:igpDeleted)
        }
        if hasIgpForwardFrom {
            try codedOutputStream.writeMessage(fieldNumber: 16, value:igpForwardFrom)
        }
        if hasIgpReplyTo {
            try codedOutputStream.writeMessage(fieldNumber: 17, value:igpReplyTo)
        }
        if hasIgpPreviousMessageId {
            try codedOutputStream.writeInt64(fieldNumber: 18, value:igpPreviousMessageId)
        }
        if hasIgpExtraType {
            try codedOutputStream.writeEnum(fieldNumber: 19, value:igpExtraType.rawValue)
        }
        if hasIgpChannelExtra {
            try codedOutputStream.writeMessage(fieldNumber: 20, value:igpChannelExtra)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpMessageId {
            serialize_size += igpMessageId.computeInt64Size(fieldNumber: 1)
        }
        if hasIgpMessageVersion {
            serialize_size += igpMessageVersion.computeInt64Size(fieldNumber: 2)
        }
        if (hasIgpStatus) {
            serialize_size += igpStatus.rawValue.computeEnumSize(fieldNumber: 3)
        }
        if hasIgpStatusVersion {
            serialize_size += igpStatusVersion.computeInt64Size(fieldNumber: 4)
        }
        if (hasIgpMessageType) {
            serialize_size += igpMessageType.rawValue.computeEnumSize(fieldNumber: 5)
        }
        if hasIgpMessage {
            serialize_size += igpMessage.computeStringSize(fieldNumber: 6)
        }
        if hasIgpAttachment {
            if let varSizeigpAttachment = igpAttachment?.computeMessageSize(fieldNumber: 7) {
                serialize_size += varSizeigpAttachment
            }
        }
        if hasIgpAuthor {
            if let varSizeigpAuthor = igpAuthor?.computeMessageSize(fieldNumber: 8) {
                serialize_size += varSizeigpAuthor
            }
        }
        if hasIgpLocation {
            if let varSizeigpLocation = igpLocation?.computeMessageSize(fieldNumber: 9) {
                serialize_size += varSizeigpLocation
            }
        }
        if hasIgpLog {
            if let varSizeigpLog = igpLog?.computeMessageSize(fieldNumber: 10) {
                serialize_size += varSizeigpLog
            }
        }
        if hasIgpContact {
            if let varSizeigpContact = igpContact?.computeMessageSize(fieldNumber: 11) {
                serialize_size += varSizeigpContact
            }
        }
        if hasIgpEdited {
            serialize_size += igpEdited.computeBoolSize(fieldNumber: 12)
        }
        if hasIgpCreateTime {
            serialize_size += igpCreateTime.computeInt32Size(fieldNumber: 13)
        }
        if hasIgpUpdateTime {
            serialize_size += igpUpdateTime.computeInt32Size(fieldNumber: 14)
        }
        if hasIgpDeleted {
            serialize_size += igpDeleted.computeBoolSize(fieldNumber: 15)
        }
        if hasIgpForwardFrom {
            if let varSizeigpForwardFrom = igpForwardFrom?.computeMessageSize(fieldNumber: 16) {
                serialize_size += varSizeigpForwardFrom
            }
        }
        if hasIgpReplyTo {
            if let varSizeigpReplyTo = igpReplyTo?.computeMessageSize(fieldNumber: 17) {
                serialize_size += varSizeigpReplyTo
            }
        }
        if hasIgpPreviousMessageId {
            serialize_size += igpPreviousMessageId.computeInt64Size(fieldNumber: 18)
        }
        if (hasIgpExtraType) {
            serialize_size += igpExtraType.rawValue.computeEnumSize(fieldNumber: 19)
        }
        if hasIgpChannelExtra {
            if let varSizeigpChannelExtra = igpChannelExtra?.computeMessageSize(fieldNumber: 20) {
                serialize_size += varSizeigpChannelExtra
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRoomMessage.Builder {
        return IGPRoomMessage.classBuilder() as! IGPRoomMessage.Builder
    }
    public func getBuilder() -> IGPRoomMessage.Builder {
        return classBuilder() as! IGPRoomMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomMessage.Builder()
    }
    public func toBuilder() throws -> IGPRoomMessage.Builder {
        return try IGPRoomMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRoomMessage) throws -> IGPRoomMessage.Builder {
        return try IGPRoomMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpMessageId {
            jsonMap["IGPMessageId"] = "\(igpMessageId)"
        }
        if hasIgpMessageVersion {
            jsonMap["IGPMessageVersion"] = "\(igpMessageVersion)"
        }
        if hasIgpStatus {
            jsonMap["IGPStatus"] = igpStatus.toString()
        }
        if hasIgpStatusVersion {
            jsonMap["IGPStatusVersion"] = "\(igpStatusVersion)"
        }
        if hasIgpMessageType {
            jsonMap["IGPMessageType"] = igpMessageType.toString()
        }
        if hasIgpMessage {
            jsonMap["IGPMessage"] = igpMessage
        }
        if hasIgpAttachment {
            jsonMap["IGPAttachment"] = try igpAttachment.encode()
        }
        if hasIgpAuthor {
            jsonMap["IGPAuthor"] = try igpAuthor.encode()
        }
        if hasIgpLocation {
            jsonMap["IGPLocation"] = try igpLocation.encode()
        }
        if hasIgpLog {
            jsonMap["IGPLog"] = try igpLog.encode()
        }
        if hasIgpContact {
            jsonMap["IGPContact"] = try igpContact.encode()
        }
        if hasIgpEdited {
            jsonMap["IGPEdited"] = igpEdited
        }
        if hasIgpCreateTime {
            jsonMap["IGPCreateTime"] = Int(igpCreateTime)
        }
        if hasIgpUpdateTime {
            jsonMap["IGPUpdateTime"] = Int(igpUpdateTime)
        }
        if hasIgpDeleted {
            jsonMap["IGPDeleted"] = igpDeleted
        }
        if hasIgpForwardFrom {
            jsonMap["IGPForwardFrom"] = try igpForwardFrom.encode()
        }
        if hasIgpReplyTo {
            jsonMap["IGPReplyTo"] = try igpReplyTo.encode()
        }
        if hasIgpPreviousMessageId {
            jsonMap["IGPPreviousMessageId"] = "\(igpPreviousMessageId)"
        }
        if hasIgpExtraType {
            jsonMap["IGPExtraType"] = igpExtraType.toString()
        }
        if hasIgpChannelExtra {
            jsonMap["IGPChannelExtra"] = try igpChannelExtra.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpMessageId {
            output += "\(indent) igpMessageId: \(igpMessageId) \n"
        }
        if hasIgpMessageVersion {
            output += "\(indent) igpMessageVersion: \(igpMessageVersion) \n"
        }
        if (hasIgpStatus) {
            output += "\(indent) igpStatus: \(igpStatus.description)\n"
        }
        if hasIgpStatusVersion {
            output += "\(indent) igpStatusVersion: \(igpStatusVersion) \n"
        }
        if (hasIgpMessageType) {
            output += "\(indent) igpMessageType: \(igpMessageType.description)\n"
        }
        if hasIgpMessage {
            output += "\(indent) igpMessage: \(igpMessage) \n"
        }
        if hasIgpAttachment {
            output += "\(indent) igpAttachment {\n"
            if let outDescIgpAttachment = igpAttachment {
                output += try outDescIgpAttachment.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpAuthor {
            output += "\(indent) igpAuthor {\n"
            if let outDescIgpAuthor = igpAuthor {
                output += try outDescIgpAuthor.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpLocation {
            output += "\(indent) igpLocation {\n"
            if let outDescIgpLocation = igpLocation {
                output += try outDescIgpLocation.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpLog {
            output += "\(indent) igpLog {\n"
            if let outDescIgpLog = igpLog {
                output += try outDescIgpLog.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpContact {
            output += "\(indent) igpContact {\n"
            if let outDescIgpContact = igpContact {
                output += try outDescIgpContact.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpEdited {
            output += "\(indent) igpEdited: \(igpEdited) \n"
        }
        if hasIgpCreateTime {
            output += "\(indent) igpCreateTime: \(igpCreateTime) \n"
        }
        if hasIgpUpdateTime {
            output += "\(indent) igpUpdateTime: \(igpUpdateTime) \n"
        }
        if hasIgpDeleted {
            output += "\(indent) igpDeleted: \(igpDeleted) \n"
        }
        if hasIgpForwardFrom {
            output += "\(indent) igpForwardFrom {\n"
            if let outDescIgpForwardFrom = igpForwardFrom {
                output += try outDescIgpForwardFrom.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpReplyTo {
            output += "\(indent) igpReplyTo {\n"
            if let outDescIgpReplyTo = igpReplyTo {
                output += try outDescIgpReplyTo.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPreviousMessageId {
            output += "\(indent) igpPreviousMessageId: \(igpPreviousMessageId) \n"
        }
        if (hasIgpExtraType) {
            output += "\(indent) igpExtraType: \(igpExtraType.description)\n"
        }
        if hasIgpChannelExtra {
            output += "\(indent) igpChannelExtra {\n"
            if let outDescIgpChannelExtra = igpChannelExtra {
                output += try outDescIgpChannelExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpMessageId {
                hashCode = (hashCode &* 31) &+ igpMessageId.hashValue
            }
            if hasIgpMessageVersion {
                hashCode = (hashCode &* 31) &+ igpMessageVersion.hashValue
            }
            if hasIgpStatus {
                 hashCode = (hashCode &* 31) &+ igpStatus.hashValue
            }
            if hasIgpStatusVersion {
                hashCode = (hashCode &* 31) &+ igpStatusVersion.hashValue
            }
            if hasIgpMessageType {
                 hashCode = (hashCode &* 31) &+ igpMessageType.hashValue
            }
            if hasIgpMessage {
                hashCode = (hashCode &* 31) &+ igpMessage.hashValue
            }
            if hasIgpAttachment {
                if let hashValueigpAttachment = igpAttachment?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpAttachment
                }
            }
            if hasIgpAuthor {
                if let hashValueigpAuthor = igpAuthor?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpAuthor
                }
            }
            if hasIgpLocation {
                if let hashValueigpLocation = igpLocation?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpLocation
                }
            }
            if hasIgpLog {
                if let hashValueigpLog = igpLog?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpLog
                }
            }
            if hasIgpContact {
                if let hashValueigpContact = igpContact?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpContact
                }
            }
            if hasIgpEdited {
                hashCode = (hashCode &* 31) &+ igpEdited.hashValue
            }
            if hasIgpCreateTime {
                hashCode = (hashCode &* 31) &+ igpCreateTime.hashValue
            }
            if hasIgpUpdateTime {
                hashCode = (hashCode &* 31) &+ igpUpdateTime.hashValue
            }
            if hasIgpDeleted {
                hashCode = (hashCode &* 31) &+ igpDeleted.hashValue
            }
            if hasIgpForwardFrom {
                if let hashValueigpForwardFrom = igpForwardFrom?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpForwardFrom
                }
            }
            if hasIgpReplyTo {
                if let hashValueigpReplyTo = igpReplyTo?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpReplyTo
                }
            }
            if hasIgpPreviousMessageId {
                hashCode = (hashCode &* 31) &+ igpPreviousMessageId.hashValue
            }
            if hasIgpExtraType {
                 hashCode = (hashCode &* 31) &+ igpExtraType.hashValue
            }
            if hasIgpChannelExtra {
                if let hashValueigpChannelExtra = igpChannelExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpChannelExtra
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRoomMessage"
    }
    override public func className() -> String {
        return "IGPRoomMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRoomMessage = IGPRoomMessage()
        public func getMessage() -> IGPRoomMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpMessageId:Int64 {
            get {
                return builderResult.igpMessageId
            }
            set (value) {
                builderResult.hasIgpMessageId = true
                builderResult.igpMessageId = value
            }
        }
        public var hasIgpMessageId:Bool {
            get {
                return builderResult.hasIgpMessageId
            }
        }
        @discardableResult
        public func setIgpMessageId(_ value:Int64) -> IGPRoomMessage.Builder {
            self.igpMessageId = value
            return self
        }
        @discardableResult
        public func clearIgpMessageId() -> IGPRoomMessage.Builder{
            builderResult.hasIgpMessageId = false
            builderResult.igpMessageId = Int64(0)
            return self
        }
        public var igpMessageVersion:Int64 {
            get {
                return builderResult.igpMessageVersion
            }
            set (value) {
                builderResult.hasIgpMessageVersion = true
                builderResult.igpMessageVersion = value
            }
        }
        public var hasIgpMessageVersion:Bool {
            get {
                return builderResult.hasIgpMessageVersion
            }
        }
        @discardableResult
        public func setIgpMessageVersion(_ value:Int64) -> IGPRoomMessage.Builder {
            self.igpMessageVersion = value
            return self
        }
        @discardableResult
        public func clearIgpMessageVersion() -> IGPRoomMessage.Builder{
            builderResult.hasIgpMessageVersion = false
            builderResult.igpMessageVersion = Int64(0)
            return self
        }
            public var igpStatus:IGPRoomMessageStatus {
                get {
                    return builderResult.igpStatus
                }
                set (value) {
                    builderResult.hasIgpStatus = true
                    builderResult.igpStatus = value
                }
            }
            public var hasIgpStatus:Bool{
                get {
                    return builderResult.hasIgpStatus
                }
            }
        @discardableResult
            public func setIgpStatus(_ value:IGPRoomMessageStatus) -> IGPRoomMessage.Builder {
              self.igpStatus = value
              return self
            }
        @discardableResult
            public func clearIgpStatus() -> IGPRoomMessage.Builder {
               builderResult.hasIgpStatus = false
               builderResult.igpStatus = .failed
               return self
            }
        public var igpStatusVersion:Int64 {
            get {
                return builderResult.igpStatusVersion
            }
            set (value) {
                builderResult.hasIgpStatusVersion = true
                builderResult.igpStatusVersion = value
            }
        }
        public var hasIgpStatusVersion:Bool {
            get {
                return builderResult.hasIgpStatusVersion
            }
        }
        @discardableResult
        public func setIgpStatusVersion(_ value:Int64) -> IGPRoomMessage.Builder {
            self.igpStatusVersion = value
            return self
        }
        @discardableResult
        public func clearIgpStatusVersion() -> IGPRoomMessage.Builder{
            builderResult.hasIgpStatusVersion = false
            builderResult.igpStatusVersion = Int64(0)
            return self
        }
            public var igpMessageType:IGPRoomMessageType {
                get {
                    return builderResult.igpMessageType
                }
                set (value) {
                    builderResult.hasIgpMessageType = true
                    builderResult.igpMessageType = value
                }
            }
            public var hasIgpMessageType:Bool{
                get {
                    return builderResult.hasIgpMessageType
                }
            }
        @discardableResult
            public func setIgpMessageType(_ value:IGPRoomMessageType) -> IGPRoomMessage.Builder {
              self.igpMessageType = value
              return self
            }
        @discardableResult
            public func clearIgpMessageType() -> IGPRoomMessage.Builder {
               builderResult.hasIgpMessageType = false
               builderResult.igpMessageType = .text
               return self
            }
        public var igpMessage:String {
            get {
                return builderResult.igpMessage
            }
            set (value) {
                builderResult.hasIgpMessage = true
                builderResult.igpMessage = value
            }
        }
        public var hasIgpMessage:Bool {
            get {
                return builderResult.hasIgpMessage
            }
        }
        @discardableResult
        public func setIgpMessage(_ value:String) -> IGPRoomMessage.Builder {
            self.igpMessage = value
            return self
        }
        @discardableResult
        public func clearIgpMessage() -> IGPRoomMessage.Builder{
            builderResult.hasIgpMessage = false
            builderResult.igpMessage = ""
            return self
        }
        public var igpAttachment:IGPFile! {
            get {
                if igpAttachmentBuilder_ != nil {
                    builderResult.igpAttachment = igpAttachmentBuilder_.getMessage()
                }
                return builderResult.igpAttachment
            }
            set (value) {
                builderResult.hasIgpAttachment = true
                builderResult.igpAttachment = value
            }
        }
        public var hasIgpAttachment:Bool {
            get {
                return builderResult.hasIgpAttachment
            }
        }
        fileprivate var igpAttachmentBuilder_:IGPFile.Builder! {
            didSet {
                builderResult.hasIgpAttachment = true
            }
        }
        public func getIgpAttachmentBuilder() -> IGPFile.Builder {
            if igpAttachmentBuilder_ == nil {
                igpAttachmentBuilder_ = IGPFile.Builder()
                builderResult.igpAttachment = igpAttachmentBuilder_.getMessage()
                if igpAttachment != nil {
                    try! igpAttachmentBuilder_.mergeFrom(other: igpAttachment)
                }
            }
            return igpAttachmentBuilder_
        }
        @discardableResult
        public func setIgpAttachment(_ value:IGPFile!) -> IGPRoomMessage.Builder {
            self.igpAttachment = value
            return self
        }
        @discardableResult
        public func mergeIgpAttachment(value:IGPFile) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpAttachment {
                builderResult.igpAttachment = try IGPFile.builderWithPrototype(prototype:builderResult.igpAttachment).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpAttachment = value
            }
            builderResult.hasIgpAttachment = true
            return self
        }
        @discardableResult
        public func clearIgpAttachment() -> IGPRoomMessage.Builder {
            igpAttachmentBuilder_ = nil
            builderResult.hasIgpAttachment = false
            builderResult.igpAttachment = nil
            return self
        }
        public var igpAuthor:IGPRoomMessage.IGPAuthor! {
            get {
                if igpAuthorBuilder_ != nil {
                    builderResult.igpAuthor = igpAuthorBuilder_.getMessage()
                }
                return builderResult.igpAuthor
            }
            set (value) {
                builderResult.hasIgpAuthor = true
                builderResult.igpAuthor = value
            }
        }
        public var hasIgpAuthor:Bool {
            get {
                return builderResult.hasIgpAuthor
            }
        }
        fileprivate var igpAuthorBuilder_:IGPRoomMessage.IGPAuthor.Builder! {
            didSet {
                builderResult.hasIgpAuthor = true
            }
        }
        public func getIgpAuthorBuilder() -> IGPRoomMessage.IGPAuthor.Builder {
            if igpAuthorBuilder_ == nil {
                igpAuthorBuilder_ = IGPRoomMessage.IGPAuthor.Builder()
                builderResult.igpAuthor = igpAuthorBuilder_.getMessage()
                if igpAuthor != nil {
                    try! igpAuthorBuilder_.mergeFrom(other: igpAuthor)
                }
            }
            return igpAuthorBuilder_
        }
        @discardableResult
        public func setIgpAuthor(_ value:IGPRoomMessage.IGPAuthor!) -> IGPRoomMessage.Builder {
            self.igpAuthor = value
            return self
        }
        @discardableResult
        public func mergeIgpAuthor(value:IGPRoomMessage.IGPAuthor) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpAuthor {
                builderResult.igpAuthor = try IGPRoomMessage.IGPAuthor.builderWithPrototype(prototype:builderResult.igpAuthor).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpAuthor = value
            }
            builderResult.hasIgpAuthor = true
            return self
        }
        @discardableResult
        public func clearIgpAuthor() -> IGPRoomMessage.Builder {
            igpAuthorBuilder_ = nil
            builderResult.hasIgpAuthor = false
            builderResult.igpAuthor = nil
            return self
        }
        public var igpLocation:IGPRoomMessageLocation! {
            get {
                if igpLocationBuilder_ != nil {
                    builderResult.igpLocation = igpLocationBuilder_.getMessage()
                }
                return builderResult.igpLocation
            }
            set (value) {
                builderResult.hasIgpLocation = true
                builderResult.igpLocation = value
            }
        }
        public var hasIgpLocation:Bool {
            get {
                return builderResult.hasIgpLocation
            }
        }
        fileprivate var igpLocationBuilder_:IGPRoomMessageLocation.Builder! {
            didSet {
                builderResult.hasIgpLocation = true
            }
        }
        public func getIgpLocationBuilder() -> IGPRoomMessageLocation.Builder {
            if igpLocationBuilder_ == nil {
                igpLocationBuilder_ = IGPRoomMessageLocation.Builder()
                builderResult.igpLocation = igpLocationBuilder_.getMessage()
                if igpLocation != nil {
                    try! igpLocationBuilder_.mergeFrom(other: igpLocation)
                }
            }
            return igpLocationBuilder_
        }
        @discardableResult
        public func setIgpLocation(_ value:IGPRoomMessageLocation!) -> IGPRoomMessage.Builder {
            self.igpLocation = value
            return self
        }
        @discardableResult
        public func mergeIgpLocation(value:IGPRoomMessageLocation) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpLocation {
                builderResult.igpLocation = try IGPRoomMessageLocation.builderWithPrototype(prototype:builderResult.igpLocation).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpLocation = value
            }
            builderResult.hasIgpLocation = true
            return self
        }
        @discardableResult
        public func clearIgpLocation() -> IGPRoomMessage.Builder {
            igpLocationBuilder_ = nil
            builderResult.hasIgpLocation = false
            builderResult.igpLocation = nil
            return self
        }
        public var igpLog:IGPRoomMessageLog! {
            get {
                if igpLogBuilder_ != nil {
                    builderResult.igpLog = igpLogBuilder_.getMessage()
                }
                return builderResult.igpLog
            }
            set (value) {
                builderResult.hasIgpLog = true
                builderResult.igpLog = value
            }
        }
        public var hasIgpLog:Bool {
            get {
                return builderResult.hasIgpLog
            }
        }
        fileprivate var igpLogBuilder_:IGPRoomMessageLog.Builder! {
            didSet {
                builderResult.hasIgpLog = true
            }
        }
        public func getIgpLogBuilder() -> IGPRoomMessageLog.Builder {
            if igpLogBuilder_ == nil {
                igpLogBuilder_ = IGPRoomMessageLog.Builder()
                builderResult.igpLog = igpLogBuilder_.getMessage()
                if igpLog != nil {
                    try! igpLogBuilder_.mergeFrom(other: igpLog)
                }
            }
            return igpLogBuilder_
        }
        @discardableResult
        public func setIgpLog(_ value:IGPRoomMessageLog!) -> IGPRoomMessage.Builder {
            self.igpLog = value
            return self
        }
        @discardableResult
        public func mergeIgpLog(value:IGPRoomMessageLog) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpLog {
                builderResult.igpLog = try IGPRoomMessageLog.builderWithPrototype(prototype:builderResult.igpLog).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpLog = value
            }
            builderResult.hasIgpLog = true
            return self
        }
        @discardableResult
        public func clearIgpLog() -> IGPRoomMessage.Builder {
            igpLogBuilder_ = nil
            builderResult.hasIgpLog = false
            builderResult.igpLog = nil
            return self
        }
        public var igpContact:IGPRoomMessageContact! {
            get {
                if igpContactBuilder_ != nil {
                    builderResult.igpContact = igpContactBuilder_.getMessage()
                }
                return builderResult.igpContact
            }
            set (value) {
                builderResult.hasIgpContact = true
                builderResult.igpContact = value
            }
        }
        public var hasIgpContact:Bool {
            get {
                return builderResult.hasIgpContact
            }
        }
        fileprivate var igpContactBuilder_:IGPRoomMessageContact.Builder! {
            didSet {
                builderResult.hasIgpContact = true
            }
        }
        public func getIgpContactBuilder() -> IGPRoomMessageContact.Builder {
            if igpContactBuilder_ == nil {
                igpContactBuilder_ = IGPRoomMessageContact.Builder()
                builderResult.igpContact = igpContactBuilder_.getMessage()
                if igpContact != nil {
                    try! igpContactBuilder_.mergeFrom(other: igpContact)
                }
            }
            return igpContactBuilder_
        }
        @discardableResult
        public func setIgpContact(_ value:IGPRoomMessageContact!) -> IGPRoomMessage.Builder {
            self.igpContact = value
            return self
        }
        @discardableResult
        public func mergeIgpContact(value:IGPRoomMessageContact) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpContact {
                builderResult.igpContact = try IGPRoomMessageContact.builderWithPrototype(prototype:builderResult.igpContact).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpContact = value
            }
            builderResult.hasIgpContact = true
            return self
        }
        @discardableResult
        public func clearIgpContact() -> IGPRoomMessage.Builder {
            igpContactBuilder_ = nil
            builderResult.hasIgpContact = false
            builderResult.igpContact = nil
            return self
        }
        public var igpEdited:Bool {
            get {
                return builderResult.igpEdited
            }
            set (value) {
                builderResult.hasIgpEdited = true
                builderResult.igpEdited = value
            }
        }
        public var hasIgpEdited:Bool {
            get {
                return builderResult.hasIgpEdited
            }
        }
        @discardableResult
        public func setIgpEdited(_ value:Bool) -> IGPRoomMessage.Builder {
            self.igpEdited = value
            return self
        }
        @discardableResult
        public func clearIgpEdited() -> IGPRoomMessage.Builder{
            builderResult.hasIgpEdited = false
            builderResult.igpEdited = false
            return self
        }
        public var igpCreateTime:Int32 {
            get {
                return builderResult.igpCreateTime
            }
            set (value) {
                builderResult.hasIgpCreateTime = true
                builderResult.igpCreateTime = value
            }
        }
        public var hasIgpCreateTime:Bool {
            get {
                return builderResult.hasIgpCreateTime
            }
        }
        @discardableResult
        public func setIgpCreateTime(_ value:Int32) -> IGPRoomMessage.Builder {
            self.igpCreateTime = value
            return self
        }
        @discardableResult
        public func clearIgpCreateTime() -> IGPRoomMessage.Builder{
            builderResult.hasIgpCreateTime = false
            builderResult.igpCreateTime = Int32(0)
            return self
        }
        public var igpUpdateTime:Int32 {
            get {
                return builderResult.igpUpdateTime
            }
            set (value) {
                builderResult.hasIgpUpdateTime = true
                builderResult.igpUpdateTime = value
            }
        }
        public var hasIgpUpdateTime:Bool {
            get {
                return builderResult.hasIgpUpdateTime
            }
        }
        @discardableResult
        public func setIgpUpdateTime(_ value:Int32) -> IGPRoomMessage.Builder {
            self.igpUpdateTime = value
            return self
        }
        @discardableResult
        public func clearIgpUpdateTime() -> IGPRoomMessage.Builder{
            builderResult.hasIgpUpdateTime = false
            builderResult.igpUpdateTime = Int32(0)
            return self
        }
        public var igpDeleted:Bool {
            get {
                return builderResult.igpDeleted
            }
            set (value) {
                builderResult.hasIgpDeleted = true
                builderResult.igpDeleted = value
            }
        }
        public var hasIgpDeleted:Bool {
            get {
                return builderResult.hasIgpDeleted
            }
        }
        @discardableResult
        public func setIgpDeleted(_ value:Bool) -> IGPRoomMessage.Builder {
            self.igpDeleted = value
            return self
        }
        @discardableResult
        public func clearIgpDeleted() -> IGPRoomMessage.Builder{
            builderResult.hasIgpDeleted = false
            builderResult.igpDeleted = false
            return self
        }
        public var igpForwardFrom:IGPRoomMessage! {
            get {
                if igpForwardFromBuilder_ != nil {
                    builderResult.igpForwardFrom = igpForwardFromBuilder_.getMessage()
                }
                return builderResult.igpForwardFrom
            }
            set (value) {
                builderResult.hasIgpForwardFrom = true
                builderResult.igpForwardFrom = value
            }
        }
        public var hasIgpForwardFrom:Bool {
            get {
                return builderResult.hasIgpForwardFrom
            }
        }
        fileprivate var igpForwardFromBuilder_:IGPRoomMessage.Builder! {
            didSet {
                builderResult.hasIgpForwardFrom = true
            }
        }
        public func getIgpForwardFromBuilder() -> IGPRoomMessage.Builder {
            if igpForwardFromBuilder_ == nil {
                igpForwardFromBuilder_ = IGPRoomMessage.Builder()
                builderResult.igpForwardFrom = igpForwardFromBuilder_.getMessage()
                if igpForwardFrom != nil {
                    try! igpForwardFromBuilder_.mergeFrom(other: igpForwardFrom)
                }
            }
            return igpForwardFromBuilder_
        }
        @discardableResult
        public func setIgpForwardFrom(_ value:IGPRoomMessage!) -> IGPRoomMessage.Builder {
            self.igpForwardFrom = value
            return self
        }
        @discardableResult
        public func mergeIgpForwardFrom(value:IGPRoomMessage) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpForwardFrom {
                builderResult.igpForwardFrom = try IGPRoomMessage.builderWithPrototype(prototype:builderResult.igpForwardFrom).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpForwardFrom = value
            }
            builderResult.hasIgpForwardFrom = true
            return self
        }
        @discardableResult
        public func clearIgpForwardFrom() -> IGPRoomMessage.Builder {
            igpForwardFromBuilder_ = nil
            builderResult.hasIgpForwardFrom = false
            builderResult.igpForwardFrom = nil
            return self
        }
        public var igpReplyTo:IGPRoomMessage! {
            get {
                if igpReplyToBuilder_ != nil {
                    builderResult.igpReplyTo = igpReplyToBuilder_.getMessage()
                }
                return builderResult.igpReplyTo
            }
            set (value) {
                builderResult.hasIgpReplyTo = true
                builderResult.igpReplyTo = value
            }
        }
        public var hasIgpReplyTo:Bool {
            get {
                return builderResult.hasIgpReplyTo
            }
        }
        fileprivate var igpReplyToBuilder_:IGPRoomMessage.Builder! {
            didSet {
                builderResult.hasIgpReplyTo = true
            }
        }
        public func getIgpReplyToBuilder() -> IGPRoomMessage.Builder {
            if igpReplyToBuilder_ == nil {
                igpReplyToBuilder_ = IGPRoomMessage.Builder()
                builderResult.igpReplyTo = igpReplyToBuilder_.getMessage()
                if igpReplyTo != nil {
                    try! igpReplyToBuilder_.mergeFrom(other: igpReplyTo)
                }
            }
            return igpReplyToBuilder_
        }
        @discardableResult
        public func setIgpReplyTo(_ value:IGPRoomMessage!) -> IGPRoomMessage.Builder {
            self.igpReplyTo = value
            return self
        }
        @discardableResult
        public func mergeIgpReplyTo(value:IGPRoomMessage) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpReplyTo {
                builderResult.igpReplyTo = try IGPRoomMessage.builderWithPrototype(prototype:builderResult.igpReplyTo).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpReplyTo = value
            }
            builderResult.hasIgpReplyTo = true
            return self
        }
        @discardableResult
        public func clearIgpReplyTo() -> IGPRoomMessage.Builder {
            igpReplyToBuilder_ = nil
            builderResult.hasIgpReplyTo = false
            builderResult.igpReplyTo = nil
            return self
        }
        public var igpPreviousMessageId:Int64 {
            get {
                return builderResult.igpPreviousMessageId
            }
            set (value) {
                builderResult.hasIgpPreviousMessageId = true
                builderResult.igpPreviousMessageId = value
            }
        }
        public var hasIgpPreviousMessageId:Bool {
            get {
                return builderResult.hasIgpPreviousMessageId
            }
        }
        @discardableResult
        public func setIgpPreviousMessageId(_ value:Int64) -> IGPRoomMessage.Builder {
            self.igpPreviousMessageId = value
            return self
        }
        @discardableResult
        public func clearIgpPreviousMessageId() -> IGPRoomMessage.Builder{
            builderResult.hasIgpPreviousMessageId = false
            builderResult.igpPreviousMessageId = Int64(0)
            return self
        }
            public var igpExtraType:IGPRoomMessage.IGPExtraType {
                get {
                    return builderResult.igpExtraType
                }
                set (value) {
                    builderResult.hasIgpExtraType = true
                    builderResult.igpExtraType = value
                }
            }
            public var hasIgpExtraType:Bool{
                get {
                    return builderResult.hasIgpExtraType
                }
            }
        @discardableResult
            public func setIgpExtraType(_ value:IGPRoomMessage.IGPExtraType) -> IGPRoomMessage.Builder {
              self.igpExtraType = value
              return self
            }
        @discardableResult
            public func clearIgpExtraType() -> IGPRoomMessage.Builder {
               builderResult.hasIgpExtraType = false
               builderResult.igpExtraType = .noExtra
               return self
            }
        public var igpChannelExtra:IGPRoomMessage.IGPChannelExtra! {
            get {
                if igpChannelExtraBuilder_ != nil {
                    builderResult.igpChannelExtra = igpChannelExtraBuilder_.getMessage()
                }
                return builderResult.igpChannelExtra
            }
            set (value) {
                builderResult.hasIgpChannelExtra = true
                builderResult.igpChannelExtra = value
            }
        }
        public var hasIgpChannelExtra:Bool {
            get {
                return builderResult.hasIgpChannelExtra
            }
        }
        fileprivate var igpChannelExtraBuilder_:IGPRoomMessage.IGPChannelExtra.Builder! {
            didSet {
                builderResult.hasIgpChannelExtra = true
            }
        }
        public func getIgpChannelExtraBuilder() -> IGPRoomMessage.IGPChannelExtra.Builder {
            if igpChannelExtraBuilder_ == nil {
                igpChannelExtraBuilder_ = IGPRoomMessage.IGPChannelExtra.Builder()
                builderResult.igpChannelExtra = igpChannelExtraBuilder_.getMessage()
                if igpChannelExtra != nil {
                    try! igpChannelExtraBuilder_.mergeFrom(other: igpChannelExtra)
                }
            }
            return igpChannelExtraBuilder_
        }
        @discardableResult
        public func setIgpChannelExtra(_ value:IGPRoomMessage.IGPChannelExtra!) -> IGPRoomMessage.Builder {
            self.igpChannelExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpChannelExtra(value:IGPRoomMessage.IGPChannelExtra) throws -> IGPRoomMessage.Builder {
            if builderResult.hasIgpChannelExtra {
                builderResult.igpChannelExtra = try IGPRoomMessage.IGPChannelExtra.builderWithPrototype(prototype:builderResult.igpChannelExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpChannelExtra = value
            }
            builderResult.hasIgpChannelExtra = true
            return self
        }
        @discardableResult
        public func clearIgpChannelExtra() -> IGPRoomMessage.Builder {
            igpChannelExtraBuilder_ = nil
            builderResult.hasIgpChannelExtra = false
            builderResult.igpChannelExtra = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRoomMessage.Builder {
            builderResult = IGPRoomMessage()
            return self
        }
        override public func clone() throws -> IGPRoomMessage.Builder {
            return try IGPRoomMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRoomMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRoomMessage {
            let returnMe:IGPRoomMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRoomMessage) throws -> IGPRoomMessage.Builder {
            if other == IGPRoomMessage() {
                return self
            }
            if other.hasIgpMessageId {
                igpMessageId = other.igpMessageId
            }
            if other.hasIgpMessageVersion {
                igpMessageVersion = other.igpMessageVersion
            }
            if other.hasIgpStatus {
                igpStatus = other.igpStatus
            }
            if other.hasIgpStatusVersion {
                igpStatusVersion = other.igpStatusVersion
            }
            if other.hasIgpMessageType {
                igpMessageType = other.igpMessageType
            }
            if other.hasIgpMessage {
                igpMessage = other.igpMessage
            }
            if (other.hasIgpAttachment) {
                try mergeIgpAttachment(value: other.igpAttachment)
            }
            if (other.hasIgpAuthor) {
                try mergeIgpAuthor(value: other.igpAuthor)
            }
            if (other.hasIgpLocation) {
                try mergeIgpLocation(value: other.igpLocation)
            }
            if (other.hasIgpLog) {
                try mergeIgpLog(value: other.igpLog)
            }
            if (other.hasIgpContact) {
                try mergeIgpContact(value: other.igpContact)
            }
            if other.hasIgpEdited {
                igpEdited = other.igpEdited
            }
            if other.hasIgpCreateTime {
                igpCreateTime = other.igpCreateTime
            }
            if other.hasIgpUpdateTime {
                igpUpdateTime = other.igpUpdateTime
            }
            if other.hasIgpDeleted {
                igpDeleted = other.igpDeleted
            }
            if (other.hasIgpForwardFrom) {
                try mergeIgpForwardFrom(value: other.igpForwardFrom)
            }
            if (other.hasIgpReplyTo) {
                try mergeIgpReplyTo(value: other.igpReplyTo)
            }
            if other.hasIgpPreviousMessageId {
                igpPreviousMessageId = other.igpPreviousMessageId
            }
            if other.hasIgpExtraType {
                igpExtraType = other.igpExtraType
            }
            if (other.hasIgpChannelExtra) {
                try mergeIgpChannelExtra(value: other.igpChannelExtra)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    igpMessageId = try codedInputStream.readInt64()

                case 16:
                    igpMessageVersion = try codedInputStream.readInt64()

                case 24:
                    let valueIntigpStatus = try codedInputStream.readEnum()
                    if let enumsigpStatus = IGPRoomMessageStatus(rawValue:valueIntigpStatus){
                        igpStatus = enumsigpStatus
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntigpStatus))
                    }

                case 32:
                    igpStatusVersion = try codedInputStream.readInt64()

                case 40:
                    let valueIntigpMessageType = try codedInputStream.readEnum()
                    if let enumsigpMessageType = IGPRoomMessageType(rawValue:valueIntigpMessageType){
                        igpMessageType = enumsigpMessageType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 5, value:Int64(valueIntigpMessageType))
                    }

                case 50:
                    igpMessage = try codedInputStream.readString()

                case 58:
                    let subBuilder:IGPFile.Builder = IGPFile.Builder()
                    if hasIgpAttachment {
                        try subBuilder.mergeFrom(other: igpAttachment)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpAttachment = subBuilder.buildPartial()

                case 66:
                    let subBuilder:IGPRoomMessage.IGPAuthor.Builder = IGPRoomMessage.IGPAuthor.Builder()
                    if hasIgpAuthor {
                        try subBuilder.mergeFrom(other: igpAuthor)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpAuthor = subBuilder.buildPartial()

                case 74:
                    let subBuilder:IGPRoomMessageLocation.Builder = IGPRoomMessageLocation.Builder()
                    if hasIgpLocation {
                        try subBuilder.mergeFrom(other: igpLocation)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpLocation = subBuilder.buildPartial()

                case 82:
                    let subBuilder:IGPRoomMessageLog.Builder = IGPRoomMessageLog.Builder()
                    if hasIgpLog {
                        try subBuilder.mergeFrom(other: igpLog)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpLog = subBuilder.buildPartial()

                case 90:
                    let subBuilder:IGPRoomMessageContact.Builder = IGPRoomMessageContact.Builder()
                    if hasIgpContact {
                        try subBuilder.mergeFrom(other: igpContact)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpContact = subBuilder.buildPartial()

                case 96:
                    igpEdited = try codedInputStream.readBool()

                case 104:
                    igpCreateTime = try codedInputStream.readInt32()

                case 112:
                    igpUpdateTime = try codedInputStream.readInt32()

                case 120:
                    igpDeleted = try codedInputStream.readBool()

                case 130:
                    let subBuilder:IGPRoomMessage.Builder = IGPRoomMessage.Builder()
                    if hasIgpForwardFrom {
                        try subBuilder.mergeFrom(other: igpForwardFrom)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpForwardFrom = subBuilder.buildPartial()

                case 138:
                    let subBuilder:IGPRoomMessage.Builder = IGPRoomMessage.Builder()
                    if hasIgpReplyTo {
                        try subBuilder.mergeFrom(other: igpReplyTo)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpReplyTo = subBuilder.buildPartial()

                case 144:
                    igpPreviousMessageId = try codedInputStream.readInt64()

                case 152:
                    let valueIntigpExtraType = try codedInputStream.readEnum()
                    if let enumsigpExtraType = IGPRoomMessage.IGPExtraType(rawValue:valueIntigpExtraType){
                        igpExtraType = enumsigpExtraType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 19, value:Int64(valueIntigpExtraType))
                    }

                case 162:
                    let subBuilder:IGPRoomMessage.IGPChannelExtra.Builder = IGPRoomMessage.IGPChannelExtra.Builder()
                    if hasIgpChannelExtra {
                        try subBuilder.mergeFrom(other: igpChannelExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpChannelExtra = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomMessage.Builder {
            let resultDecodedBuilder = IGPRoomMessage.Builder()
            if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? String {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)!
            } else if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? Int {
                resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)
            }
            if let jsonValueIgpMessageVersion = jsonMap["IGPMessageVersion"] as? String {
                resultDecodedBuilder.igpMessageVersion = Int64(jsonValueIgpMessageVersion)!
            } else if let jsonValueIgpMessageVersion = jsonMap["IGPMessageVersion"] as? Int {
                resultDecodedBuilder.igpMessageVersion = Int64(jsonValueIgpMessageVersion)
            }
            if let jsonValueIgpStatus = jsonMap["IGPStatus"] as? String {
                resultDecodedBuilder.igpStatus = try IGPRoomMessageStatus.fromString(str: jsonValueIgpStatus)
            }
            if let jsonValueIgpStatusVersion = jsonMap["IGPStatusVersion"] as? String {
                resultDecodedBuilder.igpStatusVersion = Int64(jsonValueIgpStatusVersion)!
            } else if let jsonValueIgpStatusVersion = jsonMap["IGPStatusVersion"] as? Int {
                resultDecodedBuilder.igpStatusVersion = Int64(jsonValueIgpStatusVersion)
            }
            if let jsonValueIgpMessageType = jsonMap["IGPMessageType"] as? String {
                resultDecodedBuilder.igpMessageType = try IGPRoomMessageType.fromString(str: jsonValueIgpMessageType)
            }
            if let jsonValueIgpMessage = jsonMap["IGPMessage"] as? String {
                resultDecodedBuilder.igpMessage = jsonValueIgpMessage
            }
            if let jsonValueIgpAttachment = jsonMap["IGPAttachment"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpAttachment = try IGPFile.Builder.decodeToBuilder(jsonMap:jsonValueIgpAttachment).build()

            }
            if let jsonValueIgpAuthor = jsonMap["IGPAuthor"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpAuthor = try IGPRoomMessage.IGPAuthor.Builder.decodeToBuilder(jsonMap:jsonValueIgpAuthor).build()

            }
            if let jsonValueIgpLocation = jsonMap["IGPLocation"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpLocation = try IGPRoomMessageLocation.Builder.decodeToBuilder(jsonMap:jsonValueIgpLocation).build()

            }
            if let jsonValueIgpLog = jsonMap["IGPLog"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpLog = try IGPRoomMessageLog.Builder.decodeToBuilder(jsonMap:jsonValueIgpLog).build()

            }
            if let jsonValueIgpContact = jsonMap["IGPContact"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpContact = try IGPRoomMessageContact.Builder.decodeToBuilder(jsonMap:jsonValueIgpContact).build()

            }
            if let jsonValueIgpEdited = jsonMap["IGPEdited"] as? Bool {
                resultDecodedBuilder.igpEdited = jsonValueIgpEdited
            }
            if let jsonValueIgpCreateTime = jsonMap["IGPCreateTime"] as? Int {
                resultDecodedBuilder.igpCreateTime = Int32(jsonValueIgpCreateTime)
            } else if let jsonValueIgpCreateTime = jsonMap["IGPCreateTime"] as? String {
                resultDecodedBuilder.igpCreateTime = Int32(jsonValueIgpCreateTime)!
            }
            if let jsonValueIgpUpdateTime = jsonMap["IGPUpdateTime"] as? Int {
                resultDecodedBuilder.igpUpdateTime = Int32(jsonValueIgpUpdateTime)
            } else if let jsonValueIgpUpdateTime = jsonMap["IGPUpdateTime"] as? String {
                resultDecodedBuilder.igpUpdateTime = Int32(jsonValueIgpUpdateTime)!
            }
            if let jsonValueIgpDeleted = jsonMap["IGPDeleted"] as? Bool {
                resultDecodedBuilder.igpDeleted = jsonValueIgpDeleted
            }
            if let jsonValueIgpForwardFrom = jsonMap["IGPForwardFrom"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpForwardFrom = try IGPRoomMessage.Builder.decodeToBuilder(jsonMap:jsonValueIgpForwardFrom).build()

            }
            if let jsonValueIgpReplyTo = jsonMap["IGPReplyTo"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpReplyTo = try IGPRoomMessage.Builder.decodeToBuilder(jsonMap:jsonValueIgpReplyTo).build()

            }
            if let jsonValueIgpPreviousMessageId = jsonMap["IGPPreviousMessageId"] as? String {
                resultDecodedBuilder.igpPreviousMessageId = Int64(jsonValueIgpPreviousMessageId)!
            } else if let jsonValueIgpPreviousMessageId = jsonMap["IGPPreviousMessageId"] as? Int {
                resultDecodedBuilder.igpPreviousMessageId = Int64(jsonValueIgpPreviousMessageId)
            }
            if let jsonValueIgpExtraType = jsonMap["IGPExtraType"] as? String {
                resultDecodedBuilder.igpExtraType = try IGPRoomMessage.IGPExtraType.fromString(str: jsonValueIgpExtraType)
            }
            if let jsonValueIgpChannelExtra = jsonMap["IGPChannelExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpChannelExtra = try IGPRoomMessage.IGPChannelExtra.Builder.decodeToBuilder(jsonMap:jsonValueIgpChannelExtra).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRoomMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPRoomDraft : GeneratedMessage {

    public static func == (lhs: IGPRoomDraft, rhs: IGPRoomDraft) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpMessage == rhs.hasIgpMessage) && (!lhs.hasIgpMessage || lhs.igpMessage == rhs.igpMessage)
        fieldCheck = fieldCheck && (lhs.hasIgpReplyTo == rhs.hasIgpReplyTo) && (!lhs.hasIgpReplyTo || lhs.igpReplyTo == rhs.igpReplyTo)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpMessage:String = ""
    public fileprivate(set) var hasIgpMessage:Bool = false

    public fileprivate(set) var igpReplyTo:Int64 = Int64(0)
    public fileprivate(set) var hasIgpReplyTo:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpMessage {
            try codedOutputStream.writeString(fieldNumber: 1, value:igpMessage)
        }
        if hasIgpReplyTo {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpReplyTo)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpMessage {
            serialize_size += igpMessage.computeStringSize(fieldNumber: 1)
        }
        if hasIgpReplyTo {
            serialize_size += igpReplyTo.computeInt64Size(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRoomDraft.Builder {
        return IGPRoomDraft.classBuilder() as! IGPRoomDraft.Builder
    }
    public func getBuilder() -> IGPRoomDraft.Builder {
        return classBuilder() as! IGPRoomDraft.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomDraft.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoomDraft.Builder()
    }
    public func toBuilder() throws -> IGPRoomDraft.Builder {
        return try IGPRoomDraft.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRoomDraft) throws -> IGPRoomDraft.Builder {
        return try IGPRoomDraft.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpMessage {
            jsonMap["IGPMessage"] = igpMessage
        }
        if hasIgpReplyTo {
            jsonMap["IGPReplyTo"] = "\(igpReplyTo)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpMessage {
            output += "\(indent) igpMessage: \(igpMessage) \n"
        }
        if hasIgpReplyTo {
            output += "\(indent) igpReplyTo: \(igpReplyTo) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpMessage {
                hashCode = (hashCode &* 31) &+ igpMessage.hashValue
            }
            if hasIgpReplyTo {
                hashCode = (hashCode &* 31) &+ igpReplyTo.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRoomDraft"
    }
    override public func className() -> String {
        return "IGPRoomDraft"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRoomDraft = IGPRoomDraft()
        public func getMessage() -> IGPRoomDraft {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpMessage:String {
            get {
                return builderResult.igpMessage
            }
            set (value) {
                builderResult.hasIgpMessage = true
                builderResult.igpMessage = value
            }
        }
        public var hasIgpMessage:Bool {
            get {
                return builderResult.hasIgpMessage
            }
        }
        @discardableResult
        public func setIgpMessage(_ value:String) -> IGPRoomDraft.Builder {
            self.igpMessage = value
            return self
        }
        @discardableResult
        public func clearIgpMessage() -> IGPRoomDraft.Builder{
            builderResult.hasIgpMessage = false
            builderResult.igpMessage = ""
            return self
        }
        public var igpReplyTo:Int64 {
            get {
                return builderResult.igpReplyTo
            }
            set (value) {
                builderResult.hasIgpReplyTo = true
                builderResult.igpReplyTo = value
            }
        }
        public var hasIgpReplyTo:Bool {
            get {
                return builderResult.hasIgpReplyTo
            }
        }
        @discardableResult
        public func setIgpReplyTo(_ value:Int64) -> IGPRoomDraft.Builder {
            self.igpReplyTo = value
            return self
        }
        @discardableResult
        public func clearIgpReplyTo() -> IGPRoomDraft.Builder{
            builderResult.hasIgpReplyTo = false
            builderResult.igpReplyTo = Int64(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRoomDraft.Builder {
            builderResult = IGPRoomDraft()
            return self
        }
        override public func clone() throws -> IGPRoomDraft.Builder {
            return try IGPRoomDraft.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRoomDraft {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRoomDraft {
            let returnMe:IGPRoomDraft = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRoomDraft) throws -> IGPRoomDraft.Builder {
            if other == IGPRoomDraft() {
                return self
            }
            if other.hasIgpMessage {
                igpMessage = other.igpMessage
            }
            if other.hasIgpReplyTo {
                igpReplyTo = other.igpReplyTo
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoomDraft.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomDraft.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    igpMessage = try codedInputStream.readString()

                case 16:
                    igpReplyTo = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoomDraft.Builder {
            let resultDecodedBuilder = IGPRoomDraft.Builder()
            if let jsonValueIgpMessage = jsonMap["IGPMessage"] as? String {
                resultDecodedBuilder.igpMessage = jsonValueIgpMessage
            }
            if let jsonValueIgpReplyTo = jsonMap["IGPReplyTo"] as? String {
                resultDecodedBuilder.igpReplyTo = Int64(jsonValueIgpReplyTo)!
            } else if let jsonValueIgpReplyTo = jsonMap["IGPReplyTo"] as? Int {
                resultDecodedBuilder.igpReplyTo = Int64(jsonValueIgpReplyTo)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRoomDraft.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRoomDraft.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPRoom : GeneratedMessage {

    public static func == (lhs: IGPRoom, rhs: IGPRoom) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpId == rhs.hasIgpId) && (!lhs.hasIgpId || lhs.igpId == rhs.igpId)
        fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
        fieldCheck = fieldCheck && (lhs.hasIgpTitle == rhs.hasIgpTitle) && (!lhs.hasIgpTitle || lhs.igpTitle == rhs.igpTitle)
        fieldCheck = fieldCheck && (lhs.hasIgpInitials == rhs.hasIgpInitials) && (!lhs.hasIgpInitials || lhs.igpInitials == rhs.igpInitials)
        fieldCheck = fieldCheck && (lhs.hasIgpColor == rhs.hasIgpColor) && (!lhs.hasIgpColor || lhs.igpColor == rhs.igpColor)
        fieldCheck = fieldCheck && (lhs.hasIgpUnreadCount == rhs.hasIgpUnreadCount) && (!lhs.hasIgpUnreadCount || lhs.igpUnreadCount == rhs.igpUnreadCount)
        fieldCheck = fieldCheck && (lhs.hasIgpLastMessage == rhs.hasIgpLastMessage) && (!lhs.hasIgpLastMessage || lhs.igpLastMessage == rhs.igpLastMessage)
        fieldCheck = fieldCheck && (lhs.hasIgpReadOnly == rhs.hasIgpReadOnly) && (!lhs.hasIgpReadOnly || lhs.igpReadOnly == rhs.igpReadOnly)
        fieldCheck = fieldCheck && (lhs.hasIgpIsParticipant == rhs.hasIgpIsParticipant) && (!lhs.hasIgpIsParticipant || lhs.igpIsParticipant == rhs.igpIsParticipant)
        fieldCheck = fieldCheck && (lhs.hasIgpDraft == rhs.hasIgpDraft) && (!lhs.hasIgpDraft || lhs.igpDraft == rhs.igpDraft)
        fieldCheck = fieldCheck && (lhs.hasIgpChatRoomExtra == rhs.hasIgpChatRoomExtra) && (!lhs.hasIgpChatRoomExtra || lhs.igpChatRoomExtra == rhs.igpChatRoomExtra)
        fieldCheck = fieldCheck && (lhs.hasIgpGroupRoomExtra == rhs.hasIgpGroupRoomExtra) && (!lhs.hasIgpGroupRoomExtra || lhs.igpGroupRoomExtra == rhs.igpGroupRoomExtra)
        fieldCheck = fieldCheck && (lhs.hasIgpChannelRoomExtra == rhs.hasIgpChannelRoomExtra) && (!lhs.hasIgpChannelRoomExtra || lhs.igpChannelRoomExtra == rhs.igpChannelRoomExtra)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case chat = 0
            case group = 1
            case channel = 2
            public func toString() -> String {
                switch self {
                case .chat: return "CHAT"
                case .group: return "GROUP"
                case .channel: return "CHANNEL"
                }
            }
            public static func fromString(str:String) throws -> IGPRoom.IGPType {
                switch str {
                case "CHAT":    return .chat
                case "GROUP":    return .group
                case "CHANNEL":    return .channel
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .chat: return ".chat"
                case .group: return ".group"
                case .channel: return ".channel"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPType, rhs:IGPType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpId:Bool = false

    public fileprivate(set) var igpType:IGPRoom.IGPType = IGPRoom.IGPType.chat
    public fileprivate(set) var hasIgpType:Bool = false
    public fileprivate(set) var igpTitle:String = ""
    public fileprivate(set) var hasIgpTitle:Bool = false

    public fileprivate(set) var igpInitials:String = ""
    public fileprivate(set) var hasIgpInitials:Bool = false

    public fileprivate(set) var igpColor:String = ""
    public fileprivate(set) var hasIgpColor:Bool = false

    public fileprivate(set) var igpUnreadCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpUnreadCount:Bool = false

    public fileprivate(set) var igpLastMessage:IGPRoomMessage!
    public fileprivate(set) var hasIgpLastMessage:Bool = false
    public fileprivate(set) var igpReadOnly:Bool = false
    public fileprivate(set) var hasIgpReadOnly:Bool = false

    public fileprivate(set) var igpIsParticipant:Bool = false
    public fileprivate(set) var hasIgpIsParticipant:Bool = false

    public fileprivate(set) var igpDraft:IGPRoomDraft!
    public fileprivate(set) var hasIgpDraft:Bool = false
    public fileprivate(set) var igpChatRoomExtra:IGPChatRoom!
    public fileprivate(set) var hasIgpChatRoomExtra:Bool = false
    public fileprivate(set) var igpGroupRoomExtra:IGPGroupRoom!
    public fileprivate(set) var hasIgpGroupRoomExtra:Bool = false
    public fileprivate(set) var igpChannelRoomExtra:IGPChannelRoom!
    public fileprivate(set) var hasIgpChannelRoomExtra:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpId {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:igpId)
        }
        if hasIgpType {
            try codedOutputStream.writeEnum(fieldNumber: 2, value:igpType.rawValue)
        }
        if hasIgpTitle {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpTitle)
        }
        if hasIgpInitials {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpInitials)
        }
        if hasIgpColor {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpColor)
        }
        if hasIgpUnreadCount {
            try codedOutputStream.writeInt32(fieldNumber: 6, value:igpUnreadCount)
        }
        if hasIgpLastMessage {
            try codedOutputStream.writeMessage(fieldNumber: 7, value:igpLastMessage)
        }
        if hasIgpReadOnly {
            try codedOutputStream.writeBool(fieldNumber: 8, value:igpReadOnly)
        }
        if hasIgpIsParticipant {
            try codedOutputStream.writeBool(fieldNumber: 9, value:igpIsParticipant)
        }
        if hasIgpDraft {
            try codedOutputStream.writeMessage(fieldNumber: 10, value:igpDraft)
        }
        if hasIgpChatRoomExtra {
            try codedOutputStream.writeMessage(fieldNumber: 11, value:igpChatRoomExtra)
        }
        if hasIgpGroupRoomExtra {
            try codedOutputStream.writeMessage(fieldNumber: 12, value:igpGroupRoomExtra)
        }
        if hasIgpChannelRoomExtra {
            try codedOutputStream.writeMessage(fieldNumber: 13, value:igpChannelRoomExtra)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpId {
            serialize_size += igpId.computeInt64Size(fieldNumber: 1)
        }
        if (hasIgpType) {
            serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 2)
        }
        if hasIgpTitle {
            serialize_size += igpTitle.computeStringSize(fieldNumber: 3)
        }
        if hasIgpInitials {
            serialize_size += igpInitials.computeStringSize(fieldNumber: 4)
        }
        if hasIgpColor {
            serialize_size += igpColor.computeStringSize(fieldNumber: 5)
        }
        if hasIgpUnreadCount {
            serialize_size += igpUnreadCount.computeInt32Size(fieldNumber: 6)
        }
        if hasIgpLastMessage {
            if let varSizeigpLastMessage = igpLastMessage?.computeMessageSize(fieldNumber: 7) {
                serialize_size += varSizeigpLastMessage
            }
        }
        if hasIgpReadOnly {
            serialize_size += igpReadOnly.computeBoolSize(fieldNumber: 8)
        }
        if hasIgpIsParticipant {
            serialize_size += igpIsParticipant.computeBoolSize(fieldNumber: 9)
        }
        if hasIgpDraft {
            if let varSizeigpDraft = igpDraft?.computeMessageSize(fieldNumber: 10) {
                serialize_size += varSizeigpDraft
            }
        }
        if hasIgpChatRoomExtra {
            if let varSizeigpChatRoomExtra = igpChatRoomExtra?.computeMessageSize(fieldNumber: 11) {
                serialize_size += varSizeigpChatRoomExtra
            }
        }
        if hasIgpGroupRoomExtra {
            if let varSizeigpGroupRoomExtra = igpGroupRoomExtra?.computeMessageSize(fieldNumber: 12) {
                serialize_size += varSizeigpGroupRoomExtra
            }
        }
        if hasIgpChannelRoomExtra {
            if let varSizeigpChannelRoomExtra = igpChannelRoomExtra?.computeMessageSize(fieldNumber: 13) {
                serialize_size += varSizeigpChannelRoomExtra
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPRoom.Builder {
        return IGPRoom.classBuilder() as! IGPRoom.Builder
    }
    public func getBuilder() -> IGPRoom.Builder {
        return classBuilder() as! IGPRoom.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoom.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPRoom.Builder()
    }
    public func toBuilder() throws -> IGPRoom.Builder {
        return try IGPRoom.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPRoom) throws -> IGPRoom.Builder {
        return try IGPRoom.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpId {
            jsonMap["IGPId"] = "\(igpId)"
        }
        if hasIgpType {
            jsonMap["IGPType"] = igpType.toString()
        }
        if hasIgpTitle {
            jsonMap["IGPTitle"] = igpTitle
        }
        if hasIgpInitials {
            jsonMap["IGPInitials"] = igpInitials
        }
        if hasIgpColor {
            jsonMap["IGPColor"] = igpColor
        }
        if hasIgpUnreadCount {
            jsonMap["IGPUnreadCount"] = Int(igpUnreadCount)
        }
        if hasIgpLastMessage {
            jsonMap["IGPLastMessage"] = try igpLastMessage.encode()
        }
        if hasIgpReadOnly {
            jsonMap["IGPReadOnly"] = igpReadOnly
        }
        if hasIgpIsParticipant {
            jsonMap["IGPIsParticipant"] = igpIsParticipant
        }
        if hasIgpDraft {
            jsonMap["IGPDraft"] = try igpDraft.encode()
        }
        if hasIgpChatRoomExtra {
            jsonMap["IGPChatRoomExtra"] = try igpChatRoomExtra.encode()
        }
        if hasIgpGroupRoomExtra {
            jsonMap["IGPGroupRoomExtra"] = try igpGroupRoomExtra.encode()
        }
        if hasIgpChannelRoomExtra {
            jsonMap["IGPChannelRoomExtra"] = try igpChannelRoomExtra.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPRoom {
        return try IGPRoom.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPRoom {
        return try IGPRoom.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpId {
            output += "\(indent) igpId: \(igpId) \n"
        }
        if (hasIgpType) {
            output += "\(indent) igpType: \(igpType.description)\n"
        }
        if hasIgpTitle {
            output += "\(indent) igpTitle: \(igpTitle) \n"
        }
        if hasIgpInitials {
            output += "\(indent) igpInitials: \(igpInitials) \n"
        }
        if hasIgpColor {
            output += "\(indent) igpColor: \(igpColor) \n"
        }
        if hasIgpUnreadCount {
            output += "\(indent) igpUnreadCount: \(igpUnreadCount) \n"
        }
        if hasIgpLastMessage {
            output += "\(indent) igpLastMessage {\n"
            if let outDescIgpLastMessage = igpLastMessage {
                output += try outDescIgpLastMessage.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpReadOnly {
            output += "\(indent) igpReadOnly: \(igpReadOnly) \n"
        }
        if hasIgpIsParticipant {
            output += "\(indent) igpIsParticipant: \(igpIsParticipant) \n"
        }
        if hasIgpDraft {
            output += "\(indent) igpDraft {\n"
            if let outDescIgpDraft = igpDraft {
                output += try outDescIgpDraft.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpChatRoomExtra {
            output += "\(indent) igpChatRoomExtra {\n"
            if let outDescIgpChatRoomExtra = igpChatRoomExtra {
                output += try outDescIgpChatRoomExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpGroupRoomExtra {
            output += "\(indent) igpGroupRoomExtra {\n"
            if let outDescIgpGroupRoomExtra = igpGroupRoomExtra {
                output += try outDescIgpGroupRoomExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpChannelRoomExtra {
            output += "\(indent) igpChannelRoomExtra {\n"
            if let outDescIgpChannelRoomExtra = igpChannelRoomExtra {
                output += try outDescIgpChannelRoomExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpId {
                hashCode = (hashCode &* 31) &+ igpId.hashValue
            }
            if hasIgpType {
                 hashCode = (hashCode &* 31) &+ igpType.hashValue
            }
            if hasIgpTitle {
                hashCode = (hashCode &* 31) &+ igpTitle.hashValue
            }
            if hasIgpInitials {
                hashCode = (hashCode &* 31) &+ igpInitials.hashValue
            }
            if hasIgpColor {
                hashCode = (hashCode &* 31) &+ igpColor.hashValue
            }
            if hasIgpUnreadCount {
                hashCode = (hashCode &* 31) &+ igpUnreadCount.hashValue
            }
            if hasIgpLastMessage {
                if let hashValueigpLastMessage = igpLastMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpLastMessage
                }
            }
            if hasIgpReadOnly {
                hashCode = (hashCode &* 31) &+ igpReadOnly.hashValue
            }
            if hasIgpIsParticipant {
                hashCode = (hashCode &* 31) &+ igpIsParticipant.hashValue
            }
            if hasIgpDraft {
                if let hashValueigpDraft = igpDraft?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpDraft
                }
            }
            if hasIgpChatRoomExtra {
                if let hashValueigpChatRoomExtra = igpChatRoomExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpChatRoomExtra
                }
            }
            if hasIgpGroupRoomExtra {
                if let hashValueigpGroupRoomExtra = igpGroupRoomExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpGroupRoomExtra
                }
            }
            if hasIgpChannelRoomExtra {
                if let hashValueigpChannelRoomExtra = igpChannelRoomExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpChannelRoomExtra
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPRoom"
    }
    override public func className() -> String {
        return "IGPRoom"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPRoom = IGPRoom()
        public func getMessage() -> IGPRoom {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpId:Int64 {
            get {
                return builderResult.igpId
            }
            set (value) {
                builderResult.hasIgpId = true
                builderResult.igpId = value
            }
        }
        public var hasIgpId:Bool {
            get {
                return builderResult.hasIgpId
            }
        }
        @discardableResult
        public func setIgpId(_ value:Int64) -> IGPRoom.Builder {
            self.igpId = value
            return self
        }
        @discardableResult
        public func clearIgpId() -> IGPRoom.Builder{
            builderResult.hasIgpId = false
            builderResult.igpId = Int64(0)
            return self
        }
            public var igpType:IGPRoom.IGPType {
                get {
                    return builderResult.igpType
                }
                set (value) {
                    builderResult.hasIgpType = true
                    builderResult.igpType = value
                }
            }
            public var hasIgpType:Bool{
                get {
                    return builderResult.hasIgpType
                }
            }
        @discardableResult
            public func setIgpType(_ value:IGPRoom.IGPType) -> IGPRoom.Builder {
              self.igpType = value
              return self
            }
        @discardableResult
            public func clearIgpType() -> IGPRoom.Builder {
               builderResult.hasIgpType = false
               builderResult.igpType = .chat
               return self
            }
        public var igpTitle:String {
            get {
                return builderResult.igpTitle
            }
            set (value) {
                builderResult.hasIgpTitle = true
                builderResult.igpTitle = value
            }
        }
        public var hasIgpTitle:Bool {
            get {
                return builderResult.hasIgpTitle
            }
        }
        @discardableResult
        public func setIgpTitle(_ value:String) -> IGPRoom.Builder {
            self.igpTitle = value
            return self
        }
        @discardableResult
        public func clearIgpTitle() -> IGPRoom.Builder{
            builderResult.hasIgpTitle = false
            builderResult.igpTitle = ""
            return self
        }
        public var igpInitials:String {
            get {
                return builderResult.igpInitials
            }
            set (value) {
                builderResult.hasIgpInitials = true
                builderResult.igpInitials = value
            }
        }
        public var hasIgpInitials:Bool {
            get {
                return builderResult.hasIgpInitials
            }
        }
        @discardableResult
        public func setIgpInitials(_ value:String) -> IGPRoom.Builder {
            self.igpInitials = value
            return self
        }
        @discardableResult
        public func clearIgpInitials() -> IGPRoom.Builder{
            builderResult.hasIgpInitials = false
            builderResult.igpInitials = ""
            return self
        }
        public var igpColor:String {
            get {
                return builderResult.igpColor
            }
            set (value) {
                builderResult.hasIgpColor = true
                builderResult.igpColor = value
            }
        }
        public var hasIgpColor:Bool {
            get {
                return builderResult.hasIgpColor
            }
        }
        @discardableResult
        public func setIgpColor(_ value:String) -> IGPRoom.Builder {
            self.igpColor = value
            return self
        }
        @discardableResult
        public func clearIgpColor() -> IGPRoom.Builder{
            builderResult.hasIgpColor = false
            builderResult.igpColor = ""
            return self
        }
        public var igpUnreadCount:Int32 {
            get {
                return builderResult.igpUnreadCount
            }
            set (value) {
                builderResult.hasIgpUnreadCount = true
                builderResult.igpUnreadCount = value
            }
        }
        public var hasIgpUnreadCount:Bool {
            get {
                return builderResult.hasIgpUnreadCount
            }
        }
        @discardableResult
        public func setIgpUnreadCount(_ value:Int32) -> IGPRoom.Builder {
            self.igpUnreadCount = value
            return self
        }
        @discardableResult
        public func clearIgpUnreadCount() -> IGPRoom.Builder{
            builderResult.hasIgpUnreadCount = false
            builderResult.igpUnreadCount = Int32(0)
            return self
        }
        public var igpLastMessage:IGPRoomMessage! {
            get {
                if igpLastMessageBuilder_ != nil {
                    builderResult.igpLastMessage = igpLastMessageBuilder_.getMessage()
                }
                return builderResult.igpLastMessage
            }
            set (value) {
                builderResult.hasIgpLastMessage = true
                builderResult.igpLastMessage = value
            }
        }
        public var hasIgpLastMessage:Bool {
            get {
                return builderResult.hasIgpLastMessage
            }
        }
        fileprivate var igpLastMessageBuilder_:IGPRoomMessage.Builder! {
            didSet {
                builderResult.hasIgpLastMessage = true
            }
        }
        public func getIgpLastMessageBuilder() -> IGPRoomMessage.Builder {
            if igpLastMessageBuilder_ == nil {
                igpLastMessageBuilder_ = IGPRoomMessage.Builder()
                builderResult.igpLastMessage = igpLastMessageBuilder_.getMessage()
                if igpLastMessage != nil {
                    try! igpLastMessageBuilder_.mergeFrom(other: igpLastMessage)
                }
            }
            return igpLastMessageBuilder_
        }
        @discardableResult
        public func setIgpLastMessage(_ value:IGPRoomMessage!) -> IGPRoom.Builder {
            self.igpLastMessage = value
            return self
        }
        @discardableResult
        public func mergeIgpLastMessage(value:IGPRoomMessage) throws -> IGPRoom.Builder {
            if builderResult.hasIgpLastMessage {
                builderResult.igpLastMessage = try IGPRoomMessage.builderWithPrototype(prototype:builderResult.igpLastMessage).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpLastMessage = value
            }
            builderResult.hasIgpLastMessage = true
            return self
        }
        @discardableResult
        public func clearIgpLastMessage() -> IGPRoom.Builder {
            igpLastMessageBuilder_ = nil
            builderResult.hasIgpLastMessage = false
            builderResult.igpLastMessage = nil
            return self
        }
        public var igpReadOnly:Bool {
            get {
                return builderResult.igpReadOnly
            }
            set (value) {
                builderResult.hasIgpReadOnly = true
                builderResult.igpReadOnly = value
            }
        }
        public var hasIgpReadOnly:Bool {
            get {
                return builderResult.hasIgpReadOnly
            }
        }
        @discardableResult
        public func setIgpReadOnly(_ value:Bool) -> IGPRoom.Builder {
            self.igpReadOnly = value
            return self
        }
        @discardableResult
        public func clearIgpReadOnly() -> IGPRoom.Builder{
            builderResult.hasIgpReadOnly = false
            builderResult.igpReadOnly = false
            return self
        }
        public var igpIsParticipant:Bool {
            get {
                return builderResult.igpIsParticipant
            }
            set (value) {
                builderResult.hasIgpIsParticipant = true
                builderResult.igpIsParticipant = value
            }
        }
        public var hasIgpIsParticipant:Bool {
            get {
                return builderResult.hasIgpIsParticipant
            }
        }
        @discardableResult
        public func setIgpIsParticipant(_ value:Bool) -> IGPRoom.Builder {
            self.igpIsParticipant = value
            return self
        }
        @discardableResult
        public func clearIgpIsParticipant() -> IGPRoom.Builder{
            builderResult.hasIgpIsParticipant = false
            builderResult.igpIsParticipant = false
            return self
        }
        public var igpDraft:IGPRoomDraft! {
            get {
                if igpDraftBuilder_ != nil {
                    builderResult.igpDraft = igpDraftBuilder_.getMessage()
                }
                return builderResult.igpDraft
            }
            set (value) {
                builderResult.hasIgpDraft = true
                builderResult.igpDraft = value
            }
        }
        public var hasIgpDraft:Bool {
            get {
                return builderResult.hasIgpDraft
            }
        }
        fileprivate var igpDraftBuilder_:IGPRoomDraft.Builder! {
            didSet {
                builderResult.hasIgpDraft = true
            }
        }
        public func getIgpDraftBuilder() -> IGPRoomDraft.Builder {
            if igpDraftBuilder_ == nil {
                igpDraftBuilder_ = IGPRoomDraft.Builder()
                builderResult.igpDraft = igpDraftBuilder_.getMessage()
                if igpDraft != nil {
                    try! igpDraftBuilder_.mergeFrom(other: igpDraft)
                }
            }
            return igpDraftBuilder_
        }
        @discardableResult
        public func setIgpDraft(_ value:IGPRoomDraft!) -> IGPRoom.Builder {
            self.igpDraft = value
            return self
        }
        @discardableResult
        public func mergeIgpDraft(value:IGPRoomDraft) throws -> IGPRoom.Builder {
            if builderResult.hasIgpDraft {
                builderResult.igpDraft = try IGPRoomDraft.builderWithPrototype(prototype:builderResult.igpDraft).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpDraft = value
            }
            builderResult.hasIgpDraft = true
            return self
        }
        @discardableResult
        public func clearIgpDraft() -> IGPRoom.Builder {
            igpDraftBuilder_ = nil
            builderResult.hasIgpDraft = false
            builderResult.igpDraft = nil
            return self
        }
        public var igpChatRoomExtra:IGPChatRoom! {
            get {
                if igpChatRoomExtraBuilder_ != nil {
                    builderResult.igpChatRoomExtra = igpChatRoomExtraBuilder_.getMessage()
                }
                return builderResult.igpChatRoomExtra
            }
            set (value) {
                builderResult.hasIgpChatRoomExtra = true
                builderResult.igpChatRoomExtra = value
            }
        }
        public var hasIgpChatRoomExtra:Bool {
            get {
                return builderResult.hasIgpChatRoomExtra
            }
        }
        fileprivate var igpChatRoomExtraBuilder_:IGPChatRoom.Builder! {
            didSet {
                builderResult.hasIgpChatRoomExtra = true
            }
        }
        public func getIgpChatRoomExtraBuilder() -> IGPChatRoom.Builder {
            if igpChatRoomExtraBuilder_ == nil {
                igpChatRoomExtraBuilder_ = IGPChatRoom.Builder()
                builderResult.igpChatRoomExtra = igpChatRoomExtraBuilder_.getMessage()
                if igpChatRoomExtra != nil {
                    try! igpChatRoomExtraBuilder_.mergeFrom(other: igpChatRoomExtra)
                }
            }
            return igpChatRoomExtraBuilder_
        }
        @discardableResult
        public func setIgpChatRoomExtra(_ value:IGPChatRoom!) -> IGPRoom.Builder {
            self.igpChatRoomExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpChatRoomExtra(value:IGPChatRoom) throws -> IGPRoom.Builder {
            if builderResult.hasIgpChatRoomExtra {
                builderResult.igpChatRoomExtra = try IGPChatRoom.builderWithPrototype(prototype:builderResult.igpChatRoomExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpChatRoomExtra = value
            }
            builderResult.hasIgpChatRoomExtra = true
            return self
        }
        @discardableResult
        public func clearIgpChatRoomExtra() -> IGPRoom.Builder {
            igpChatRoomExtraBuilder_ = nil
            builderResult.hasIgpChatRoomExtra = false
            builderResult.igpChatRoomExtra = nil
            return self
        }
        public var igpGroupRoomExtra:IGPGroupRoom! {
            get {
                if igpGroupRoomExtraBuilder_ != nil {
                    builderResult.igpGroupRoomExtra = igpGroupRoomExtraBuilder_.getMessage()
                }
                return builderResult.igpGroupRoomExtra
            }
            set (value) {
                builderResult.hasIgpGroupRoomExtra = true
                builderResult.igpGroupRoomExtra = value
            }
        }
        public var hasIgpGroupRoomExtra:Bool {
            get {
                return builderResult.hasIgpGroupRoomExtra
            }
        }
        fileprivate var igpGroupRoomExtraBuilder_:IGPGroupRoom.Builder! {
            didSet {
                builderResult.hasIgpGroupRoomExtra = true
            }
        }
        public func getIgpGroupRoomExtraBuilder() -> IGPGroupRoom.Builder {
            if igpGroupRoomExtraBuilder_ == nil {
                igpGroupRoomExtraBuilder_ = IGPGroupRoom.Builder()
                builderResult.igpGroupRoomExtra = igpGroupRoomExtraBuilder_.getMessage()
                if igpGroupRoomExtra != nil {
                    try! igpGroupRoomExtraBuilder_.mergeFrom(other: igpGroupRoomExtra)
                }
            }
            return igpGroupRoomExtraBuilder_
        }
        @discardableResult
        public func setIgpGroupRoomExtra(_ value:IGPGroupRoom!) -> IGPRoom.Builder {
            self.igpGroupRoomExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpGroupRoomExtra(value:IGPGroupRoom) throws -> IGPRoom.Builder {
            if builderResult.hasIgpGroupRoomExtra {
                builderResult.igpGroupRoomExtra = try IGPGroupRoom.builderWithPrototype(prototype:builderResult.igpGroupRoomExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpGroupRoomExtra = value
            }
            builderResult.hasIgpGroupRoomExtra = true
            return self
        }
        @discardableResult
        public func clearIgpGroupRoomExtra() -> IGPRoom.Builder {
            igpGroupRoomExtraBuilder_ = nil
            builderResult.hasIgpGroupRoomExtra = false
            builderResult.igpGroupRoomExtra = nil
            return self
        }
        public var igpChannelRoomExtra:IGPChannelRoom! {
            get {
                if igpChannelRoomExtraBuilder_ != nil {
                    builderResult.igpChannelRoomExtra = igpChannelRoomExtraBuilder_.getMessage()
                }
                return builderResult.igpChannelRoomExtra
            }
            set (value) {
                builderResult.hasIgpChannelRoomExtra = true
                builderResult.igpChannelRoomExtra = value
            }
        }
        public var hasIgpChannelRoomExtra:Bool {
            get {
                return builderResult.hasIgpChannelRoomExtra
            }
        }
        fileprivate var igpChannelRoomExtraBuilder_:IGPChannelRoom.Builder! {
            didSet {
                builderResult.hasIgpChannelRoomExtra = true
            }
        }
        public func getIgpChannelRoomExtraBuilder() -> IGPChannelRoom.Builder {
            if igpChannelRoomExtraBuilder_ == nil {
                igpChannelRoomExtraBuilder_ = IGPChannelRoom.Builder()
                builderResult.igpChannelRoomExtra = igpChannelRoomExtraBuilder_.getMessage()
                if igpChannelRoomExtra != nil {
                    try! igpChannelRoomExtraBuilder_.mergeFrom(other: igpChannelRoomExtra)
                }
            }
            return igpChannelRoomExtraBuilder_
        }
        @discardableResult
        public func setIgpChannelRoomExtra(_ value:IGPChannelRoom!) -> IGPRoom.Builder {
            self.igpChannelRoomExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpChannelRoomExtra(value:IGPChannelRoom) throws -> IGPRoom.Builder {
            if builderResult.hasIgpChannelRoomExtra {
                builderResult.igpChannelRoomExtra = try IGPChannelRoom.builderWithPrototype(prototype:builderResult.igpChannelRoomExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpChannelRoomExtra = value
            }
            builderResult.hasIgpChannelRoomExtra = true
            return self
        }
        @discardableResult
        public func clearIgpChannelRoomExtra() -> IGPRoom.Builder {
            igpChannelRoomExtraBuilder_ = nil
            builderResult.hasIgpChannelRoomExtra = false
            builderResult.igpChannelRoomExtra = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPRoom.Builder {
            builderResult = IGPRoom()
            return self
        }
        override public func clone() throws -> IGPRoom.Builder {
            return try IGPRoom.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPRoom {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPRoom {
            let returnMe:IGPRoom = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPRoom) throws -> IGPRoom.Builder {
            if other == IGPRoom() {
                return self
            }
            if other.hasIgpId {
                igpId = other.igpId
            }
            if other.hasIgpType {
                igpType = other.igpType
            }
            if other.hasIgpTitle {
                igpTitle = other.igpTitle
            }
            if other.hasIgpInitials {
                igpInitials = other.igpInitials
            }
            if other.hasIgpColor {
                igpColor = other.igpColor
            }
            if other.hasIgpUnreadCount {
                igpUnreadCount = other.igpUnreadCount
            }
            if (other.hasIgpLastMessage) {
                try mergeIgpLastMessage(value: other.igpLastMessage)
            }
            if other.hasIgpReadOnly {
                igpReadOnly = other.igpReadOnly
            }
            if other.hasIgpIsParticipant {
                igpIsParticipant = other.igpIsParticipant
            }
            if (other.hasIgpDraft) {
                try mergeIgpDraft(value: other.igpDraft)
            }
            if (other.hasIgpChatRoomExtra) {
                try mergeIgpChatRoomExtra(value: other.igpChatRoomExtra)
            }
            if (other.hasIgpGroupRoomExtra) {
                try mergeIgpGroupRoomExtra(value: other.igpGroupRoomExtra)
            }
            if (other.hasIgpChannelRoomExtra) {
                try mergeIgpChannelRoomExtra(value: other.igpChannelRoomExtra)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPRoom.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoom.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    igpId = try codedInputStream.readInt64()

                case 16:
                    let valueIntigpType = try codedInputStream.readEnum()
                    if let enumsigpType = IGPRoom.IGPType(rawValue:valueIntigpType){
                        igpType = enumsigpType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntigpType))
                    }

                case 26:
                    igpTitle = try codedInputStream.readString()

                case 34:
                    igpInitials = try codedInputStream.readString()

                case 42:
                    igpColor = try codedInputStream.readString()

                case 48:
                    igpUnreadCount = try codedInputStream.readInt32()

                case 58:
                    let subBuilder:IGPRoomMessage.Builder = IGPRoomMessage.Builder()
                    if hasIgpLastMessage {
                        try subBuilder.mergeFrom(other: igpLastMessage)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpLastMessage = subBuilder.buildPartial()

                case 64:
                    igpReadOnly = try codedInputStream.readBool()

                case 72:
                    igpIsParticipant = try codedInputStream.readBool()

                case 82:
                    let subBuilder:IGPRoomDraft.Builder = IGPRoomDraft.Builder()
                    if hasIgpDraft {
                        try subBuilder.mergeFrom(other: igpDraft)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpDraft = subBuilder.buildPartial()

                case 90:
                    let subBuilder:IGPChatRoom.Builder = IGPChatRoom.Builder()
                    if hasIgpChatRoomExtra {
                        try subBuilder.mergeFrom(other: igpChatRoomExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpChatRoomExtra = subBuilder.buildPartial()

                case 98:
                    let subBuilder:IGPGroupRoom.Builder = IGPGroupRoom.Builder()
                    if hasIgpGroupRoomExtra {
                        try subBuilder.mergeFrom(other: igpGroupRoomExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpGroupRoomExtra = subBuilder.buildPartial()

                case 106:
                    let subBuilder:IGPChannelRoom.Builder = IGPChannelRoom.Builder()
                    if hasIgpChannelRoomExtra {
                        try subBuilder.mergeFrom(other: igpChannelRoomExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpChannelRoomExtra = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPRoom.Builder {
            let resultDecodedBuilder = IGPRoom.Builder()
            if let jsonValueIgpId = jsonMap["IGPId"] as? String {
                resultDecodedBuilder.igpId = Int64(jsonValueIgpId)!
            } else if let jsonValueIgpId = jsonMap["IGPId"] as? Int {
                resultDecodedBuilder.igpId = Int64(jsonValueIgpId)
            }
            if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                resultDecodedBuilder.igpType = try IGPRoom.IGPType.fromString(str: jsonValueIgpType)
            }
            if let jsonValueIgpTitle = jsonMap["IGPTitle"] as? String {
                resultDecodedBuilder.igpTitle = jsonValueIgpTitle
            }
            if let jsonValueIgpInitials = jsonMap["IGPInitials"] as? String {
                resultDecodedBuilder.igpInitials = jsonValueIgpInitials
            }
            if let jsonValueIgpColor = jsonMap["IGPColor"] as? String {
                resultDecodedBuilder.igpColor = jsonValueIgpColor
            }
            if let jsonValueIgpUnreadCount = jsonMap["IGPUnreadCount"] as? Int {
                resultDecodedBuilder.igpUnreadCount = Int32(jsonValueIgpUnreadCount)
            } else if let jsonValueIgpUnreadCount = jsonMap["IGPUnreadCount"] as? String {
                resultDecodedBuilder.igpUnreadCount = Int32(jsonValueIgpUnreadCount)!
            }
            if let jsonValueIgpLastMessage = jsonMap["IGPLastMessage"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpLastMessage = try IGPRoomMessage.Builder.decodeToBuilder(jsonMap:jsonValueIgpLastMessage).build()

            }
            if let jsonValueIgpReadOnly = jsonMap["IGPReadOnly"] as? Bool {
                resultDecodedBuilder.igpReadOnly = jsonValueIgpReadOnly
            }
            if let jsonValueIgpIsParticipant = jsonMap["IGPIsParticipant"] as? Bool {
                resultDecodedBuilder.igpIsParticipant = jsonValueIgpIsParticipant
            }
            if let jsonValueIgpDraft = jsonMap["IGPDraft"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpDraft = try IGPRoomDraft.Builder.decodeToBuilder(jsonMap:jsonValueIgpDraft).build()

            }
            if let jsonValueIgpChatRoomExtra = jsonMap["IGPChatRoomExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpChatRoomExtra = try IGPChatRoom.Builder.decodeToBuilder(jsonMap:jsonValueIgpChatRoomExtra).build()

            }
            if let jsonValueIgpGroupRoomExtra = jsonMap["IGPGroupRoomExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpGroupRoomExtra = try IGPGroupRoom.Builder.decodeToBuilder(jsonMap:jsonValueIgpGroupRoomExtra).build()

            }
            if let jsonValueIgpChannelRoomExtra = jsonMap["IGPChannelRoomExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpChannelRoomExtra = try IGPChannelRoom.Builder.decodeToBuilder(jsonMap:jsonValueIgpChannelRoomExtra).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPRoom.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPRoom.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPChatRoom : GeneratedMessage {

    public static func == (lhs: IGPChatRoom, rhs: IGPChatRoom) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpPeer == rhs.hasIgpPeer) && (!lhs.hasIgpPeer || lhs.igpPeer == rhs.igpPeer)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpPeer:IGPRegisteredUser!
    public fileprivate(set) var hasIgpPeer:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpPeer {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpPeer)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpPeer {
            if let varSizeigpPeer = igpPeer?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpPeer
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPChatRoom.Builder {
        return IGPChatRoom.classBuilder() as! IGPChatRoom.Builder
    }
    public func getBuilder() -> IGPChatRoom.Builder {
        return classBuilder() as! IGPChatRoom.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChatRoom.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChatRoom.Builder()
    }
    public func toBuilder() throws -> IGPChatRoom.Builder {
        return try IGPChatRoom.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPChatRoom) throws -> IGPChatRoom.Builder {
        return try IGPChatRoom.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpPeer {
            jsonMap["IGPPeer"] = try igpPeer.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpPeer {
            output += "\(indent) igpPeer {\n"
            if let outDescIgpPeer = igpPeer {
                output += try outDescIgpPeer.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpPeer {
                if let hashValueigpPeer = igpPeer?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpPeer
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPChatRoom"
    }
    override public func className() -> String {
        return "IGPChatRoom"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPChatRoom = IGPChatRoom()
        public func getMessage() -> IGPChatRoom {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpPeer:IGPRegisteredUser! {
            get {
                if igpPeerBuilder_ != nil {
                    builderResult.igpPeer = igpPeerBuilder_.getMessage()
                }
                return builderResult.igpPeer
            }
            set (value) {
                builderResult.hasIgpPeer = true
                builderResult.igpPeer = value
            }
        }
        public var hasIgpPeer:Bool {
            get {
                return builderResult.hasIgpPeer
            }
        }
        fileprivate var igpPeerBuilder_:IGPRegisteredUser.Builder! {
            didSet {
                builderResult.hasIgpPeer = true
            }
        }
        public func getIgpPeerBuilder() -> IGPRegisteredUser.Builder {
            if igpPeerBuilder_ == nil {
                igpPeerBuilder_ = IGPRegisteredUser.Builder()
                builderResult.igpPeer = igpPeerBuilder_.getMessage()
                if igpPeer != nil {
                    try! igpPeerBuilder_.mergeFrom(other: igpPeer)
                }
            }
            return igpPeerBuilder_
        }
        @discardableResult
        public func setIgpPeer(_ value:IGPRegisteredUser!) -> IGPChatRoom.Builder {
            self.igpPeer = value
            return self
        }
        @discardableResult
        public func mergeIgpPeer(value:IGPRegisteredUser) throws -> IGPChatRoom.Builder {
            if builderResult.hasIgpPeer {
                builderResult.igpPeer = try IGPRegisteredUser.builderWithPrototype(prototype:builderResult.igpPeer).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpPeer = value
            }
            builderResult.hasIgpPeer = true
            return self
        }
        @discardableResult
        public func clearIgpPeer() -> IGPChatRoom.Builder {
            igpPeerBuilder_ = nil
            builderResult.hasIgpPeer = false
            builderResult.igpPeer = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPChatRoom.Builder {
            builderResult = IGPChatRoom()
            return self
        }
        override public func clone() throws -> IGPChatRoom.Builder {
            return try IGPChatRoom.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPChatRoom {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPChatRoom {
            let returnMe:IGPChatRoom = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPChatRoom) throws -> IGPChatRoom.Builder {
            if other == IGPChatRoom() {
                return self
            }
            if (other.hasIgpPeer) {
                try mergeIgpPeer(value: other.igpPeer)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChatRoom.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatRoom.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRegisteredUser.Builder = IGPRegisteredUser.Builder()
                    if hasIgpPeer {
                        try subBuilder.mergeFrom(other: igpPeer)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpPeer = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChatRoom.Builder {
            let resultDecodedBuilder = IGPChatRoom.Builder()
            if let jsonValueIgpPeer = jsonMap["IGPPeer"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpPeer = try IGPRegisteredUser.Builder.decodeToBuilder(jsonMap:jsonValueIgpPeer).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPChatRoom.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPChatRoom.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPGroupRoom : GeneratedMessage {

    public static func == (lhs: IGPGroupRoom, rhs: IGPGroupRoom) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
        fieldCheck = fieldCheck && (lhs.hasIgpRole == rhs.hasIgpRole) && (!lhs.hasIgpRole || lhs.igpRole == rhs.igpRole)
        fieldCheck = fieldCheck && (lhs.hasIgpParticipantsCount == rhs.hasIgpParticipantsCount) && (!lhs.hasIgpParticipantsCount || lhs.igpParticipantsCount == rhs.igpParticipantsCount)
        fieldCheck = fieldCheck && (lhs.hasIgpParticipantsCountLabel == rhs.hasIgpParticipantsCountLabel) && (!lhs.hasIgpParticipantsCountLabel || lhs.igpParticipantsCountLabel == rhs.igpParticipantsCountLabel)
        fieldCheck = fieldCheck && (lhs.hasIgpParticipantsCountLimit == rhs.hasIgpParticipantsCountLimit) && (!lhs.hasIgpParticipantsCountLimit || lhs.igpParticipantsCountLimit == rhs.igpParticipantsCountLimit)
        fieldCheck = fieldCheck && (lhs.hasIgpParticipantsCountLimitLabel == rhs.hasIgpParticipantsCountLimitLabel) && (!lhs.hasIgpParticipantsCountLimitLabel || lhs.igpParticipantsCountLimitLabel == rhs.igpParticipantsCountLimitLabel)
        fieldCheck = fieldCheck && (lhs.hasIgpDescription == rhs.hasIgpDescription) && (!lhs.hasIgpDescription || lhs.igpDescription == rhs.igpDescription)
        fieldCheck = fieldCheck && (lhs.hasIgpAvatarCount == rhs.hasIgpAvatarCount) && (!lhs.hasIgpAvatarCount || lhs.igpAvatarCount == rhs.igpAvatarCount)
        fieldCheck = fieldCheck && (lhs.hasIgpAvatar == rhs.hasIgpAvatar) && (!lhs.hasIgpAvatar || lhs.igpAvatar == rhs.igpAvatar)
        fieldCheck = fieldCheck && (lhs.hasIgpPrivateExtra == rhs.hasIgpPrivateExtra) && (!lhs.hasIgpPrivateExtra || lhs.igpPrivateExtra == rhs.igpPrivateExtra)
        fieldCheck = fieldCheck && (lhs.hasIgpPublicExtra == rhs.hasIgpPublicExtra) && (!lhs.hasIgpPublicExtra || lhs.igpPublicExtra == rhs.igpPublicExtra)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPPrivateExtra : GeneratedMessage {

        public static func == (lhs: IGPGroupRoom.IGPPrivateExtra, rhs: IGPGroupRoom.IGPPrivateExtra) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpInviteLink == rhs.hasIgpInviteLink) && (!lhs.hasIgpInviteLink || lhs.igpInviteLink == rhs.igpInviteLink)
            fieldCheck = fieldCheck && (lhs.hasIgpInviteToken == rhs.hasIgpInviteToken) && (!lhs.hasIgpInviteToken || lhs.igpInviteToken == rhs.igpInviteToken)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpInviteLink:String = ""
        public fileprivate(set) var hasIgpInviteLink:Bool = false

        public fileprivate(set) var igpInviteToken:String = ""
        public fileprivate(set) var hasIgpInviteToken:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpInviteLink {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpInviteLink)
            }
            if hasIgpInviteToken {
                try codedOutputStream.writeString(fieldNumber: 2, value:igpInviteToken)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpInviteLink {
                serialize_size += igpInviteLink.computeStringSize(fieldNumber: 1)
            }
            if hasIgpInviteToken {
                serialize_size += igpInviteToken.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPGroupRoom.IGPPrivateExtra.Builder {
            return IGPGroupRoom.IGPPrivateExtra.classBuilder() as! IGPGroupRoom.IGPPrivateExtra.Builder
        }
        public func getBuilder() -> IGPGroupRoom.IGPPrivateExtra.Builder {
            return classBuilder() as! IGPGroupRoom.IGPPrivateExtra.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPGroupRoom.IGPPrivateExtra.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPGroupRoom.IGPPrivateExtra.Builder()
        }
        public func toBuilder() throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
            return try IGPGroupRoom.IGPPrivateExtra.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPGroupRoom.IGPPrivateExtra) throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
            return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpInviteLink {
                jsonMap["IGPInviteLink"] = igpInviteLink
            }
            if hasIgpInviteToken {
                jsonMap["IGPInviteToken"] = igpInviteToken
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupRoom.IGPPrivateExtra {
            return try IGPGroupRoom.IGPPrivateExtra.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPGroupRoom.IGPPrivateExtra {
            return try IGPGroupRoom.IGPPrivateExtra.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpInviteLink {
                output += "\(indent) igpInviteLink: \(igpInviteLink) \n"
            }
            if hasIgpInviteToken {
                output += "\(indent) igpInviteToken: \(igpInviteToken) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpInviteLink {
                    hashCode = (hashCode &* 31) &+ igpInviteLink.hashValue
                }
                if hasIgpInviteToken {
                    hashCode = (hashCode &* 31) &+ igpInviteToken.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPGroupRoom.IGPPrivateExtra"
        }
        override public func className() -> String {
            return "IGPGroupRoom.IGPPrivateExtra"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPGroupRoom.IGPPrivateExtra = IGPGroupRoom.IGPPrivateExtra()
            public func getMessage() -> IGPGroupRoom.IGPPrivateExtra {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpInviteLink:String {
                get {
                    return builderResult.igpInviteLink
                }
                set (value) {
                    builderResult.hasIgpInviteLink = true
                    builderResult.igpInviteLink = value
                }
            }
            public var hasIgpInviteLink:Bool {
                get {
                    return builderResult.hasIgpInviteLink
                }
            }
            @discardableResult
            public func setIgpInviteLink(_ value:String) -> IGPGroupRoom.IGPPrivateExtra.Builder {
                self.igpInviteLink = value
                return self
            }
            @discardableResult
            public func clearIgpInviteLink() -> IGPGroupRoom.IGPPrivateExtra.Builder{
                builderResult.hasIgpInviteLink = false
                builderResult.igpInviteLink = ""
                return self
            }
            public var igpInviteToken:String {
                get {
                    return builderResult.igpInviteToken
                }
                set (value) {
                    builderResult.hasIgpInviteToken = true
                    builderResult.igpInviteToken = value
                }
            }
            public var hasIgpInviteToken:Bool {
                get {
                    return builderResult.hasIgpInviteToken
                }
            }
            @discardableResult
            public func setIgpInviteToken(_ value:String) -> IGPGroupRoom.IGPPrivateExtra.Builder {
                self.igpInviteToken = value
                return self
            }
            @discardableResult
            public func clearIgpInviteToken() -> IGPGroupRoom.IGPPrivateExtra.Builder{
                builderResult.hasIgpInviteToken = false
                builderResult.igpInviteToken = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPGroupRoom.IGPPrivateExtra.Builder {
                builderResult = IGPGroupRoom.IGPPrivateExtra()
                return self
            }
            override public func clone() throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
                return try IGPGroupRoom.IGPPrivateExtra.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPGroupRoom.IGPPrivateExtra {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPGroupRoom.IGPPrivateExtra {
                let returnMe:IGPGroupRoom.IGPPrivateExtra = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPGroupRoom.IGPPrivateExtra) throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
                if other == IGPGroupRoom.IGPPrivateExtra() {
                    return self
                }
                if other.hasIgpInviteLink {
                    igpInviteLink = other.igpInviteLink
                }
                if other.hasIgpInviteToken {
                    igpInviteToken = other.igpInviteToken
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpInviteLink = try codedInputStream.readString()

                    case 18:
                        igpInviteToken = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
                let resultDecodedBuilder = IGPGroupRoom.IGPPrivateExtra.Builder()
                if let jsonValueIgpInviteLink = jsonMap["IGPInviteLink"] as? String {
                    resultDecodedBuilder.igpInviteLink = jsonValueIgpInviteLink
                }
                if let jsonValueIgpInviteToken = jsonMap["IGPInviteToken"] as? String {
                    resultDecodedBuilder.igpInviteToken = jsonValueIgpInviteToken
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupRoom.IGPPrivateExtra.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPGroupRoom.IGPPrivateExtra.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //Nested type declaration start

    final public class IGPPublicExtra : GeneratedMessage {

        public static func == (lhs: IGPGroupRoom.IGPPublicExtra, rhs: IGPGroupRoom.IGPPublicExtra) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpUsername == rhs.hasIgpUsername) && (!lhs.hasIgpUsername || lhs.igpUsername == rhs.igpUsername)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpUsername:String = ""
        public fileprivate(set) var hasIgpUsername:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpUsername {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpUsername)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpUsername {
                serialize_size += igpUsername.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPGroupRoom.IGPPublicExtra.Builder {
            return IGPGroupRoom.IGPPublicExtra.classBuilder() as! IGPGroupRoom.IGPPublicExtra.Builder
        }
        public func getBuilder() -> IGPGroupRoom.IGPPublicExtra.Builder {
            return classBuilder() as! IGPGroupRoom.IGPPublicExtra.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPGroupRoom.IGPPublicExtra.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPGroupRoom.IGPPublicExtra.Builder()
        }
        public func toBuilder() throws -> IGPGroupRoom.IGPPublicExtra.Builder {
            return try IGPGroupRoom.IGPPublicExtra.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPGroupRoom.IGPPublicExtra) throws -> IGPGroupRoom.IGPPublicExtra.Builder {
            return try IGPGroupRoom.IGPPublicExtra.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpUsername {
                jsonMap["IGPUsername"] = igpUsername
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupRoom.IGPPublicExtra {
            return try IGPGroupRoom.IGPPublicExtra.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPGroupRoom.IGPPublicExtra {
            return try IGPGroupRoom.IGPPublicExtra.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpUsername {
                output += "\(indent) igpUsername: \(igpUsername) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpUsername {
                    hashCode = (hashCode &* 31) &+ igpUsername.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPGroupRoom.IGPPublicExtra"
        }
        override public func className() -> String {
            return "IGPGroupRoom.IGPPublicExtra"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPGroupRoom.IGPPublicExtra = IGPGroupRoom.IGPPublicExtra()
            public func getMessage() -> IGPGroupRoom.IGPPublicExtra {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpUsername:String {
                get {
                    return builderResult.igpUsername
                }
                set (value) {
                    builderResult.hasIgpUsername = true
                    builderResult.igpUsername = value
                }
            }
            public var hasIgpUsername:Bool {
                get {
                    return builderResult.hasIgpUsername
                }
            }
            @discardableResult
            public func setIgpUsername(_ value:String) -> IGPGroupRoom.IGPPublicExtra.Builder {
                self.igpUsername = value
                return self
            }
            @discardableResult
            public func clearIgpUsername() -> IGPGroupRoom.IGPPublicExtra.Builder{
                builderResult.hasIgpUsername = false
                builderResult.igpUsername = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPGroupRoom.IGPPublicExtra.Builder {
                builderResult = IGPGroupRoom.IGPPublicExtra()
                return self
            }
            override public func clone() throws -> IGPGroupRoom.IGPPublicExtra.Builder {
                return try IGPGroupRoom.IGPPublicExtra.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPGroupRoom.IGPPublicExtra {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPGroupRoom.IGPPublicExtra {
                let returnMe:IGPGroupRoom.IGPPublicExtra = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPGroupRoom.IGPPublicExtra) throws -> IGPGroupRoom.IGPPublicExtra.Builder {
                if other == IGPGroupRoom.IGPPublicExtra() {
                    return self
                }
                if other.hasIgpUsername {
                    igpUsername = other.igpUsername
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupRoom.IGPPublicExtra.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPublicExtra.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpUsername = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupRoom.IGPPublicExtra.Builder {
                let resultDecodedBuilder = IGPGroupRoom.IGPPublicExtra.Builder()
                if let jsonValueIgpUsername = jsonMap["IGPUsername"] as? String {
                    resultDecodedBuilder.igpUsername = jsonValueIgpUsername
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupRoom.IGPPublicExtra.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPGroupRoom.IGPPublicExtra.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case privateRoom = 0
            case publicRoom = 1
            public func toString() -> String {
                switch self {
                case .privateRoom: return "PRIVATE_ROOM"
                case .publicRoom: return "PUBLIC_ROOM"
                }
            }
            public static func fromString(str:String) throws -> IGPGroupRoom.IGPType {
                switch str {
                case "PRIVATE_ROOM":    return .privateRoom
                case "PUBLIC_ROOM":    return .publicRoom
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .privateRoom: return ".privateRoom"
                case .publicRoom: return ".publicRoom"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPType, rhs:IGPType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 



        //Enum type declaration start 

        public enum IGPRole:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case member = 0
            case moderator = 1
            case admin = 2
            case owner = 3
            public func toString() -> String {
                switch self {
                case .member: return "MEMBER"
                case .moderator: return "MODERATOR"
                case .admin: return "ADMIN"
                case .owner: return "OWNER"
                }
            }
            public static func fromString(str:String) throws -> IGPGroupRoom.IGPRole {
                switch str {
                case "MEMBER":    return .member
                case "MODERATOR":    return .moderator
                case "ADMIN":    return .admin
                case "OWNER":    return .owner
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .member: return ".member"
                case .moderator: return ".moderator"
                case .admin: return ".admin"
                case .owner: return ".owner"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPRole, rhs:IGPRole) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpType:IGPGroupRoom.IGPType = IGPGroupRoom.IGPType.privateRoom
    public fileprivate(set) var hasIgpType:Bool = false
    public fileprivate(set) var igpRole:IGPGroupRoom.IGPRole = IGPGroupRoom.IGPRole.member
    public fileprivate(set) var hasIgpRole:Bool = false
    public fileprivate(set) var igpParticipantsCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpParticipantsCount:Bool = false

    public fileprivate(set) var igpParticipantsCountLabel:String = ""
    public fileprivate(set) var hasIgpParticipantsCountLabel:Bool = false

    public fileprivate(set) var igpParticipantsCountLimit:Int32 = Int32(0)
    public fileprivate(set) var hasIgpParticipantsCountLimit:Bool = false

    public fileprivate(set) var igpParticipantsCountLimitLabel:String = ""
    public fileprivate(set) var hasIgpParticipantsCountLimitLabel:Bool = false

    public fileprivate(set) var igpDescription:String = ""
    public fileprivate(set) var hasIgpDescription:Bool = false

    public fileprivate(set) var igpAvatarCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpAvatarCount:Bool = false

    public fileprivate(set) var igpAvatar:IGPAvatar!
    public fileprivate(set) var hasIgpAvatar:Bool = false
    public fileprivate(set) var igpPrivateExtra:IGPGroupRoom.IGPPrivateExtra!
    public fileprivate(set) var hasIgpPrivateExtra:Bool = false
    public fileprivate(set) var igpPublicExtra:IGPGroupRoom.IGPPublicExtra!
    public fileprivate(set) var hasIgpPublicExtra:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpType {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:igpType.rawValue)
        }
        if hasIgpRole {
            try codedOutputStream.writeEnum(fieldNumber: 2, value:igpRole.rawValue)
        }
        if hasIgpParticipantsCount {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpParticipantsCount)
        }
        if hasIgpParticipantsCountLabel {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpParticipantsCountLabel)
        }
        if hasIgpParticipantsCountLimit {
            try codedOutputStream.writeInt32(fieldNumber: 5, value:igpParticipantsCountLimit)
        }
        if hasIgpParticipantsCountLimitLabel {
            try codedOutputStream.writeString(fieldNumber: 6, value:igpParticipantsCountLimitLabel)
        }
        if hasIgpDescription {
            try codedOutputStream.writeString(fieldNumber: 7, value:igpDescription)
        }
        if hasIgpAvatarCount {
            try codedOutputStream.writeInt32(fieldNumber: 8, value:igpAvatarCount)
        }
        if hasIgpAvatar {
            try codedOutputStream.writeMessage(fieldNumber: 9, value:igpAvatar)
        }
        if hasIgpPrivateExtra {
            try codedOutputStream.writeMessage(fieldNumber: 10, value:igpPrivateExtra)
        }
        if hasIgpPublicExtra {
            try codedOutputStream.writeMessage(fieldNumber: 11, value:igpPublicExtra)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if (hasIgpType) {
            serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 1)
        }
        if (hasIgpRole) {
            serialize_size += igpRole.rawValue.computeEnumSize(fieldNumber: 2)
        }
        if hasIgpParticipantsCount {
            serialize_size += igpParticipantsCount.computeInt32Size(fieldNumber: 3)
        }
        if hasIgpParticipantsCountLabel {
            serialize_size += igpParticipantsCountLabel.computeStringSize(fieldNumber: 4)
        }
        if hasIgpParticipantsCountLimit {
            serialize_size += igpParticipantsCountLimit.computeInt32Size(fieldNumber: 5)
        }
        if hasIgpParticipantsCountLimitLabel {
            serialize_size += igpParticipantsCountLimitLabel.computeStringSize(fieldNumber: 6)
        }
        if hasIgpDescription {
            serialize_size += igpDescription.computeStringSize(fieldNumber: 7)
        }
        if hasIgpAvatarCount {
            serialize_size += igpAvatarCount.computeInt32Size(fieldNumber: 8)
        }
        if hasIgpAvatar {
            if let varSizeigpAvatar = igpAvatar?.computeMessageSize(fieldNumber: 9) {
                serialize_size += varSizeigpAvatar
            }
        }
        if hasIgpPrivateExtra {
            if let varSizeigpPrivateExtra = igpPrivateExtra?.computeMessageSize(fieldNumber: 10) {
                serialize_size += varSizeigpPrivateExtra
            }
        }
        if hasIgpPublicExtra {
            if let varSizeigpPublicExtra = igpPublicExtra?.computeMessageSize(fieldNumber: 11) {
                serialize_size += varSizeigpPublicExtra
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPGroupRoom.Builder {
        return IGPGroupRoom.classBuilder() as! IGPGroupRoom.Builder
    }
    public func getBuilder() -> IGPGroupRoom.Builder {
        return classBuilder() as! IGPGroupRoom.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupRoom.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupRoom.Builder()
    }
    public func toBuilder() throws -> IGPGroupRoom.Builder {
        return try IGPGroupRoom.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPGroupRoom) throws -> IGPGroupRoom.Builder {
        return try IGPGroupRoom.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpType {
            jsonMap["IGPType"] = igpType.toString()
        }
        if hasIgpRole {
            jsonMap["IGPRole"] = igpRole.toString()
        }
        if hasIgpParticipantsCount {
            jsonMap["IGPParticipantsCount"] = Int(igpParticipantsCount)
        }
        if hasIgpParticipantsCountLabel {
            jsonMap["IGPParticipantsCountLabel"] = igpParticipantsCountLabel
        }
        if hasIgpParticipantsCountLimit {
            jsonMap["IGPParticipantsCountLimit"] = Int(igpParticipantsCountLimit)
        }
        if hasIgpParticipantsCountLimitLabel {
            jsonMap["IGPParticipantsCountLimitLabel"] = igpParticipantsCountLimitLabel
        }
        if hasIgpDescription {
            jsonMap["IGPDescription"] = igpDescription
        }
        if hasIgpAvatarCount {
            jsonMap["IGPAvatarCount"] = Int(igpAvatarCount)
        }
        if hasIgpAvatar {
            jsonMap["IGPAvatar"] = try igpAvatar.encode()
        }
        if hasIgpPrivateExtra {
            jsonMap["IGPPrivateExtra"] = try igpPrivateExtra.encode()
        }
        if hasIgpPublicExtra {
            jsonMap["IGPPublicExtra"] = try igpPublicExtra.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if (hasIgpType) {
            output += "\(indent) igpType: \(igpType.description)\n"
        }
        if (hasIgpRole) {
            output += "\(indent) igpRole: \(igpRole.description)\n"
        }
        if hasIgpParticipantsCount {
            output += "\(indent) igpParticipantsCount: \(igpParticipantsCount) \n"
        }
        if hasIgpParticipantsCountLabel {
            output += "\(indent) igpParticipantsCountLabel: \(igpParticipantsCountLabel) \n"
        }
        if hasIgpParticipantsCountLimit {
            output += "\(indent) igpParticipantsCountLimit: \(igpParticipantsCountLimit) \n"
        }
        if hasIgpParticipantsCountLimitLabel {
            output += "\(indent) igpParticipantsCountLimitLabel: \(igpParticipantsCountLimitLabel) \n"
        }
        if hasIgpDescription {
            output += "\(indent) igpDescription: \(igpDescription) \n"
        }
        if hasIgpAvatarCount {
            output += "\(indent) igpAvatarCount: \(igpAvatarCount) \n"
        }
        if hasIgpAvatar {
            output += "\(indent) igpAvatar {\n"
            if let outDescIgpAvatar = igpAvatar {
                output += try outDescIgpAvatar.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPrivateExtra {
            output += "\(indent) igpPrivateExtra {\n"
            if let outDescIgpPrivateExtra = igpPrivateExtra {
                output += try outDescIgpPrivateExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPublicExtra {
            output += "\(indent) igpPublicExtra {\n"
            if let outDescIgpPublicExtra = igpPublicExtra {
                output += try outDescIgpPublicExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpType {
                 hashCode = (hashCode &* 31) &+ igpType.hashValue
            }
            if hasIgpRole {
                 hashCode = (hashCode &* 31) &+ igpRole.hashValue
            }
            if hasIgpParticipantsCount {
                hashCode = (hashCode &* 31) &+ igpParticipantsCount.hashValue
            }
            if hasIgpParticipantsCountLabel {
                hashCode = (hashCode &* 31) &+ igpParticipantsCountLabel.hashValue
            }
            if hasIgpParticipantsCountLimit {
                hashCode = (hashCode &* 31) &+ igpParticipantsCountLimit.hashValue
            }
            if hasIgpParticipantsCountLimitLabel {
                hashCode = (hashCode &* 31) &+ igpParticipantsCountLimitLabel.hashValue
            }
            if hasIgpDescription {
                hashCode = (hashCode &* 31) &+ igpDescription.hashValue
            }
            if hasIgpAvatarCount {
                hashCode = (hashCode &* 31) &+ igpAvatarCount.hashValue
            }
            if hasIgpAvatar {
                if let hashValueigpAvatar = igpAvatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpAvatar
                }
            }
            if hasIgpPrivateExtra {
                if let hashValueigpPrivateExtra = igpPrivateExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpPrivateExtra
                }
            }
            if hasIgpPublicExtra {
                if let hashValueigpPublicExtra = igpPublicExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpPublicExtra
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPGroupRoom"
    }
    override public func className() -> String {
        return "IGPGroupRoom"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPGroupRoom = IGPGroupRoom()
        public func getMessage() -> IGPGroupRoom {
            return builderResult
        }

        required override public init () {
            super.init()
        }
            public var igpType:IGPGroupRoom.IGPType {
                get {
                    return builderResult.igpType
                }
                set (value) {
                    builderResult.hasIgpType = true
                    builderResult.igpType = value
                }
            }
            public var hasIgpType:Bool{
                get {
                    return builderResult.hasIgpType
                }
            }
        @discardableResult
            public func setIgpType(_ value:IGPGroupRoom.IGPType) -> IGPGroupRoom.Builder {
              self.igpType = value
              return self
            }
        @discardableResult
            public func clearIgpType() -> IGPGroupRoom.Builder {
               builderResult.hasIgpType = false
               builderResult.igpType = .privateRoom
               return self
            }
            public var igpRole:IGPGroupRoom.IGPRole {
                get {
                    return builderResult.igpRole
                }
                set (value) {
                    builderResult.hasIgpRole = true
                    builderResult.igpRole = value
                }
            }
            public var hasIgpRole:Bool{
                get {
                    return builderResult.hasIgpRole
                }
            }
        @discardableResult
            public func setIgpRole(_ value:IGPGroupRoom.IGPRole) -> IGPGroupRoom.Builder {
              self.igpRole = value
              return self
            }
        @discardableResult
            public func clearIgpRole() -> IGPGroupRoom.Builder {
               builderResult.hasIgpRole = false
               builderResult.igpRole = .member
               return self
            }
        public var igpParticipantsCount:Int32 {
            get {
                return builderResult.igpParticipantsCount
            }
            set (value) {
                builderResult.hasIgpParticipantsCount = true
                builderResult.igpParticipantsCount = value
            }
        }
        public var hasIgpParticipantsCount:Bool {
            get {
                return builderResult.hasIgpParticipantsCount
            }
        }
        @discardableResult
        public func setIgpParticipantsCount(_ value:Int32) -> IGPGroupRoom.Builder {
            self.igpParticipantsCount = value
            return self
        }
        @discardableResult
        public func clearIgpParticipantsCount() -> IGPGroupRoom.Builder{
            builderResult.hasIgpParticipantsCount = false
            builderResult.igpParticipantsCount = Int32(0)
            return self
        }
        public var igpParticipantsCountLabel:String {
            get {
                return builderResult.igpParticipantsCountLabel
            }
            set (value) {
                builderResult.hasIgpParticipantsCountLabel = true
                builderResult.igpParticipantsCountLabel = value
            }
        }
        public var hasIgpParticipantsCountLabel:Bool {
            get {
                return builderResult.hasIgpParticipantsCountLabel
            }
        }
        @discardableResult
        public func setIgpParticipantsCountLabel(_ value:String) -> IGPGroupRoom.Builder {
            self.igpParticipantsCountLabel = value
            return self
        }
        @discardableResult
        public func clearIgpParticipantsCountLabel() -> IGPGroupRoom.Builder{
            builderResult.hasIgpParticipantsCountLabel = false
            builderResult.igpParticipantsCountLabel = ""
            return self
        }
        public var igpParticipantsCountLimit:Int32 {
            get {
                return builderResult.igpParticipantsCountLimit
            }
            set (value) {
                builderResult.hasIgpParticipantsCountLimit = true
                builderResult.igpParticipantsCountLimit = value
            }
        }
        public var hasIgpParticipantsCountLimit:Bool {
            get {
                return builderResult.hasIgpParticipantsCountLimit
            }
        }
        @discardableResult
        public func setIgpParticipantsCountLimit(_ value:Int32) -> IGPGroupRoom.Builder {
            self.igpParticipantsCountLimit = value
            return self
        }
        @discardableResult
        public func clearIgpParticipantsCountLimit() -> IGPGroupRoom.Builder{
            builderResult.hasIgpParticipantsCountLimit = false
            builderResult.igpParticipantsCountLimit = Int32(0)
            return self
        }
        public var igpParticipantsCountLimitLabel:String {
            get {
                return builderResult.igpParticipantsCountLimitLabel
            }
            set (value) {
                builderResult.hasIgpParticipantsCountLimitLabel = true
                builderResult.igpParticipantsCountLimitLabel = value
            }
        }
        public var hasIgpParticipantsCountLimitLabel:Bool {
            get {
                return builderResult.hasIgpParticipantsCountLimitLabel
            }
        }
        @discardableResult
        public func setIgpParticipantsCountLimitLabel(_ value:String) -> IGPGroupRoom.Builder {
            self.igpParticipantsCountLimitLabel = value
            return self
        }
        @discardableResult
        public func clearIgpParticipantsCountLimitLabel() -> IGPGroupRoom.Builder{
            builderResult.hasIgpParticipantsCountLimitLabel = false
            builderResult.igpParticipantsCountLimitLabel = ""
            return self
        }
        public var igpDescription:String {
            get {
                return builderResult.igpDescription
            }
            set (value) {
                builderResult.hasIgpDescription = true
                builderResult.igpDescription = value
            }
        }
        public var hasIgpDescription:Bool {
            get {
                return builderResult.hasIgpDescription
            }
        }
        @discardableResult
        public func setIgpDescription(_ value:String) -> IGPGroupRoom.Builder {
            self.igpDescription = value
            return self
        }
        @discardableResult
        public func clearIgpDescription() -> IGPGroupRoom.Builder{
            builderResult.hasIgpDescription = false
            builderResult.igpDescription = ""
            return self
        }
        public var igpAvatarCount:Int32 {
            get {
                return builderResult.igpAvatarCount
            }
            set (value) {
                builderResult.hasIgpAvatarCount = true
                builderResult.igpAvatarCount = value
            }
        }
        public var hasIgpAvatarCount:Bool {
            get {
                return builderResult.hasIgpAvatarCount
            }
        }
        @discardableResult
        public func setIgpAvatarCount(_ value:Int32) -> IGPGroupRoom.Builder {
            self.igpAvatarCount = value
            return self
        }
        @discardableResult
        public func clearIgpAvatarCount() -> IGPGroupRoom.Builder{
            builderResult.hasIgpAvatarCount = false
            builderResult.igpAvatarCount = Int32(0)
            return self
        }
        public var igpAvatar:IGPAvatar! {
            get {
                if igpAvatarBuilder_ != nil {
                    builderResult.igpAvatar = igpAvatarBuilder_.getMessage()
                }
                return builderResult.igpAvatar
            }
            set (value) {
                builderResult.hasIgpAvatar = true
                builderResult.igpAvatar = value
            }
        }
        public var hasIgpAvatar:Bool {
            get {
                return builderResult.hasIgpAvatar
            }
        }
        fileprivate var igpAvatarBuilder_:IGPAvatar.Builder! {
            didSet {
                builderResult.hasIgpAvatar = true
            }
        }
        public func getIgpAvatarBuilder() -> IGPAvatar.Builder {
            if igpAvatarBuilder_ == nil {
                igpAvatarBuilder_ = IGPAvatar.Builder()
                builderResult.igpAvatar = igpAvatarBuilder_.getMessage()
                if igpAvatar != nil {
                    try! igpAvatarBuilder_.mergeFrom(other: igpAvatar)
                }
            }
            return igpAvatarBuilder_
        }
        @discardableResult
        public func setIgpAvatar(_ value:IGPAvatar!) -> IGPGroupRoom.Builder {
            self.igpAvatar = value
            return self
        }
        @discardableResult
        public func mergeIgpAvatar(value:IGPAvatar) throws -> IGPGroupRoom.Builder {
            if builderResult.hasIgpAvatar {
                builderResult.igpAvatar = try IGPAvatar.builderWithPrototype(prototype:builderResult.igpAvatar).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpAvatar = value
            }
            builderResult.hasIgpAvatar = true
            return self
        }
        @discardableResult
        public func clearIgpAvatar() -> IGPGroupRoom.Builder {
            igpAvatarBuilder_ = nil
            builderResult.hasIgpAvatar = false
            builderResult.igpAvatar = nil
            return self
        }
        public var igpPrivateExtra:IGPGroupRoom.IGPPrivateExtra! {
            get {
                if igpPrivateExtraBuilder_ != nil {
                    builderResult.igpPrivateExtra = igpPrivateExtraBuilder_.getMessage()
                }
                return builderResult.igpPrivateExtra
            }
            set (value) {
                builderResult.hasIgpPrivateExtra = true
                builderResult.igpPrivateExtra = value
            }
        }
        public var hasIgpPrivateExtra:Bool {
            get {
                return builderResult.hasIgpPrivateExtra
            }
        }
        fileprivate var igpPrivateExtraBuilder_:IGPGroupRoom.IGPPrivateExtra.Builder! {
            didSet {
                builderResult.hasIgpPrivateExtra = true
            }
        }
        public func getIgpPrivateExtraBuilder() -> IGPGroupRoom.IGPPrivateExtra.Builder {
            if igpPrivateExtraBuilder_ == nil {
                igpPrivateExtraBuilder_ = IGPGroupRoom.IGPPrivateExtra.Builder()
                builderResult.igpPrivateExtra = igpPrivateExtraBuilder_.getMessage()
                if igpPrivateExtra != nil {
                    try! igpPrivateExtraBuilder_.mergeFrom(other: igpPrivateExtra)
                }
            }
            return igpPrivateExtraBuilder_
        }
        @discardableResult
        public func setIgpPrivateExtra(_ value:IGPGroupRoom.IGPPrivateExtra!) -> IGPGroupRoom.Builder {
            self.igpPrivateExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpPrivateExtra(value:IGPGroupRoom.IGPPrivateExtra) throws -> IGPGroupRoom.Builder {
            if builderResult.hasIgpPrivateExtra {
                builderResult.igpPrivateExtra = try IGPGroupRoom.IGPPrivateExtra.builderWithPrototype(prototype:builderResult.igpPrivateExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpPrivateExtra = value
            }
            builderResult.hasIgpPrivateExtra = true
            return self
        }
        @discardableResult
        public func clearIgpPrivateExtra() -> IGPGroupRoom.Builder {
            igpPrivateExtraBuilder_ = nil
            builderResult.hasIgpPrivateExtra = false
            builderResult.igpPrivateExtra = nil
            return self
        }
        public var igpPublicExtra:IGPGroupRoom.IGPPublicExtra! {
            get {
                if igpPublicExtraBuilder_ != nil {
                    builderResult.igpPublicExtra = igpPublicExtraBuilder_.getMessage()
                }
                return builderResult.igpPublicExtra
            }
            set (value) {
                builderResult.hasIgpPublicExtra = true
                builderResult.igpPublicExtra = value
            }
        }
        public var hasIgpPublicExtra:Bool {
            get {
                return builderResult.hasIgpPublicExtra
            }
        }
        fileprivate var igpPublicExtraBuilder_:IGPGroupRoom.IGPPublicExtra.Builder! {
            didSet {
                builderResult.hasIgpPublicExtra = true
            }
        }
        public func getIgpPublicExtraBuilder() -> IGPGroupRoom.IGPPublicExtra.Builder {
            if igpPublicExtraBuilder_ == nil {
                igpPublicExtraBuilder_ = IGPGroupRoom.IGPPublicExtra.Builder()
                builderResult.igpPublicExtra = igpPublicExtraBuilder_.getMessage()
                if igpPublicExtra != nil {
                    try! igpPublicExtraBuilder_.mergeFrom(other: igpPublicExtra)
                }
            }
            return igpPublicExtraBuilder_
        }
        @discardableResult
        public func setIgpPublicExtra(_ value:IGPGroupRoom.IGPPublicExtra!) -> IGPGroupRoom.Builder {
            self.igpPublicExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpPublicExtra(value:IGPGroupRoom.IGPPublicExtra) throws -> IGPGroupRoom.Builder {
            if builderResult.hasIgpPublicExtra {
                builderResult.igpPublicExtra = try IGPGroupRoom.IGPPublicExtra.builderWithPrototype(prototype:builderResult.igpPublicExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpPublicExtra = value
            }
            builderResult.hasIgpPublicExtra = true
            return self
        }
        @discardableResult
        public func clearIgpPublicExtra() -> IGPGroupRoom.Builder {
            igpPublicExtraBuilder_ = nil
            builderResult.hasIgpPublicExtra = false
            builderResult.igpPublicExtra = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPGroupRoom.Builder {
            builderResult = IGPGroupRoom()
            return self
        }
        override public func clone() throws -> IGPGroupRoom.Builder {
            return try IGPGroupRoom.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPGroupRoom {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPGroupRoom {
            let returnMe:IGPGroupRoom = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPGroupRoom) throws -> IGPGroupRoom.Builder {
            if other == IGPGroupRoom() {
                return self
            }
            if other.hasIgpType {
                igpType = other.igpType
            }
            if other.hasIgpRole {
                igpRole = other.igpRole
            }
            if other.hasIgpParticipantsCount {
                igpParticipantsCount = other.igpParticipantsCount
            }
            if other.hasIgpParticipantsCountLabel {
                igpParticipantsCountLabel = other.igpParticipantsCountLabel
            }
            if other.hasIgpParticipantsCountLimit {
                igpParticipantsCountLimit = other.igpParticipantsCountLimit
            }
            if other.hasIgpParticipantsCountLimitLabel {
                igpParticipantsCountLimitLabel = other.igpParticipantsCountLimitLabel
            }
            if other.hasIgpDescription {
                igpDescription = other.igpDescription
            }
            if other.hasIgpAvatarCount {
                igpAvatarCount = other.igpAvatarCount
            }
            if (other.hasIgpAvatar) {
                try mergeIgpAvatar(value: other.igpAvatar)
            }
            if (other.hasIgpPrivateExtra) {
                try mergeIgpPrivateExtra(value: other.igpPrivateExtra)
            }
            if (other.hasIgpPublicExtra) {
                try mergeIgpPublicExtra(value: other.igpPublicExtra)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupRoom.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    let valueIntigpType = try codedInputStream.readEnum()
                    if let enumsigpType = IGPGroupRoom.IGPType(rawValue:valueIntigpType){
                        igpType = enumsigpType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntigpType))
                    }

                case 16:
                    let valueIntigpRole = try codedInputStream.readEnum()
                    if let enumsigpRole = IGPGroupRoom.IGPRole(rawValue:valueIntigpRole){
                        igpRole = enumsigpRole
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntigpRole))
                    }

                case 24:
                    igpParticipantsCount = try codedInputStream.readInt32()

                case 34:
                    igpParticipantsCountLabel = try codedInputStream.readString()

                case 40:
                    igpParticipantsCountLimit = try codedInputStream.readInt32()

                case 50:
                    igpParticipantsCountLimitLabel = try codedInputStream.readString()

                case 58:
                    igpDescription = try codedInputStream.readString()

                case 64:
                    igpAvatarCount = try codedInputStream.readInt32()

                case 74:
                    let subBuilder:IGPAvatar.Builder = IGPAvatar.Builder()
                    if hasIgpAvatar {
                        try subBuilder.mergeFrom(other: igpAvatar)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpAvatar = subBuilder.buildPartial()

                case 82:
                    let subBuilder:IGPGroupRoom.IGPPrivateExtra.Builder = IGPGroupRoom.IGPPrivateExtra.Builder()
                    if hasIgpPrivateExtra {
                        try subBuilder.mergeFrom(other: igpPrivateExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpPrivateExtra = subBuilder.buildPartial()

                case 90:
                    let subBuilder:IGPGroupRoom.IGPPublicExtra.Builder = IGPGroupRoom.IGPPublicExtra.Builder()
                    if hasIgpPublicExtra {
                        try subBuilder.mergeFrom(other: igpPublicExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpPublicExtra = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupRoom.Builder {
            let resultDecodedBuilder = IGPGroupRoom.Builder()
            if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                resultDecodedBuilder.igpType = try IGPGroupRoom.IGPType.fromString(str: jsonValueIgpType)
            }
            if let jsonValueIgpRole = jsonMap["IGPRole"] as? String {
                resultDecodedBuilder.igpRole = try IGPGroupRoom.IGPRole.fromString(str: jsonValueIgpRole)
            }
            if let jsonValueIgpParticipantsCount = jsonMap["IGPParticipantsCount"] as? Int {
                resultDecodedBuilder.igpParticipantsCount = Int32(jsonValueIgpParticipantsCount)
            } else if let jsonValueIgpParticipantsCount = jsonMap["IGPParticipantsCount"] as? String {
                resultDecodedBuilder.igpParticipantsCount = Int32(jsonValueIgpParticipantsCount)!
            }
            if let jsonValueIgpParticipantsCountLabel = jsonMap["IGPParticipantsCountLabel"] as? String {
                resultDecodedBuilder.igpParticipantsCountLabel = jsonValueIgpParticipantsCountLabel
            }
            if let jsonValueIgpParticipantsCountLimit = jsonMap["IGPParticipantsCountLimit"] as? Int {
                resultDecodedBuilder.igpParticipantsCountLimit = Int32(jsonValueIgpParticipantsCountLimit)
            } else if let jsonValueIgpParticipantsCountLimit = jsonMap["IGPParticipantsCountLimit"] as? String {
                resultDecodedBuilder.igpParticipantsCountLimit = Int32(jsonValueIgpParticipantsCountLimit)!
            }
            if let jsonValueIgpParticipantsCountLimitLabel = jsonMap["IGPParticipantsCountLimitLabel"] as? String {
                resultDecodedBuilder.igpParticipantsCountLimitLabel = jsonValueIgpParticipantsCountLimitLabel
            }
            if let jsonValueIgpDescription = jsonMap["IGPDescription"] as? String {
                resultDecodedBuilder.igpDescription = jsonValueIgpDescription
            }
            if let jsonValueIgpAvatarCount = jsonMap["IGPAvatarCount"] as? Int {
                resultDecodedBuilder.igpAvatarCount = Int32(jsonValueIgpAvatarCount)
            } else if let jsonValueIgpAvatarCount = jsonMap["IGPAvatarCount"] as? String {
                resultDecodedBuilder.igpAvatarCount = Int32(jsonValueIgpAvatarCount)!
            }
            if let jsonValueIgpAvatar = jsonMap["IGPAvatar"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpAvatar = try IGPAvatar.Builder.decodeToBuilder(jsonMap:jsonValueIgpAvatar).build()

            }
            if let jsonValueIgpPrivateExtra = jsonMap["IGPPrivateExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpPrivateExtra = try IGPGroupRoom.IGPPrivateExtra.Builder.decodeToBuilder(jsonMap:jsonValueIgpPrivateExtra).build()

            }
            if let jsonValueIgpPublicExtra = jsonMap["IGPPublicExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpPublicExtra = try IGPGroupRoom.IGPPublicExtra.Builder.decodeToBuilder(jsonMap:jsonValueIgpPublicExtra).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupRoom.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPGroupRoom.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPChannelRoom : GeneratedMessage {

    public static func == (lhs: IGPChannelRoom, rhs: IGPChannelRoom) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
        fieldCheck = fieldCheck && (lhs.hasIgpRole == rhs.hasIgpRole) && (!lhs.hasIgpRole || lhs.igpRole == rhs.igpRole)
        fieldCheck = fieldCheck && (lhs.hasIgpParticipantsCount == rhs.hasIgpParticipantsCount) && (!lhs.hasIgpParticipantsCount || lhs.igpParticipantsCount == rhs.igpParticipantsCount)
        fieldCheck = fieldCheck && (lhs.hasIgpParticipantsCountLabel == rhs.hasIgpParticipantsCountLabel) && (!lhs.hasIgpParticipantsCountLabel || lhs.igpParticipantsCountLabel == rhs.igpParticipantsCountLabel)
        fieldCheck = fieldCheck && (lhs.hasIgpDescription == rhs.hasIgpDescription) && (!lhs.hasIgpDescription || lhs.igpDescription == rhs.igpDescription)
        fieldCheck = fieldCheck && (lhs.hasIgpAvatarCount == rhs.hasIgpAvatarCount) && (!lhs.hasIgpAvatarCount || lhs.igpAvatarCount == rhs.igpAvatarCount)
        fieldCheck = fieldCheck && (lhs.hasIgpAvatar == rhs.hasIgpAvatar) && (!lhs.hasIgpAvatar || lhs.igpAvatar == rhs.igpAvatar)
        fieldCheck = fieldCheck && (lhs.hasIgpPrivateExtra == rhs.hasIgpPrivateExtra) && (!lhs.hasIgpPrivateExtra || lhs.igpPrivateExtra == rhs.igpPrivateExtra)
        fieldCheck = fieldCheck && (lhs.hasIgpPublicExtra == rhs.hasIgpPublicExtra) && (!lhs.hasIgpPublicExtra || lhs.igpPublicExtra == rhs.igpPublicExtra)
        fieldCheck = fieldCheck && (lhs.hasIgpSignature == rhs.hasIgpSignature) && (!lhs.hasIgpSignature || lhs.igpSignature == rhs.igpSignature)
        fieldCheck = fieldCheck && (lhs.hasIgpSeenId == rhs.hasIgpSeenId) && (!lhs.hasIgpSeenId || lhs.igpSeenId == rhs.igpSeenId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPPrivateExtra : GeneratedMessage {

        public static func == (lhs: IGPChannelRoom.IGPPrivateExtra, rhs: IGPChannelRoom.IGPPrivateExtra) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpInviteLink == rhs.hasIgpInviteLink) && (!lhs.hasIgpInviteLink || lhs.igpInviteLink == rhs.igpInviteLink)
            fieldCheck = fieldCheck && (lhs.hasIgpInviteToken == rhs.hasIgpInviteToken) && (!lhs.hasIgpInviteToken || lhs.igpInviteToken == rhs.igpInviteToken)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpInviteLink:String = ""
        public fileprivate(set) var hasIgpInviteLink:Bool = false

        public fileprivate(set) var igpInviteToken:String = ""
        public fileprivate(set) var hasIgpInviteToken:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpInviteLink {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpInviteLink)
            }
            if hasIgpInviteToken {
                try codedOutputStream.writeString(fieldNumber: 2, value:igpInviteToken)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpInviteLink {
                serialize_size += igpInviteLink.computeStringSize(fieldNumber: 1)
            }
            if hasIgpInviteToken {
                serialize_size += igpInviteToken.computeStringSize(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPChannelRoom.IGPPrivateExtra.Builder {
            return IGPChannelRoom.IGPPrivateExtra.classBuilder() as! IGPChannelRoom.IGPPrivateExtra.Builder
        }
        public func getBuilder() -> IGPChannelRoom.IGPPrivateExtra.Builder {
            return classBuilder() as! IGPChannelRoom.IGPPrivateExtra.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPChannelRoom.IGPPrivateExtra.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPChannelRoom.IGPPrivateExtra.Builder()
        }
        public func toBuilder() throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
            return try IGPChannelRoom.IGPPrivateExtra.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPChannelRoom.IGPPrivateExtra) throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
            return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpInviteLink {
                jsonMap["IGPInviteLink"] = igpInviteLink
            }
            if hasIgpInviteToken {
                jsonMap["IGPInviteToken"] = igpInviteToken
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChannelRoom.IGPPrivateExtra {
            return try IGPChannelRoom.IGPPrivateExtra.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPChannelRoom.IGPPrivateExtra {
            return try IGPChannelRoom.IGPPrivateExtra.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpInviteLink {
                output += "\(indent) igpInviteLink: \(igpInviteLink) \n"
            }
            if hasIgpInviteToken {
                output += "\(indent) igpInviteToken: \(igpInviteToken) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpInviteLink {
                    hashCode = (hashCode &* 31) &+ igpInviteLink.hashValue
                }
                if hasIgpInviteToken {
                    hashCode = (hashCode &* 31) &+ igpInviteToken.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPChannelRoom.IGPPrivateExtra"
        }
        override public func className() -> String {
            return "IGPChannelRoom.IGPPrivateExtra"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPChannelRoom.IGPPrivateExtra = IGPChannelRoom.IGPPrivateExtra()
            public func getMessage() -> IGPChannelRoom.IGPPrivateExtra {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpInviteLink:String {
                get {
                    return builderResult.igpInviteLink
                }
                set (value) {
                    builderResult.hasIgpInviteLink = true
                    builderResult.igpInviteLink = value
                }
            }
            public var hasIgpInviteLink:Bool {
                get {
                    return builderResult.hasIgpInviteLink
                }
            }
            @discardableResult
            public func setIgpInviteLink(_ value:String) -> IGPChannelRoom.IGPPrivateExtra.Builder {
                self.igpInviteLink = value
                return self
            }
            @discardableResult
            public func clearIgpInviteLink() -> IGPChannelRoom.IGPPrivateExtra.Builder{
                builderResult.hasIgpInviteLink = false
                builderResult.igpInviteLink = ""
                return self
            }
            public var igpInviteToken:String {
                get {
                    return builderResult.igpInviteToken
                }
                set (value) {
                    builderResult.hasIgpInviteToken = true
                    builderResult.igpInviteToken = value
                }
            }
            public var hasIgpInviteToken:Bool {
                get {
                    return builderResult.hasIgpInviteToken
                }
            }
            @discardableResult
            public func setIgpInviteToken(_ value:String) -> IGPChannelRoom.IGPPrivateExtra.Builder {
                self.igpInviteToken = value
                return self
            }
            @discardableResult
            public func clearIgpInviteToken() -> IGPChannelRoom.IGPPrivateExtra.Builder{
                builderResult.hasIgpInviteToken = false
                builderResult.igpInviteToken = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPChannelRoom.IGPPrivateExtra.Builder {
                builderResult = IGPChannelRoom.IGPPrivateExtra()
                return self
            }
            override public func clone() throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
                return try IGPChannelRoom.IGPPrivateExtra.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPChannelRoom.IGPPrivateExtra {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPChannelRoom.IGPPrivateExtra {
                let returnMe:IGPChannelRoom.IGPPrivateExtra = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPChannelRoom.IGPPrivateExtra) throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
                if other == IGPChannelRoom.IGPPrivateExtra() {
                    return self
                }
                if other.hasIgpInviteLink {
                    igpInviteLink = other.igpInviteLink
                }
                if other.hasIgpInviteToken {
                    igpInviteToken = other.igpInviteToken
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpInviteLink = try codedInputStream.readString()

                    case 18:
                        igpInviteToken = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
                let resultDecodedBuilder = IGPChannelRoom.IGPPrivateExtra.Builder()
                if let jsonValueIgpInviteLink = jsonMap["IGPInviteLink"] as? String {
                    resultDecodedBuilder.igpInviteLink = jsonValueIgpInviteLink
                }
                if let jsonValueIgpInviteToken = jsonMap["IGPInviteToken"] as? String {
                    resultDecodedBuilder.igpInviteToken = jsonValueIgpInviteToken
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPChannelRoom.IGPPrivateExtra.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPChannelRoom.IGPPrivateExtra.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //Nested type declaration start

    final public class IGPPublicExtra : GeneratedMessage {

        public static func == (lhs: IGPChannelRoom.IGPPublicExtra, rhs: IGPChannelRoom.IGPPublicExtra) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpUsername == rhs.hasIgpUsername) && (!lhs.hasIgpUsername || lhs.igpUsername == rhs.igpUsername)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpUsername:String = ""
        public fileprivate(set) var hasIgpUsername:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpUsername {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpUsername)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpUsername {
                serialize_size += igpUsername.computeStringSize(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPChannelRoom.IGPPublicExtra.Builder {
            return IGPChannelRoom.IGPPublicExtra.classBuilder() as! IGPChannelRoom.IGPPublicExtra.Builder
        }
        public func getBuilder() -> IGPChannelRoom.IGPPublicExtra.Builder {
            return classBuilder() as! IGPChannelRoom.IGPPublicExtra.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPChannelRoom.IGPPublicExtra.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPChannelRoom.IGPPublicExtra.Builder()
        }
        public func toBuilder() throws -> IGPChannelRoom.IGPPublicExtra.Builder {
            return try IGPChannelRoom.IGPPublicExtra.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPChannelRoom.IGPPublicExtra) throws -> IGPChannelRoom.IGPPublicExtra.Builder {
            return try IGPChannelRoom.IGPPublicExtra.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpUsername {
                jsonMap["IGPUsername"] = igpUsername
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChannelRoom.IGPPublicExtra {
            return try IGPChannelRoom.IGPPublicExtra.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPChannelRoom.IGPPublicExtra {
            return try IGPChannelRoom.IGPPublicExtra.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpUsername {
                output += "\(indent) igpUsername: \(igpUsername) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpUsername {
                    hashCode = (hashCode &* 31) &+ igpUsername.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPChannelRoom.IGPPublicExtra"
        }
        override public func className() -> String {
            return "IGPChannelRoom.IGPPublicExtra"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPChannelRoom.IGPPublicExtra = IGPChannelRoom.IGPPublicExtra()
            public func getMessage() -> IGPChannelRoom.IGPPublicExtra {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpUsername:String {
                get {
                    return builderResult.igpUsername
                }
                set (value) {
                    builderResult.hasIgpUsername = true
                    builderResult.igpUsername = value
                }
            }
            public var hasIgpUsername:Bool {
                get {
                    return builderResult.hasIgpUsername
                }
            }
            @discardableResult
            public func setIgpUsername(_ value:String) -> IGPChannelRoom.IGPPublicExtra.Builder {
                self.igpUsername = value
                return self
            }
            @discardableResult
            public func clearIgpUsername() -> IGPChannelRoom.IGPPublicExtra.Builder{
                builderResult.hasIgpUsername = false
                builderResult.igpUsername = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPChannelRoom.IGPPublicExtra.Builder {
                builderResult = IGPChannelRoom.IGPPublicExtra()
                return self
            }
            override public func clone() throws -> IGPChannelRoom.IGPPublicExtra.Builder {
                return try IGPChannelRoom.IGPPublicExtra.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPChannelRoom.IGPPublicExtra {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPChannelRoom.IGPPublicExtra {
                let returnMe:IGPChannelRoom.IGPPublicExtra = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPChannelRoom.IGPPublicExtra) throws -> IGPChannelRoom.IGPPublicExtra.Builder {
                if other == IGPChannelRoom.IGPPublicExtra() {
                    return self
                }
                if other.hasIgpUsername {
                    igpUsername = other.igpUsername
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChannelRoom.IGPPublicExtra.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPublicExtra.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpUsername = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChannelRoom.IGPPublicExtra.Builder {
                let resultDecodedBuilder = IGPChannelRoom.IGPPublicExtra.Builder()
                if let jsonValueIgpUsername = jsonMap["IGPUsername"] as? String {
                    resultDecodedBuilder.igpUsername = jsonValueIgpUsername
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPChannelRoom.IGPPublicExtra.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPChannelRoom.IGPPublicExtra.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case privateRoom = 0
            case publicRoom = 1
            public func toString() -> String {
                switch self {
                case .privateRoom: return "PRIVATE_ROOM"
                case .publicRoom: return "PUBLIC_ROOM"
                }
            }
            public static func fromString(str:String) throws -> IGPChannelRoom.IGPType {
                switch str {
                case "PRIVATE_ROOM":    return .privateRoom
                case "PUBLIC_ROOM":    return .publicRoom
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .privateRoom: return ".privateRoom"
                case .publicRoom: return ".publicRoom"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPType, rhs:IGPType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 



        //Enum type declaration start 

        public enum IGPRole:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case member = 0
            case moderator = 1
            case admin = 2
            case owner = 3
            public func toString() -> String {
                switch self {
                case .member: return "MEMBER"
                case .moderator: return "MODERATOR"
                case .admin: return "ADMIN"
                case .owner: return "OWNER"
                }
            }
            public static func fromString(str:String) throws -> IGPChannelRoom.IGPRole {
                switch str {
                case "MEMBER":    return .member
                case "MODERATOR":    return .moderator
                case "ADMIN":    return .admin
                case "OWNER":    return .owner
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .member: return ".member"
                case .moderator: return ".moderator"
                case .admin: return ".admin"
                case .owner: return ".owner"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPRole, rhs:IGPRole) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpType:IGPChannelRoom.IGPType = IGPChannelRoom.IGPType.privateRoom
    public fileprivate(set) var hasIgpType:Bool = false
    public fileprivate(set) var igpRole:IGPChannelRoom.IGPRole = IGPChannelRoom.IGPRole.member
    public fileprivate(set) var hasIgpRole:Bool = false
    public fileprivate(set) var igpParticipantsCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpParticipantsCount:Bool = false

    public fileprivate(set) var igpParticipantsCountLabel:String = ""
    public fileprivate(set) var hasIgpParticipantsCountLabel:Bool = false

    public fileprivate(set) var igpDescription:String = ""
    public fileprivate(set) var hasIgpDescription:Bool = false

    public fileprivate(set) var igpAvatarCount:Int32 = Int32(0)
    public fileprivate(set) var hasIgpAvatarCount:Bool = false

    public fileprivate(set) var igpAvatar:IGPAvatar!
    public fileprivate(set) var hasIgpAvatar:Bool = false
    public fileprivate(set) var igpPrivateExtra:IGPChannelRoom.IGPPrivateExtra!
    public fileprivate(set) var hasIgpPrivateExtra:Bool = false
    public fileprivate(set) var igpPublicExtra:IGPChannelRoom.IGPPublicExtra!
    public fileprivate(set) var hasIgpPublicExtra:Bool = false
    public fileprivate(set) var igpSignature:Bool = false
    public fileprivate(set) var hasIgpSignature:Bool = false

    public fileprivate(set) var igpSeenId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpSeenId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpType {
            try codedOutputStream.writeEnum(fieldNumber: 1, value:igpType.rawValue)
        }
        if hasIgpRole {
            try codedOutputStream.writeEnum(fieldNumber: 2, value:igpRole.rawValue)
        }
        if hasIgpParticipantsCount {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpParticipantsCount)
        }
        if hasIgpParticipantsCountLabel {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpParticipantsCountLabel)
        }
        if hasIgpDescription {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpDescription)
        }
        if hasIgpAvatarCount {
            try codedOutputStream.writeInt32(fieldNumber: 6, value:igpAvatarCount)
        }
        if hasIgpAvatar {
            try codedOutputStream.writeMessage(fieldNumber: 7, value:igpAvatar)
        }
        if hasIgpPrivateExtra {
            try codedOutputStream.writeMessage(fieldNumber: 8, value:igpPrivateExtra)
        }
        if hasIgpPublicExtra {
            try codedOutputStream.writeMessage(fieldNumber: 9, value:igpPublicExtra)
        }
        if hasIgpSignature {
            try codedOutputStream.writeBool(fieldNumber: 10, value:igpSignature)
        }
        if hasIgpSeenId {
            try codedOutputStream.writeInt64(fieldNumber: 11, value:igpSeenId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if (hasIgpType) {
            serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 1)
        }
        if (hasIgpRole) {
            serialize_size += igpRole.rawValue.computeEnumSize(fieldNumber: 2)
        }
        if hasIgpParticipantsCount {
            serialize_size += igpParticipantsCount.computeInt32Size(fieldNumber: 3)
        }
        if hasIgpParticipantsCountLabel {
            serialize_size += igpParticipantsCountLabel.computeStringSize(fieldNumber: 4)
        }
        if hasIgpDescription {
            serialize_size += igpDescription.computeStringSize(fieldNumber: 5)
        }
        if hasIgpAvatarCount {
            serialize_size += igpAvatarCount.computeInt32Size(fieldNumber: 6)
        }
        if hasIgpAvatar {
            if let varSizeigpAvatar = igpAvatar?.computeMessageSize(fieldNumber: 7) {
                serialize_size += varSizeigpAvatar
            }
        }
        if hasIgpPrivateExtra {
            if let varSizeigpPrivateExtra = igpPrivateExtra?.computeMessageSize(fieldNumber: 8) {
                serialize_size += varSizeigpPrivateExtra
            }
        }
        if hasIgpPublicExtra {
            if let varSizeigpPublicExtra = igpPublicExtra?.computeMessageSize(fieldNumber: 9) {
                serialize_size += varSizeigpPublicExtra
            }
        }
        if hasIgpSignature {
            serialize_size += igpSignature.computeBoolSize(fieldNumber: 10)
        }
        if hasIgpSeenId {
            serialize_size += igpSeenId.computeInt64Size(fieldNumber: 11)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPChannelRoom.Builder {
        return IGPChannelRoom.classBuilder() as! IGPChannelRoom.Builder
    }
    public func getBuilder() -> IGPChannelRoom.Builder {
        return classBuilder() as! IGPChannelRoom.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChannelRoom.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChannelRoom.Builder()
    }
    public func toBuilder() throws -> IGPChannelRoom.Builder {
        return try IGPChannelRoom.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPChannelRoom) throws -> IGPChannelRoom.Builder {
        return try IGPChannelRoom.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpType {
            jsonMap["IGPType"] = igpType.toString()
        }
        if hasIgpRole {
            jsonMap["IGPRole"] = igpRole.toString()
        }
        if hasIgpParticipantsCount {
            jsonMap["IGPParticipantsCount"] = Int(igpParticipantsCount)
        }
        if hasIgpParticipantsCountLabel {
            jsonMap["IGPParticipantsCountLabel"] = igpParticipantsCountLabel
        }
        if hasIgpDescription {
            jsonMap["IGPDescription"] = igpDescription
        }
        if hasIgpAvatarCount {
            jsonMap["IGPAvatarCount"] = Int(igpAvatarCount)
        }
        if hasIgpAvatar {
            jsonMap["IGPAvatar"] = try igpAvatar.encode()
        }
        if hasIgpPrivateExtra {
            jsonMap["IGPPrivateExtra"] = try igpPrivateExtra.encode()
        }
        if hasIgpPublicExtra {
            jsonMap["IGPPublicExtra"] = try igpPublicExtra.encode()
        }
        if hasIgpSignature {
            jsonMap["IGPSignature"] = igpSignature
        }
        if hasIgpSeenId {
            jsonMap["IGPSeenId"] = "\(igpSeenId)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if (hasIgpType) {
            output += "\(indent) igpType: \(igpType.description)\n"
        }
        if (hasIgpRole) {
            output += "\(indent) igpRole: \(igpRole.description)\n"
        }
        if hasIgpParticipantsCount {
            output += "\(indent) igpParticipantsCount: \(igpParticipantsCount) \n"
        }
        if hasIgpParticipantsCountLabel {
            output += "\(indent) igpParticipantsCountLabel: \(igpParticipantsCountLabel) \n"
        }
        if hasIgpDescription {
            output += "\(indent) igpDescription: \(igpDescription) \n"
        }
        if hasIgpAvatarCount {
            output += "\(indent) igpAvatarCount: \(igpAvatarCount) \n"
        }
        if hasIgpAvatar {
            output += "\(indent) igpAvatar {\n"
            if let outDescIgpAvatar = igpAvatar {
                output += try outDescIgpAvatar.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPrivateExtra {
            output += "\(indent) igpPrivateExtra {\n"
            if let outDescIgpPrivateExtra = igpPrivateExtra {
                output += try outDescIgpPrivateExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPublicExtra {
            output += "\(indent) igpPublicExtra {\n"
            if let outDescIgpPublicExtra = igpPublicExtra {
                output += try outDescIgpPublicExtra.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpSignature {
            output += "\(indent) igpSignature: \(igpSignature) \n"
        }
        if hasIgpSeenId {
            output += "\(indent) igpSeenId: \(igpSeenId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpType {
                 hashCode = (hashCode &* 31) &+ igpType.hashValue
            }
            if hasIgpRole {
                 hashCode = (hashCode &* 31) &+ igpRole.hashValue
            }
            if hasIgpParticipantsCount {
                hashCode = (hashCode &* 31) &+ igpParticipantsCount.hashValue
            }
            if hasIgpParticipantsCountLabel {
                hashCode = (hashCode &* 31) &+ igpParticipantsCountLabel.hashValue
            }
            if hasIgpDescription {
                hashCode = (hashCode &* 31) &+ igpDescription.hashValue
            }
            if hasIgpAvatarCount {
                hashCode = (hashCode &* 31) &+ igpAvatarCount.hashValue
            }
            if hasIgpAvatar {
                if let hashValueigpAvatar = igpAvatar?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpAvatar
                }
            }
            if hasIgpPrivateExtra {
                if let hashValueigpPrivateExtra = igpPrivateExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpPrivateExtra
                }
            }
            if hasIgpPublicExtra {
                if let hashValueigpPublicExtra = igpPublicExtra?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpPublicExtra
                }
            }
            if hasIgpSignature {
                hashCode = (hashCode &* 31) &+ igpSignature.hashValue
            }
            if hasIgpSeenId {
                hashCode = (hashCode &* 31) &+ igpSeenId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPChannelRoom"
    }
    override public func className() -> String {
        return "IGPChannelRoom"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPChannelRoom = IGPChannelRoom()
        public func getMessage() -> IGPChannelRoom {
            return builderResult
        }

        required override public init () {
            super.init()
        }
            public var igpType:IGPChannelRoom.IGPType {
                get {
                    return builderResult.igpType
                }
                set (value) {
                    builderResult.hasIgpType = true
                    builderResult.igpType = value
                }
            }
            public var hasIgpType:Bool{
                get {
                    return builderResult.hasIgpType
                }
            }
        @discardableResult
            public func setIgpType(_ value:IGPChannelRoom.IGPType) -> IGPChannelRoom.Builder {
              self.igpType = value
              return self
            }
        @discardableResult
            public func clearIgpType() -> IGPChannelRoom.Builder {
               builderResult.hasIgpType = false
               builderResult.igpType = .privateRoom
               return self
            }
            public var igpRole:IGPChannelRoom.IGPRole {
                get {
                    return builderResult.igpRole
                }
                set (value) {
                    builderResult.hasIgpRole = true
                    builderResult.igpRole = value
                }
            }
            public var hasIgpRole:Bool{
                get {
                    return builderResult.hasIgpRole
                }
            }
        @discardableResult
            public func setIgpRole(_ value:IGPChannelRoom.IGPRole) -> IGPChannelRoom.Builder {
              self.igpRole = value
              return self
            }
        @discardableResult
            public func clearIgpRole() -> IGPChannelRoom.Builder {
               builderResult.hasIgpRole = false
               builderResult.igpRole = .member
               return self
            }
        public var igpParticipantsCount:Int32 {
            get {
                return builderResult.igpParticipantsCount
            }
            set (value) {
                builderResult.hasIgpParticipantsCount = true
                builderResult.igpParticipantsCount = value
            }
        }
        public var hasIgpParticipantsCount:Bool {
            get {
                return builderResult.hasIgpParticipantsCount
            }
        }
        @discardableResult
        public func setIgpParticipantsCount(_ value:Int32) -> IGPChannelRoom.Builder {
            self.igpParticipantsCount = value
            return self
        }
        @discardableResult
        public func clearIgpParticipantsCount() -> IGPChannelRoom.Builder{
            builderResult.hasIgpParticipantsCount = false
            builderResult.igpParticipantsCount = Int32(0)
            return self
        }
        public var igpParticipantsCountLabel:String {
            get {
                return builderResult.igpParticipantsCountLabel
            }
            set (value) {
                builderResult.hasIgpParticipantsCountLabel = true
                builderResult.igpParticipantsCountLabel = value
            }
        }
        public var hasIgpParticipantsCountLabel:Bool {
            get {
                return builderResult.hasIgpParticipantsCountLabel
            }
        }
        @discardableResult
        public func setIgpParticipantsCountLabel(_ value:String) -> IGPChannelRoom.Builder {
            self.igpParticipantsCountLabel = value
            return self
        }
        @discardableResult
        public func clearIgpParticipantsCountLabel() -> IGPChannelRoom.Builder{
            builderResult.hasIgpParticipantsCountLabel = false
            builderResult.igpParticipantsCountLabel = ""
            return self
        }
        public var igpDescription:String {
            get {
                return builderResult.igpDescription
            }
            set (value) {
                builderResult.hasIgpDescription = true
                builderResult.igpDescription = value
            }
        }
        public var hasIgpDescription:Bool {
            get {
                return builderResult.hasIgpDescription
            }
        }
        @discardableResult
        public func setIgpDescription(_ value:String) -> IGPChannelRoom.Builder {
            self.igpDescription = value
            return self
        }
        @discardableResult
        public func clearIgpDescription() -> IGPChannelRoom.Builder{
            builderResult.hasIgpDescription = false
            builderResult.igpDescription = ""
            return self
        }
        public var igpAvatarCount:Int32 {
            get {
                return builderResult.igpAvatarCount
            }
            set (value) {
                builderResult.hasIgpAvatarCount = true
                builderResult.igpAvatarCount = value
            }
        }
        public var hasIgpAvatarCount:Bool {
            get {
                return builderResult.hasIgpAvatarCount
            }
        }
        @discardableResult
        public func setIgpAvatarCount(_ value:Int32) -> IGPChannelRoom.Builder {
            self.igpAvatarCount = value
            return self
        }
        @discardableResult
        public func clearIgpAvatarCount() -> IGPChannelRoom.Builder{
            builderResult.hasIgpAvatarCount = false
            builderResult.igpAvatarCount = Int32(0)
            return self
        }
        public var igpAvatar:IGPAvatar! {
            get {
                if igpAvatarBuilder_ != nil {
                    builderResult.igpAvatar = igpAvatarBuilder_.getMessage()
                }
                return builderResult.igpAvatar
            }
            set (value) {
                builderResult.hasIgpAvatar = true
                builderResult.igpAvatar = value
            }
        }
        public var hasIgpAvatar:Bool {
            get {
                return builderResult.hasIgpAvatar
            }
        }
        fileprivate var igpAvatarBuilder_:IGPAvatar.Builder! {
            didSet {
                builderResult.hasIgpAvatar = true
            }
        }
        public func getIgpAvatarBuilder() -> IGPAvatar.Builder {
            if igpAvatarBuilder_ == nil {
                igpAvatarBuilder_ = IGPAvatar.Builder()
                builderResult.igpAvatar = igpAvatarBuilder_.getMessage()
                if igpAvatar != nil {
                    try! igpAvatarBuilder_.mergeFrom(other: igpAvatar)
                }
            }
            return igpAvatarBuilder_
        }
        @discardableResult
        public func setIgpAvatar(_ value:IGPAvatar!) -> IGPChannelRoom.Builder {
            self.igpAvatar = value
            return self
        }
        @discardableResult
        public func mergeIgpAvatar(value:IGPAvatar) throws -> IGPChannelRoom.Builder {
            if builderResult.hasIgpAvatar {
                builderResult.igpAvatar = try IGPAvatar.builderWithPrototype(prototype:builderResult.igpAvatar).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpAvatar = value
            }
            builderResult.hasIgpAvatar = true
            return self
        }
        @discardableResult
        public func clearIgpAvatar() -> IGPChannelRoom.Builder {
            igpAvatarBuilder_ = nil
            builderResult.hasIgpAvatar = false
            builderResult.igpAvatar = nil
            return self
        }
        public var igpPrivateExtra:IGPChannelRoom.IGPPrivateExtra! {
            get {
                if igpPrivateExtraBuilder_ != nil {
                    builderResult.igpPrivateExtra = igpPrivateExtraBuilder_.getMessage()
                }
                return builderResult.igpPrivateExtra
            }
            set (value) {
                builderResult.hasIgpPrivateExtra = true
                builderResult.igpPrivateExtra = value
            }
        }
        public var hasIgpPrivateExtra:Bool {
            get {
                return builderResult.hasIgpPrivateExtra
            }
        }
        fileprivate var igpPrivateExtraBuilder_:IGPChannelRoom.IGPPrivateExtra.Builder! {
            didSet {
                builderResult.hasIgpPrivateExtra = true
            }
        }
        public func getIgpPrivateExtraBuilder() -> IGPChannelRoom.IGPPrivateExtra.Builder {
            if igpPrivateExtraBuilder_ == nil {
                igpPrivateExtraBuilder_ = IGPChannelRoom.IGPPrivateExtra.Builder()
                builderResult.igpPrivateExtra = igpPrivateExtraBuilder_.getMessage()
                if igpPrivateExtra != nil {
                    try! igpPrivateExtraBuilder_.mergeFrom(other: igpPrivateExtra)
                }
            }
            return igpPrivateExtraBuilder_
        }
        @discardableResult
        public func setIgpPrivateExtra(_ value:IGPChannelRoom.IGPPrivateExtra!) -> IGPChannelRoom.Builder {
            self.igpPrivateExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpPrivateExtra(value:IGPChannelRoom.IGPPrivateExtra) throws -> IGPChannelRoom.Builder {
            if builderResult.hasIgpPrivateExtra {
                builderResult.igpPrivateExtra = try IGPChannelRoom.IGPPrivateExtra.builderWithPrototype(prototype:builderResult.igpPrivateExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpPrivateExtra = value
            }
            builderResult.hasIgpPrivateExtra = true
            return self
        }
        @discardableResult
        public func clearIgpPrivateExtra() -> IGPChannelRoom.Builder {
            igpPrivateExtraBuilder_ = nil
            builderResult.hasIgpPrivateExtra = false
            builderResult.igpPrivateExtra = nil
            return self
        }
        public var igpPublicExtra:IGPChannelRoom.IGPPublicExtra! {
            get {
                if igpPublicExtraBuilder_ != nil {
                    builderResult.igpPublicExtra = igpPublicExtraBuilder_.getMessage()
                }
                return builderResult.igpPublicExtra
            }
            set (value) {
                builderResult.hasIgpPublicExtra = true
                builderResult.igpPublicExtra = value
            }
        }
        public var hasIgpPublicExtra:Bool {
            get {
                return builderResult.hasIgpPublicExtra
            }
        }
        fileprivate var igpPublicExtraBuilder_:IGPChannelRoom.IGPPublicExtra.Builder! {
            didSet {
                builderResult.hasIgpPublicExtra = true
            }
        }
        public func getIgpPublicExtraBuilder() -> IGPChannelRoom.IGPPublicExtra.Builder {
            if igpPublicExtraBuilder_ == nil {
                igpPublicExtraBuilder_ = IGPChannelRoom.IGPPublicExtra.Builder()
                builderResult.igpPublicExtra = igpPublicExtraBuilder_.getMessage()
                if igpPublicExtra != nil {
                    try! igpPublicExtraBuilder_.mergeFrom(other: igpPublicExtra)
                }
            }
            return igpPublicExtraBuilder_
        }
        @discardableResult
        public func setIgpPublicExtra(_ value:IGPChannelRoom.IGPPublicExtra!) -> IGPChannelRoom.Builder {
            self.igpPublicExtra = value
            return self
        }
        @discardableResult
        public func mergeIgpPublicExtra(value:IGPChannelRoom.IGPPublicExtra) throws -> IGPChannelRoom.Builder {
            if builderResult.hasIgpPublicExtra {
                builderResult.igpPublicExtra = try IGPChannelRoom.IGPPublicExtra.builderWithPrototype(prototype:builderResult.igpPublicExtra).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpPublicExtra = value
            }
            builderResult.hasIgpPublicExtra = true
            return self
        }
        @discardableResult
        public func clearIgpPublicExtra() -> IGPChannelRoom.Builder {
            igpPublicExtraBuilder_ = nil
            builderResult.hasIgpPublicExtra = false
            builderResult.igpPublicExtra = nil
            return self
        }
        public var igpSignature:Bool {
            get {
                return builderResult.igpSignature
            }
            set (value) {
                builderResult.hasIgpSignature = true
                builderResult.igpSignature = value
            }
        }
        public var hasIgpSignature:Bool {
            get {
                return builderResult.hasIgpSignature
            }
        }
        @discardableResult
        public func setIgpSignature(_ value:Bool) -> IGPChannelRoom.Builder {
            self.igpSignature = value
            return self
        }
        @discardableResult
        public func clearIgpSignature() -> IGPChannelRoom.Builder{
            builderResult.hasIgpSignature = false
            builderResult.igpSignature = false
            return self
        }
        public var igpSeenId:Int64 {
            get {
                return builderResult.igpSeenId
            }
            set (value) {
                builderResult.hasIgpSeenId = true
                builderResult.igpSeenId = value
            }
        }
        public var hasIgpSeenId:Bool {
            get {
                return builderResult.hasIgpSeenId
            }
        }
        @discardableResult
        public func setIgpSeenId(_ value:Int64) -> IGPChannelRoom.Builder {
            self.igpSeenId = value
            return self
        }
        @discardableResult
        public func clearIgpSeenId() -> IGPChannelRoom.Builder{
            builderResult.hasIgpSeenId = false
            builderResult.igpSeenId = Int64(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPChannelRoom.Builder {
            builderResult = IGPChannelRoom()
            return self
        }
        override public func clone() throws -> IGPChannelRoom.Builder {
            return try IGPChannelRoom.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPChannelRoom {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPChannelRoom {
            let returnMe:IGPChannelRoom = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPChannelRoom) throws -> IGPChannelRoom.Builder {
            if other == IGPChannelRoom() {
                return self
            }
            if other.hasIgpType {
                igpType = other.igpType
            }
            if other.hasIgpRole {
                igpRole = other.igpRole
            }
            if other.hasIgpParticipantsCount {
                igpParticipantsCount = other.igpParticipantsCount
            }
            if other.hasIgpParticipantsCountLabel {
                igpParticipantsCountLabel = other.igpParticipantsCountLabel
            }
            if other.hasIgpDescription {
                igpDescription = other.igpDescription
            }
            if other.hasIgpAvatarCount {
                igpAvatarCount = other.igpAvatarCount
            }
            if (other.hasIgpAvatar) {
                try mergeIgpAvatar(value: other.igpAvatar)
            }
            if (other.hasIgpPrivateExtra) {
                try mergeIgpPrivateExtra(value: other.igpPrivateExtra)
            }
            if (other.hasIgpPublicExtra) {
                try mergeIgpPublicExtra(value: other.igpPublicExtra)
            }
            if other.hasIgpSignature {
                igpSignature = other.igpSignature
            }
            if other.hasIgpSeenId {
                igpSeenId = other.igpSeenId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChannelRoom.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    let valueIntigpType = try codedInputStream.readEnum()
                    if let enumsigpType = IGPChannelRoom.IGPType(rawValue:valueIntigpType){
                        igpType = enumsigpType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntigpType))
                    }

                case 16:
                    let valueIntigpRole = try codedInputStream.readEnum()
                    if let enumsigpRole = IGPChannelRoom.IGPRole(rawValue:valueIntigpRole){
                        igpRole = enumsigpRole
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntigpRole))
                    }

                case 24:
                    igpParticipantsCount = try codedInputStream.readInt32()

                case 34:
                    igpParticipantsCountLabel = try codedInputStream.readString()

                case 42:
                    igpDescription = try codedInputStream.readString()

                case 48:
                    igpAvatarCount = try codedInputStream.readInt32()

                case 58:
                    let subBuilder:IGPAvatar.Builder = IGPAvatar.Builder()
                    if hasIgpAvatar {
                        try subBuilder.mergeFrom(other: igpAvatar)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpAvatar = subBuilder.buildPartial()

                case 66:
                    let subBuilder:IGPChannelRoom.IGPPrivateExtra.Builder = IGPChannelRoom.IGPPrivateExtra.Builder()
                    if hasIgpPrivateExtra {
                        try subBuilder.mergeFrom(other: igpPrivateExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpPrivateExtra = subBuilder.buildPartial()

                case 74:
                    let subBuilder:IGPChannelRoom.IGPPublicExtra.Builder = IGPChannelRoom.IGPPublicExtra.Builder()
                    if hasIgpPublicExtra {
                        try subBuilder.mergeFrom(other: igpPublicExtra)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpPublicExtra = subBuilder.buildPartial()

                case 80:
                    igpSignature = try codedInputStream.readBool()

                case 88:
                    igpSeenId = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChannelRoom.Builder {
            let resultDecodedBuilder = IGPChannelRoom.Builder()
            if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                resultDecodedBuilder.igpType = try IGPChannelRoom.IGPType.fromString(str: jsonValueIgpType)
            }
            if let jsonValueIgpRole = jsonMap["IGPRole"] as? String {
                resultDecodedBuilder.igpRole = try IGPChannelRoom.IGPRole.fromString(str: jsonValueIgpRole)
            }
            if let jsonValueIgpParticipantsCount = jsonMap["IGPParticipantsCount"] as? Int {
                resultDecodedBuilder.igpParticipantsCount = Int32(jsonValueIgpParticipantsCount)
            } else if let jsonValueIgpParticipantsCount = jsonMap["IGPParticipantsCount"] as? String {
                resultDecodedBuilder.igpParticipantsCount = Int32(jsonValueIgpParticipantsCount)!
            }
            if let jsonValueIgpParticipantsCountLabel = jsonMap["IGPParticipantsCountLabel"] as? String {
                resultDecodedBuilder.igpParticipantsCountLabel = jsonValueIgpParticipantsCountLabel
            }
            if let jsonValueIgpDescription = jsonMap["IGPDescription"] as? String {
                resultDecodedBuilder.igpDescription = jsonValueIgpDescription
            }
            if let jsonValueIgpAvatarCount = jsonMap["IGPAvatarCount"] as? Int {
                resultDecodedBuilder.igpAvatarCount = Int32(jsonValueIgpAvatarCount)
            } else if let jsonValueIgpAvatarCount = jsonMap["IGPAvatarCount"] as? String {
                resultDecodedBuilder.igpAvatarCount = Int32(jsonValueIgpAvatarCount)!
            }
            if let jsonValueIgpAvatar = jsonMap["IGPAvatar"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpAvatar = try IGPAvatar.Builder.decodeToBuilder(jsonMap:jsonValueIgpAvatar).build()

            }
            if let jsonValueIgpPrivateExtra = jsonMap["IGPPrivateExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpPrivateExtra = try IGPChannelRoom.IGPPrivateExtra.Builder.decodeToBuilder(jsonMap:jsonValueIgpPrivateExtra).build()

            }
            if let jsonValueIgpPublicExtra = jsonMap["IGPPublicExtra"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpPublicExtra = try IGPChannelRoom.IGPPublicExtra.Builder.decodeToBuilder(jsonMap:jsonValueIgpPublicExtra).build()

            }
            if let jsonValueIgpSignature = jsonMap["IGPSignature"] as? Bool {
                resultDecodedBuilder.igpSignature = jsonValueIgpSignature
            }
            if let jsonValueIgpSeenId = jsonMap["IGPSeenId"] as? String {
                resultDecodedBuilder.igpSeenId = Int64(jsonValueIgpSeenId)!
            } else if let jsonValueIgpSeenId = jsonMap["IGPSeenId"] as? Int {
                resultDecodedBuilder.igpSeenId = Int64(jsonValueIgpSeenId)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPChannelRoom.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPChannelRoom.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPThumbnail : GeneratedMessage {

    public static func == (lhs: IGPThumbnail, rhs: IGPThumbnail) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpSize == rhs.hasIgpSize) && (!lhs.hasIgpSize || lhs.igpSize == rhs.igpSize)
        fieldCheck = fieldCheck && (lhs.hasIgpWidth == rhs.hasIgpWidth) && (!lhs.hasIgpWidth || lhs.igpWidth == rhs.igpWidth)
        fieldCheck = fieldCheck && (lhs.hasIgpHeight == rhs.hasIgpHeight) && (!lhs.hasIgpHeight || lhs.igpHeight == rhs.igpHeight)
        fieldCheck = fieldCheck && (lhs.hasIgpCacheId == rhs.hasIgpCacheId) && (!lhs.hasIgpCacheId || lhs.igpCacheId == rhs.igpCacheId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpSize:Int64 = Int64(0)
    public fileprivate(set) var hasIgpSize:Bool = false

    public fileprivate(set) var igpWidth:Int32 = Int32(0)
    public fileprivate(set) var hasIgpWidth:Bool = false

    public fileprivate(set) var igpHeight:Int32 = Int32(0)
    public fileprivate(set) var hasIgpHeight:Bool = false

    public fileprivate(set) var igpCacheId:String = ""
    public fileprivate(set) var hasIgpCacheId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpSize {
            try codedOutputStream.writeInt64(fieldNumber: 1, value:igpSize)
        }
        if hasIgpWidth {
            try codedOutputStream.writeInt32(fieldNumber: 2, value:igpWidth)
        }
        if hasIgpHeight {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpHeight)
        }
        if hasIgpCacheId {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpCacheId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpSize {
            serialize_size += igpSize.computeInt64Size(fieldNumber: 1)
        }
        if hasIgpWidth {
            serialize_size += igpWidth.computeInt32Size(fieldNumber: 2)
        }
        if hasIgpHeight {
            serialize_size += igpHeight.computeInt32Size(fieldNumber: 3)
        }
        if hasIgpCacheId {
            serialize_size += igpCacheId.computeStringSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPThumbnail.Builder {
        return IGPThumbnail.classBuilder() as! IGPThumbnail.Builder
    }
    public func getBuilder() -> IGPThumbnail.Builder {
        return classBuilder() as! IGPThumbnail.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPThumbnail.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPThumbnail.Builder()
    }
    public func toBuilder() throws -> IGPThumbnail.Builder {
        return try IGPThumbnail.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPThumbnail) throws -> IGPThumbnail.Builder {
        return try IGPThumbnail.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpSize {
            jsonMap["IGPSize"] = "\(igpSize)"
        }
        if hasIgpWidth {
            jsonMap["IGPWidth"] = Int(igpWidth)
        }
        if hasIgpHeight {
            jsonMap["IGPHeight"] = Int(igpHeight)
        }
        if hasIgpCacheId {
            jsonMap["IGPCacheId"] = igpCacheId
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpSize {
            output += "\(indent) igpSize: \(igpSize) \n"
        }
        if hasIgpWidth {
            output += "\(indent) igpWidth: \(igpWidth) \n"
        }
        if hasIgpHeight {
            output += "\(indent) igpHeight: \(igpHeight) \n"
        }
        if hasIgpCacheId {
            output += "\(indent) igpCacheId: \(igpCacheId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpSize {
                hashCode = (hashCode &* 31) &+ igpSize.hashValue
            }
            if hasIgpWidth {
                hashCode = (hashCode &* 31) &+ igpWidth.hashValue
            }
            if hasIgpHeight {
                hashCode = (hashCode &* 31) &+ igpHeight.hashValue
            }
            if hasIgpCacheId {
                hashCode = (hashCode &* 31) &+ igpCacheId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPThumbnail"
    }
    override public func className() -> String {
        return "IGPThumbnail"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPThumbnail = IGPThumbnail()
        public func getMessage() -> IGPThumbnail {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpSize:Int64 {
            get {
                return builderResult.igpSize
            }
            set (value) {
                builderResult.hasIgpSize = true
                builderResult.igpSize = value
            }
        }
        public var hasIgpSize:Bool {
            get {
                return builderResult.hasIgpSize
            }
        }
        @discardableResult
        public func setIgpSize(_ value:Int64) -> IGPThumbnail.Builder {
            self.igpSize = value
            return self
        }
        @discardableResult
        public func clearIgpSize() -> IGPThumbnail.Builder{
            builderResult.hasIgpSize = false
            builderResult.igpSize = Int64(0)
            return self
        }
        public var igpWidth:Int32 {
            get {
                return builderResult.igpWidth
            }
            set (value) {
                builderResult.hasIgpWidth = true
                builderResult.igpWidth = value
            }
        }
        public var hasIgpWidth:Bool {
            get {
                return builderResult.hasIgpWidth
            }
        }
        @discardableResult
        public func setIgpWidth(_ value:Int32) -> IGPThumbnail.Builder {
            self.igpWidth = value
            return self
        }
        @discardableResult
        public func clearIgpWidth() -> IGPThumbnail.Builder{
            builderResult.hasIgpWidth = false
            builderResult.igpWidth = Int32(0)
            return self
        }
        public var igpHeight:Int32 {
            get {
                return builderResult.igpHeight
            }
            set (value) {
                builderResult.hasIgpHeight = true
                builderResult.igpHeight = value
            }
        }
        public var hasIgpHeight:Bool {
            get {
                return builderResult.hasIgpHeight
            }
        }
        @discardableResult
        public func setIgpHeight(_ value:Int32) -> IGPThumbnail.Builder {
            self.igpHeight = value
            return self
        }
        @discardableResult
        public func clearIgpHeight() -> IGPThumbnail.Builder{
            builderResult.hasIgpHeight = false
            builderResult.igpHeight = Int32(0)
            return self
        }
        public var igpCacheId:String {
            get {
                return builderResult.igpCacheId
            }
            set (value) {
                builderResult.hasIgpCacheId = true
                builderResult.igpCacheId = value
            }
        }
        public var hasIgpCacheId:Bool {
            get {
                return builderResult.hasIgpCacheId
            }
        }
        @discardableResult
        public func setIgpCacheId(_ value:String) -> IGPThumbnail.Builder {
            self.igpCacheId = value
            return self
        }
        @discardableResult
        public func clearIgpCacheId() -> IGPThumbnail.Builder{
            builderResult.hasIgpCacheId = false
            builderResult.igpCacheId = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPThumbnail.Builder {
            builderResult = IGPThumbnail()
            return self
        }
        override public func clone() throws -> IGPThumbnail.Builder {
            return try IGPThumbnail.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPThumbnail {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPThumbnail {
            let returnMe:IGPThumbnail = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPThumbnail) throws -> IGPThumbnail.Builder {
            if other == IGPThumbnail() {
                return self
            }
            if other.hasIgpSize {
                igpSize = other.igpSize
            }
            if other.hasIgpWidth {
                igpWidth = other.igpWidth
            }
            if other.hasIgpHeight {
                igpHeight = other.igpHeight
            }
            if other.hasIgpCacheId {
                igpCacheId = other.igpCacheId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPThumbnail.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPThumbnail.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 8:
                    igpSize = try codedInputStream.readInt64()

                case 16:
                    igpWidth = try codedInputStream.readInt32()

                case 24:
                    igpHeight = try codedInputStream.readInt32()

                case 34:
                    igpCacheId = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPThumbnail.Builder {
            let resultDecodedBuilder = IGPThumbnail.Builder()
            if let jsonValueIgpSize = jsonMap["IGPSize"] as? String {
                resultDecodedBuilder.igpSize = Int64(jsonValueIgpSize)!
            } else if let jsonValueIgpSize = jsonMap["IGPSize"] as? Int {
                resultDecodedBuilder.igpSize = Int64(jsonValueIgpSize)
            }
            if let jsonValueIgpWidth = jsonMap["IGPWidth"] as? Int {
                resultDecodedBuilder.igpWidth = Int32(jsonValueIgpWidth)
            } else if let jsonValueIgpWidth = jsonMap["IGPWidth"] as? String {
                resultDecodedBuilder.igpWidth = Int32(jsonValueIgpWidth)!
            }
            if let jsonValueIgpHeight = jsonMap["IGPHeight"] as? Int {
                resultDecodedBuilder.igpHeight = Int32(jsonValueIgpHeight)
            } else if let jsonValueIgpHeight = jsonMap["IGPHeight"] as? String {
                resultDecodedBuilder.igpHeight = Int32(jsonValueIgpHeight)!
            }
            if let jsonValueIgpCacheId = jsonMap["IGPCacheId"] as? String {
                resultDecodedBuilder.igpCacheId = jsonValueIgpCacheId
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPThumbnail.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPThumbnail.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPFile : GeneratedMessage {

    public static func == (lhs: IGPFile, rhs: IGPFile) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpToken == rhs.hasIgpToken) && (!lhs.hasIgpToken || lhs.igpToken == rhs.igpToken)
        fieldCheck = fieldCheck && (lhs.hasIgpName == rhs.hasIgpName) && (!lhs.hasIgpName || lhs.igpName == rhs.igpName)
        fieldCheck = fieldCheck && (lhs.hasIgpSize == rhs.hasIgpSize) && (!lhs.hasIgpSize || lhs.igpSize == rhs.igpSize)
        fieldCheck = fieldCheck && (lhs.hasIgpLargeThumbnail == rhs.hasIgpLargeThumbnail) && (!lhs.hasIgpLargeThumbnail || lhs.igpLargeThumbnail == rhs.igpLargeThumbnail)
        fieldCheck = fieldCheck && (lhs.hasIgpSmallThumbnail == rhs.hasIgpSmallThumbnail) && (!lhs.hasIgpSmallThumbnail || lhs.igpSmallThumbnail == rhs.igpSmallThumbnail)
        fieldCheck = fieldCheck && (lhs.hasIgpWaveformThumbnail == rhs.hasIgpWaveformThumbnail) && (!lhs.hasIgpWaveformThumbnail || lhs.igpWaveformThumbnail == rhs.igpWaveformThumbnail)
        fieldCheck = fieldCheck && (lhs.hasIgpWidth == rhs.hasIgpWidth) && (!lhs.hasIgpWidth || lhs.igpWidth == rhs.igpWidth)
        fieldCheck = fieldCheck && (lhs.hasIgpHeight == rhs.hasIgpHeight) && (!lhs.hasIgpHeight || lhs.igpHeight == rhs.igpHeight)
        fieldCheck = fieldCheck && (lhs.hasIgpDuration == rhs.hasIgpDuration) && (!lhs.hasIgpDuration || lhs.igpDuration == rhs.igpDuration)
        fieldCheck = fieldCheck && (lhs.hasIgpCacheId == rhs.hasIgpCacheId) && (!lhs.hasIgpCacheId || lhs.igpCacheId == rhs.igpCacheId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpToken:String = ""
    public fileprivate(set) var hasIgpToken:Bool = false

    public fileprivate(set) var igpName:String = ""
    public fileprivate(set) var hasIgpName:Bool = false

    public fileprivate(set) var igpSize:Int64 = Int64(0)
    public fileprivate(set) var hasIgpSize:Bool = false

    public fileprivate(set) var igpLargeThumbnail:IGPThumbnail!
    public fileprivate(set) var hasIgpLargeThumbnail:Bool = false
    public fileprivate(set) var igpSmallThumbnail:IGPThumbnail!
    public fileprivate(set) var hasIgpSmallThumbnail:Bool = false
    public fileprivate(set) var igpWaveformThumbnail:IGPThumbnail!
    public fileprivate(set) var hasIgpWaveformThumbnail:Bool = false
    public fileprivate(set) var igpWidth:Int32 = Int32(0)
    public fileprivate(set) var hasIgpWidth:Bool = false

    public fileprivate(set) var igpHeight:Int32 = Int32(0)
    public fileprivate(set) var hasIgpHeight:Bool = false

    public fileprivate(set) var igpDuration:Double = Double(0)
    public fileprivate(set) var hasIgpDuration:Bool = false

    public fileprivate(set) var igpCacheId:String = ""
    public fileprivate(set) var hasIgpCacheId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpToken {
            try codedOutputStream.writeString(fieldNumber: 1, value:igpToken)
        }
        if hasIgpName {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpName)
        }
        if hasIgpSize {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:igpSize)
        }
        if hasIgpLargeThumbnail {
            try codedOutputStream.writeMessage(fieldNumber: 4, value:igpLargeThumbnail)
        }
        if hasIgpSmallThumbnail {
            try codedOutputStream.writeMessage(fieldNumber: 5, value:igpSmallThumbnail)
        }
        if hasIgpWaveformThumbnail {
            try codedOutputStream.writeMessage(fieldNumber: 6, value:igpWaveformThumbnail)
        }
        if hasIgpWidth {
            try codedOutputStream.writeInt32(fieldNumber: 7, value:igpWidth)
        }
        if hasIgpHeight {
            try codedOutputStream.writeInt32(fieldNumber: 8, value:igpHeight)
        }
        if hasIgpDuration {
            try codedOutputStream.writeDouble(fieldNumber: 9, value:igpDuration)
        }
        if hasIgpCacheId {
            try codedOutputStream.writeString(fieldNumber: 10, value:igpCacheId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpToken {
            serialize_size += igpToken.computeStringSize(fieldNumber: 1)
        }
        if hasIgpName {
            serialize_size += igpName.computeStringSize(fieldNumber: 2)
        }
        if hasIgpSize {
            serialize_size += igpSize.computeInt64Size(fieldNumber: 3)
        }
        if hasIgpLargeThumbnail {
            if let varSizeigpLargeThumbnail = igpLargeThumbnail?.computeMessageSize(fieldNumber: 4) {
                serialize_size += varSizeigpLargeThumbnail
            }
        }
        if hasIgpSmallThumbnail {
            if let varSizeigpSmallThumbnail = igpSmallThumbnail?.computeMessageSize(fieldNumber: 5) {
                serialize_size += varSizeigpSmallThumbnail
            }
        }
        if hasIgpWaveformThumbnail {
            if let varSizeigpWaveformThumbnail = igpWaveformThumbnail?.computeMessageSize(fieldNumber: 6) {
                serialize_size += varSizeigpWaveformThumbnail
            }
        }
        if hasIgpWidth {
            serialize_size += igpWidth.computeInt32Size(fieldNumber: 7)
        }
        if hasIgpHeight {
            serialize_size += igpHeight.computeInt32Size(fieldNumber: 8)
        }
        if hasIgpDuration {
            serialize_size += igpDuration.computeDoubleSize(fieldNumber: 9)
        }
        if hasIgpCacheId {
            serialize_size += igpCacheId.computeStringSize(fieldNumber: 10)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPFile.Builder {
        return IGPFile.classBuilder() as! IGPFile.Builder
    }
    public func getBuilder() -> IGPFile.Builder {
        return classBuilder() as! IGPFile.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPFile.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPFile.Builder()
    }
    public func toBuilder() throws -> IGPFile.Builder {
        return try IGPFile.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPFile) throws -> IGPFile.Builder {
        return try IGPFile.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpToken {
            jsonMap["IGPToken"] = igpToken
        }
        if hasIgpName {
            jsonMap["IGPName"] = igpName
        }
        if hasIgpSize {
            jsonMap["IGPSize"] = "\(igpSize)"
        }
        if hasIgpLargeThumbnail {
            jsonMap["IGPLargeThumbnail"] = try igpLargeThumbnail.encode()
        }
        if hasIgpSmallThumbnail {
            jsonMap["IGPSmallThumbnail"] = try igpSmallThumbnail.encode()
        }
        if hasIgpWaveformThumbnail {
            jsonMap["IGPWaveformThumbnail"] = try igpWaveformThumbnail.encode()
        }
        if hasIgpWidth {
            jsonMap["IGPWidth"] = Int(igpWidth)
        }
        if hasIgpHeight {
            jsonMap["IGPHeight"] = Int(igpHeight)
        }
        if hasIgpDuration {
            jsonMap["IGPDuration"] = Double(igpDuration)
        }
        if hasIgpCacheId {
            jsonMap["IGPCacheId"] = igpCacheId
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPFile {
        return try IGPFile.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPFile {
        return try IGPFile.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpToken {
            output += "\(indent) igpToken: \(igpToken) \n"
        }
        if hasIgpName {
            output += "\(indent) igpName: \(igpName) \n"
        }
        if hasIgpSize {
            output += "\(indent) igpSize: \(igpSize) \n"
        }
        if hasIgpLargeThumbnail {
            output += "\(indent) igpLargeThumbnail {\n"
            if let outDescIgpLargeThumbnail = igpLargeThumbnail {
                output += try outDescIgpLargeThumbnail.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpSmallThumbnail {
            output += "\(indent) igpSmallThumbnail {\n"
            if let outDescIgpSmallThumbnail = igpSmallThumbnail {
                output += try outDescIgpSmallThumbnail.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpWaveformThumbnail {
            output += "\(indent) igpWaveformThumbnail {\n"
            if let outDescIgpWaveformThumbnail = igpWaveformThumbnail {
                output += try outDescIgpWaveformThumbnail.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpWidth {
            output += "\(indent) igpWidth: \(igpWidth) \n"
        }
        if hasIgpHeight {
            output += "\(indent) igpHeight: \(igpHeight) \n"
        }
        if hasIgpDuration {
            output += "\(indent) igpDuration: \(igpDuration) \n"
        }
        if hasIgpCacheId {
            output += "\(indent) igpCacheId: \(igpCacheId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpToken {
                hashCode = (hashCode &* 31) &+ igpToken.hashValue
            }
            if hasIgpName {
                hashCode = (hashCode &* 31) &+ igpName.hashValue
            }
            if hasIgpSize {
                hashCode = (hashCode &* 31) &+ igpSize.hashValue
            }
            if hasIgpLargeThumbnail {
                if let hashValueigpLargeThumbnail = igpLargeThumbnail?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpLargeThumbnail
                }
            }
            if hasIgpSmallThumbnail {
                if let hashValueigpSmallThumbnail = igpSmallThumbnail?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpSmallThumbnail
                }
            }
            if hasIgpWaveformThumbnail {
                if let hashValueigpWaveformThumbnail = igpWaveformThumbnail?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpWaveformThumbnail
                }
            }
            if hasIgpWidth {
                hashCode = (hashCode &* 31) &+ igpWidth.hashValue
            }
            if hasIgpHeight {
                hashCode = (hashCode &* 31) &+ igpHeight.hashValue
            }
            if hasIgpDuration {
                hashCode = (hashCode &* 31) &+ igpDuration.hashValue
            }
            if hasIgpCacheId {
                hashCode = (hashCode &* 31) &+ igpCacheId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPFile"
    }
    override public func className() -> String {
        return "IGPFile"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPFile = IGPFile()
        public func getMessage() -> IGPFile {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpToken:String {
            get {
                return builderResult.igpToken
            }
            set (value) {
                builderResult.hasIgpToken = true
                builderResult.igpToken = value
            }
        }
        public var hasIgpToken:Bool {
            get {
                return builderResult.hasIgpToken
            }
        }
        @discardableResult
        public func setIgpToken(_ value:String) -> IGPFile.Builder {
            self.igpToken = value
            return self
        }
        @discardableResult
        public func clearIgpToken() -> IGPFile.Builder{
            builderResult.hasIgpToken = false
            builderResult.igpToken = ""
            return self
        }
        public var igpName:String {
            get {
                return builderResult.igpName
            }
            set (value) {
                builderResult.hasIgpName = true
                builderResult.igpName = value
            }
        }
        public var hasIgpName:Bool {
            get {
                return builderResult.hasIgpName
            }
        }
        @discardableResult
        public func setIgpName(_ value:String) -> IGPFile.Builder {
            self.igpName = value
            return self
        }
        @discardableResult
        public func clearIgpName() -> IGPFile.Builder{
            builderResult.hasIgpName = false
            builderResult.igpName = ""
            return self
        }
        public var igpSize:Int64 {
            get {
                return builderResult.igpSize
            }
            set (value) {
                builderResult.hasIgpSize = true
                builderResult.igpSize = value
            }
        }
        public var hasIgpSize:Bool {
            get {
                return builderResult.hasIgpSize
            }
        }
        @discardableResult
        public func setIgpSize(_ value:Int64) -> IGPFile.Builder {
            self.igpSize = value
            return self
        }
        @discardableResult
        public func clearIgpSize() -> IGPFile.Builder{
            builderResult.hasIgpSize = false
            builderResult.igpSize = Int64(0)
            return self
        }
        public var igpLargeThumbnail:IGPThumbnail! {
            get {
                if igpLargeThumbnailBuilder_ != nil {
                    builderResult.igpLargeThumbnail = igpLargeThumbnailBuilder_.getMessage()
                }
                return builderResult.igpLargeThumbnail
            }
            set (value) {
                builderResult.hasIgpLargeThumbnail = true
                builderResult.igpLargeThumbnail = value
            }
        }
        public var hasIgpLargeThumbnail:Bool {
            get {
                return builderResult.hasIgpLargeThumbnail
            }
        }
        fileprivate var igpLargeThumbnailBuilder_:IGPThumbnail.Builder! {
            didSet {
                builderResult.hasIgpLargeThumbnail = true
            }
        }
        public func getIgpLargeThumbnailBuilder() -> IGPThumbnail.Builder {
            if igpLargeThumbnailBuilder_ == nil {
                igpLargeThumbnailBuilder_ = IGPThumbnail.Builder()
                builderResult.igpLargeThumbnail = igpLargeThumbnailBuilder_.getMessage()
                if igpLargeThumbnail != nil {
                    try! igpLargeThumbnailBuilder_.mergeFrom(other: igpLargeThumbnail)
                }
            }
            return igpLargeThumbnailBuilder_
        }
        @discardableResult
        public func setIgpLargeThumbnail(_ value:IGPThumbnail!) -> IGPFile.Builder {
            self.igpLargeThumbnail = value
            return self
        }
        @discardableResult
        public func mergeIgpLargeThumbnail(value:IGPThumbnail) throws -> IGPFile.Builder {
            if builderResult.hasIgpLargeThumbnail {
                builderResult.igpLargeThumbnail = try IGPThumbnail.builderWithPrototype(prototype:builderResult.igpLargeThumbnail).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpLargeThumbnail = value
            }
            builderResult.hasIgpLargeThumbnail = true
            return self
        }
        @discardableResult
        public func clearIgpLargeThumbnail() -> IGPFile.Builder {
            igpLargeThumbnailBuilder_ = nil
            builderResult.hasIgpLargeThumbnail = false
            builderResult.igpLargeThumbnail = nil
            return self
        }
        public var igpSmallThumbnail:IGPThumbnail! {
            get {
                if igpSmallThumbnailBuilder_ != nil {
                    builderResult.igpSmallThumbnail = igpSmallThumbnailBuilder_.getMessage()
                }
                return builderResult.igpSmallThumbnail
            }
            set (value) {
                builderResult.hasIgpSmallThumbnail = true
                builderResult.igpSmallThumbnail = value
            }
        }
        public var hasIgpSmallThumbnail:Bool {
            get {
                return builderResult.hasIgpSmallThumbnail
            }
        }
        fileprivate var igpSmallThumbnailBuilder_:IGPThumbnail.Builder! {
            didSet {
                builderResult.hasIgpSmallThumbnail = true
            }
        }
        public func getIgpSmallThumbnailBuilder() -> IGPThumbnail.Builder {
            if igpSmallThumbnailBuilder_ == nil {
                igpSmallThumbnailBuilder_ = IGPThumbnail.Builder()
                builderResult.igpSmallThumbnail = igpSmallThumbnailBuilder_.getMessage()
                if igpSmallThumbnail != nil {
                    try! igpSmallThumbnailBuilder_.mergeFrom(other: igpSmallThumbnail)
                }
            }
            return igpSmallThumbnailBuilder_
        }
        @discardableResult
        public func setIgpSmallThumbnail(_ value:IGPThumbnail!) -> IGPFile.Builder {
            self.igpSmallThumbnail = value
            return self
        }
        @discardableResult
        public func mergeIgpSmallThumbnail(value:IGPThumbnail) throws -> IGPFile.Builder {
            if builderResult.hasIgpSmallThumbnail {
                builderResult.igpSmallThumbnail = try IGPThumbnail.builderWithPrototype(prototype:builderResult.igpSmallThumbnail).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpSmallThumbnail = value
            }
            builderResult.hasIgpSmallThumbnail = true
            return self
        }
        @discardableResult
        public func clearIgpSmallThumbnail() -> IGPFile.Builder {
            igpSmallThumbnailBuilder_ = nil
            builderResult.hasIgpSmallThumbnail = false
            builderResult.igpSmallThumbnail = nil
            return self
        }
        public var igpWaveformThumbnail:IGPThumbnail! {
            get {
                if igpWaveformThumbnailBuilder_ != nil {
                    builderResult.igpWaveformThumbnail = igpWaveformThumbnailBuilder_.getMessage()
                }
                return builderResult.igpWaveformThumbnail
            }
            set (value) {
                builderResult.hasIgpWaveformThumbnail = true
                builderResult.igpWaveformThumbnail = value
            }
        }
        public var hasIgpWaveformThumbnail:Bool {
            get {
                return builderResult.hasIgpWaveformThumbnail
            }
        }
        fileprivate var igpWaveformThumbnailBuilder_:IGPThumbnail.Builder! {
            didSet {
                builderResult.hasIgpWaveformThumbnail = true
            }
        }
        public func getIgpWaveformThumbnailBuilder() -> IGPThumbnail.Builder {
            if igpWaveformThumbnailBuilder_ == nil {
                igpWaveformThumbnailBuilder_ = IGPThumbnail.Builder()
                builderResult.igpWaveformThumbnail = igpWaveformThumbnailBuilder_.getMessage()
                if igpWaveformThumbnail != nil {
                    try! igpWaveformThumbnailBuilder_.mergeFrom(other: igpWaveformThumbnail)
                }
            }
            return igpWaveformThumbnailBuilder_
        }
        @discardableResult
        public func setIgpWaveformThumbnail(_ value:IGPThumbnail!) -> IGPFile.Builder {
            self.igpWaveformThumbnail = value
            return self
        }
        @discardableResult
        public func mergeIgpWaveformThumbnail(value:IGPThumbnail) throws -> IGPFile.Builder {
            if builderResult.hasIgpWaveformThumbnail {
                builderResult.igpWaveformThumbnail = try IGPThumbnail.builderWithPrototype(prototype:builderResult.igpWaveformThumbnail).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpWaveformThumbnail = value
            }
            builderResult.hasIgpWaveformThumbnail = true
            return self
        }
        @discardableResult
        public func clearIgpWaveformThumbnail() -> IGPFile.Builder {
            igpWaveformThumbnailBuilder_ = nil
            builderResult.hasIgpWaveformThumbnail = false
            builderResult.igpWaveformThumbnail = nil
            return self
        }
        public var igpWidth:Int32 {
            get {
                return builderResult.igpWidth
            }
            set (value) {
                builderResult.hasIgpWidth = true
                builderResult.igpWidth = value
            }
        }
        public var hasIgpWidth:Bool {
            get {
                return builderResult.hasIgpWidth
            }
        }
        @discardableResult
        public func setIgpWidth(_ value:Int32) -> IGPFile.Builder {
            self.igpWidth = value
            return self
        }
        @discardableResult
        public func clearIgpWidth() -> IGPFile.Builder{
            builderResult.hasIgpWidth = false
            builderResult.igpWidth = Int32(0)
            return self
        }
        public var igpHeight:Int32 {
            get {
                return builderResult.igpHeight
            }
            set (value) {
                builderResult.hasIgpHeight = true
                builderResult.igpHeight = value
            }
        }
        public var hasIgpHeight:Bool {
            get {
                return builderResult.hasIgpHeight
            }
        }
        @discardableResult
        public func setIgpHeight(_ value:Int32) -> IGPFile.Builder {
            self.igpHeight = value
            return self
        }
        @discardableResult
        public func clearIgpHeight() -> IGPFile.Builder{
            builderResult.hasIgpHeight = false
            builderResult.igpHeight = Int32(0)
            return self
        }
        public var igpDuration:Double {
            get {
                return builderResult.igpDuration
            }
            set (value) {
                builderResult.hasIgpDuration = true
                builderResult.igpDuration = value
            }
        }
        public var hasIgpDuration:Bool {
            get {
                return builderResult.hasIgpDuration
            }
        }
        @discardableResult
        public func setIgpDuration(_ value:Double) -> IGPFile.Builder {
            self.igpDuration = value
            return self
        }
        @discardableResult
        public func clearIgpDuration() -> IGPFile.Builder{
            builderResult.hasIgpDuration = false
            builderResult.igpDuration = Double(0)
            return self
        }
        public var igpCacheId:String {
            get {
                return builderResult.igpCacheId
            }
            set (value) {
                builderResult.hasIgpCacheId = true
                builderResult.igpCacheId = value
            }
        }
        public var hasIgpCacheId:Bool {
            get {
                return builderResult.hasIgpCacheId
            }
        }
        @discardableResult
        public func setIgpCacheId(_ value:String) -> IGPFile.Builder {
            self.igpCacheId = value
            return self
        }
        @discardableResult
        public func clearIgpCacheId() -> IGPFile.Builder{
            builderResult.hasIgpCacheId = false
            builderResult.igpCacheId = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPFile.Builder {
            builderResult = IGPFile()
            return self
        }
        override public func clone() throws -> IGPFile.Builder {
            return try IGPFile.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPFile {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPFile {
            let returnMe:IGPFile = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPFile) throws -> IGPFile.Builder {
            if other == IGPFile() {
                return self
            }
            if other.hasIgpToken {
                igpToken = other.igpToken
            }
            if other.hasIgpName {
                igpName = other.igpName
            }
            if other.hasIgpSize {
                igpSize = other.igpSize
            }
            if (other.hasIgpLargeThumbnail) {
                try mergeIgpLargeThumbnail(value: other.igpLargeThumbnail)
            }
            if (other.hasIgpSmallThumbnail) {
                try mergeIgpSmallThumbnail(value: other.igpSmallThumbnail)
            }
            if (other.hasIgpWaveformThumbnail) {
                try mergeIgpWaveformThumbnail(value: other.igpWaveformThumbnail)
            }
            if other.hasIgpWidth {
                igpWidth = other.igpWidth
            }
            if other.hasIgpHeight {
                igpHeight = other.igpHeight
            }
            if other.hasIgpDuration {
                igpDuration = other.igpDuration
            }
            if other.hasIgpCacheId {
                igpCacheId = other.igpCacheId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPFile.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFile.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    igpToken = try codedInputStream.readString()

                case 18:
                    igpName = try codedInputStream.readString()

                case 24:
                    igpSize = try codedInputStream.readInt64()

                case 34:
                    let subBuilder:IGPThumbnail.Builder = IGPThumbnail.Builder()
                    if hasIgpLargeThumbnail {
                        try subBuilder.mergeFrom(other: igpLargeThumbnail)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpLargeThumbnail = subBuilder.buildPartial()

                case 42:
                    let subBuilder:IGPThumbnail.Builder = IGPThumbnail.Builder()
                    if hasIgpSmallThumbnail {
                        try subBuilder.mergeFrom(other: igpSmallThumbnail)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpSmallThumbnail = subBuilder.buildPartial()

                case 50:
                    let subBuilder:IGPThumbnail.Builder = IGPThumbnail.Builder()
                    if hasIgpWaveformThumbnail {
                        try subBuilder.mergeFrom(other: igpWaveformThumbnail)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpWaveformThumbnail = subBuilder.buildPartial()

                case 56:
                    igpWidth = try codedInputStream.readInt32()

                case 64:
                    igpHeight = try codedInputStream.readInt32()

                case 73:
                    igpDuration = try codedInputStream.readDouble()

                case 82:
                    igpCacheId = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPFile.Builder {
            let resultDecodedBuilder = IGPFile.Builder()
            if let jsonValueIgpToken = jsonMap["IGPToken"] as? String {
                resultDecodedBuilder.igpToken = jsonValueIgpToken
            }
            if let jsonValueIgpName = jsonMap["IGPName"] as? String {
                resultDecodedBuilder.igpName = jsonValueIgpName
            }
            if let jsonValueIgpSize = jsonMap["IGPSize"] as? String {
                resultDecodedBuilder.igpSize = Int64(jsonValueIgpSize)!
            } else if let jsonValueIgpSize = jsonMap["IGPSize"] as? Int {
                resultDecodedBuilder.igpSize = Int64(jsonValueIgpSize)
            }
            if let jsonValueIgpLargeThumbnail = jsonMap["IGPLargeThumbnail"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpLargeThumbnail = try IGPThumbnail.Builder.decodeToBuilder(jsonMap:jsonValueIgpLargeThumbnail).build()

            }
            if let jsonValueIgpSmallThumbnail = jsonMap["IGPSmallThumbnail"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpSmallThumbnail = try IGPThumbnail.Builder.decodeToBuilder(jsonMap:jsonValueIgpSmallThumbnail).build()

            }
            if let jsonValueIgpWaveformThumbnail = jsonMap["IGPWaveformThumbnail"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpWaveformThumbnail = try IGPThumbnail.Builder.decodeToBuilder(jsonMap:jsonValueIgpWaveformThumbnail).build()

            }
            if let jsonValueIgpWidth = jsonMap["IGPWidth"] as? Int {
                resultDecodedBuilder.igpWidth = Int32(jsonValueIgpWidth)
            } else if let jsonValueIgpWidth = jsonMap["IGPWidth"] as? String {
                resultDecodedBuilder.igpWidth = Int32(jsonValueIgpWidth)!
            }
            if let jsonValueIgpHeight = jsonMap["IGPHeight"] as? Int {
                resultDecodedBuilder.igpHeight = Int32(jsonValueIgpHeight)
            } else if let jsonValueIgpHeight = jsonMap["IGPHeight"] as? String {
                resultDecodedBuilder.igpHeight = Int32(jsonValueIgpHeight)!
            }
            if let jsonValueIgpDuration = jsonMap["IGPDuration"] as? Double {
                resultDecodedBuilder.igpDuration = Double(jsonValueIgpDuration)
            } else if let jsonValueIgpDuration = jsonMap["IGPDuration"] as? String {
                resultDecodedBuilder.igpDuration = Double(jsonValueIgpDuration)!
            }
            if let jsonValueIgpCacheId = jsonMap["IGPCacheId"] as? String {
                resultDecodedBuilder.igpCacheId = jsonValueIgpCacheId
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPFile.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPFile.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPWallpaper : GeneratedMessage {

    public static func == (lhs: IGPWallpaper, rhs: IGPWallpaper) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpFile == rhs.hasIgpFile) && (!lhs.hasIgpFile || lhs.igpFile == rhs.igpFile)
        fieldCheck = fieldCheck && (lhs.hasIgpColor == rhs.hasIgpColor) && (!lhs.hasIgpColor || lhs.igpColor == rhs.igpColor)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpFile:IGPFile!
    public fileprivate(set) var hasIgpFile:Bool = false
    public fileprivate(set) var igpColor:String = ""
    public fileprivate(set) var hasIgpColor:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpFile {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpFile)
        }
        if hasIgpColor {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpColor)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpFile {
            if let varSizeigpFile = igpFile?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpFile
            }
        }
        if hasIgpColor {
            serialize_size += igpColor.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPWallpaper.Builder {
        return IGPWallpaper.classBuilder() as! IGPWallpaper.Builder
    }
    public func getBuilder() -> IGPWallpaper.Builder {
        return classBuilder() as! IGPWallpaper.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPWallpaper.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPWallpaper.Builder()
    }
    public func toBuilder() throws -> IGPWallpaper.Builder {
        return try IGPWallpaper.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPWallpaper) throws -> IGPWallpaper.Builder {
        return try IGPWallpaper.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpFile {
            jsonMap["IGPFile"] = try igpFile.encode()
        }
        if hasIgpColor {
            jsonMap["IGPColor"] = igpColor
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpFile {
            output += "\(indent) igpFile {\n"
            if let outDescIgpFile = igpFile {
                output += try outDescIgpFile.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpColor {
            output += "\(indent) igpColor: \(igpColor) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpFile {
                if let hashValueigpFile = igpFile?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpFile
                }
            }
            if hasIgpColor {
                hashCode = (hashCode &* 31) &+ igpColor.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPWallpaper"
    }
    override public func className() -> String {
        return "IGPWallpaper"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:IGPWallpaper = IGPWallpaper()
        public func getMessage() -> IGPWallpaper {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpFile:IGPFile! {
            get {
                if igpFileBuilder_ != nil {
                    builderResult.igpFile = igpFileBuilder_.getMessage()
                }
                return builderResult.igpFile
            }
            set (value) {
                builderResult.hasIgpFile = true
                builderResult.igpFile = value
            }
        }
        public var hasIgpFile:Bool {
            get {
                return builderResult.hasIgpFile
            }
        }
        fileprivate var igpFileBuilder_:IGPFile.Builder! {
            didSet {
                builderResult.hasIgpFile = true
            }
        }
        public func getIgpFileBuilder() -> IGPFile.Builder {
            if igpFileBuilder_ == nil {
                igpFileBuilder_ = IGPFile.Builder()
                builderResult.igpFile = igpFileBuilder_.getMessage()
                if igpFile != nil {
                    try! igpFileBuilder_.mergeFrom(other: igpFile)
                }
            }
            return igpFileBuilder_
        }
        @discardableResult
        public func setIgpFile(_ value:IGPFile!) -> IGPWallpaper.Builder {
            self.igpFile = value
            return self
        }
        @discardableResult
        public func mergeIgpFile(value:IGPFile) throws -> IGPWallpaper.Builder {
            if builderResult.hasIgpFile {
                builderResult.igpFile = try IGPFile.builderWithPrototype(prototype:builderResult.igpFile).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpFile = value
            }
            builderResult.hasIgpFile = true
            return self
        }
        @discardableResult
        public func clearIgpFile() -> IGPWallpaper.Builder {
            igpFileBuilder_ = nil
            builderResult.hasIgpFile = false
            builderResult.igpFile = nil
            return self
        }
        public var igpColor:String {
            get {
                return builderResult.igpColor
            }
            set (value) {
                builderResult.hasIgpColor = true
                builderResult.igpColor = value
            }
        }
        public var hasIgpColor:Bool {
            get {
                return builderResult.hasIgpColor
            }
        }
        @discardableResult
        public func setIgpColor(_ value:String) -> IGPWallpaper.Builder {
            self.igpColor = value
            return self
        }
        @discardableResult
        public func clearIgpColor() -> IGPWallpaper.Builder{
            builderResult.hasIgpColor = false
            builderResult.igpColor = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPWallpaper.Builder {
            builderResult = IGPWallpaper()
            return self
        }
        override public func clone() throws -> IGPWallpaper.Builder {
            return try IGPWallpaper.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPWallpaper {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPWallpaper {
            let returnMe:IGPWallpaper = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPWallpaper) throws -> IGPWallpaper.Builder {
            if other == IGPWallpaper() {
                return self
            }
            if (other.hasIgpFile) {
                try mergeIgpFile(value: other.igpFile)
            }
            if other.hasIgpColor {
                igpColor = other.igpColor
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPWallpaper.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPWallpaper.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPFile.Builder = IGPFile.Builder()
                    if hasIgpFile {
                        try subBuilder.mergeFrom(other: igpFile)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpFile = subBuilder.buildPartial()

                case 18:
                    igpColor = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPWallpaper.Builder {
            let resultDecodedBuilder = IGPWallpaper.Builder()
            if let jsonValueIgpFile = jsonMap["IGPFile"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpFile = try IGPFile.Builder.decodeToBuilder(jsonMap:jsonValueIgpFile).build()

            }
            if let jsonValueIgpColor = jsonMap["IGPColor"] as? String {
                resultDecodedBuilder.igpColor = jsonValueIgpColor
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPWallpaper.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPWallpaper.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPRoomMessageLocation: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessageLocation> {
        var mergedArray = Array<IGPRoomMessageLocation>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessageLocation? {
        return try IGPRoomMessageLocation.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLocation {
        return try IGPRoomMessageLocation.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpLat": return self.igpLat
        case "igpLon": return self.igpLon
        default: return nil
        }
    }
}
extension IGPRoomMessageLocation.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpLat": return self.igpLat
            case "igpLon": return self.igpLon
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpLat":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.igpLat = newSubscriptValue
            case "igpLon":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.igpLon = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessageLog: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessageLog> {
        var mergedArray = Array<IGPRoomMessageLog>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessageLog? {
        return try IGPRoomMessageLog.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog {
        return try IGPRoomMessageLog.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpType": return self.igpType
        case "igpExtraType": return self.igpExtraType
        case "igpTargetUser": return self.igpTargetUser
        default: return nil
        }
    }
}
extension IGPRoomMessageLog.IGPTargetUser: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessageLog.IGPTargetUser> {
        var mergedArray = Array<IGPRoomMessageLog.IGPTargetUser>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessageLog.IGPTargetUser? {
        return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessageLog.IGPTargetUser {
        return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog.IGPTargetUser {
        return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessageLog.IGPTargetUser {
        return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog.IGPTargetUser {
        return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageLog.IGPTargetUser {
        return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageLog.IGPTargetUser {
        return try IGPRoomMessageLog.IGPTargetUser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpId": return self.igpId
        default: return nil
        }
    }
}
extension IGPRoomMessageLog.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpType": return self.igpType
            case "igpExtraType": return self.igpExtraType
            case "igpTargetUser": return self.igpTargetUser
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageLog.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpExtraType":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageLog.IGPExtraType else {
                    return
                }
                self.igpExtraType = newSubscriptValue
            case "igpTargetUser":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageLog.IGPTargetUser else {
                    return
                }
                self.igpTargetUser = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessageLog.IGPTargetUser.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpId": return self.igpId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessageContact: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessageContact> {
        var mergedArray = Array<IGPRoomMessageContact>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessageContact? {
        return try IGPRoomMessageContact.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageContact {
        return try IGPRoomMessageContact.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpFirstName": return self.igpFirstName
        case "igpLastName": return self.igpLastName
        case "igpNickname": return self.igpNickname
        case "igpPhone": return self.igpPhone
        case "igpEmail": return self.igpEmail
        default: return nil
        }
    }
}
extension IGPRoomMessageContact.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpFirstName": return self.igpFirstName
            case "igpLastName": return self.igpLastName
            case "igpNickname": return self.igpNickname
            case "igpPhone": return self.igpPhone
            case "igpEmail": return self.igpEmail
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpFirstName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpFirstName = newSubscriptValue
            case "igpLastName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpLastName = newSubscriptValue
            case "igpNickname":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpNickname = newSubscriptValue
            case "igpPhone":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.igpPhone = newSubscriptValue
            case "igpEmail":
                guard let newSubscriptValue = newSubscriptValue as? Array<String> else {
                    return
                }
                self.igpEmail = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessageForwardFrom: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessageForwardFrom> {
        var mergedArray = Array<IGPRoomMessageForwardFrom>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessageForwardFrom? {
        return try IGPRoomMessageForwardFrom.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessageForwardFrom {
        return try IGPRoomMessageForwardFrom.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRoomId": return self.igpRoomId
        case "igpMessageId": return self.igpMessageId
        default: return nil
        }
    }
}
extension IGPRoomMessageForwardFrom.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRoomId": return self.igpRoomId
            case "igpMessageId": return self.igpMessageId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRegisteredUser: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRegisteredUser> {
        var mergedArray = Array<IGPRegisteredUser>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRegisteredUser? {
        return try IGPRegisteredUser.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRegisteredUser {
        return try IGPRegisteredUser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpId": return self.igpId
        case "igpUsername": return self.igpUsername
        case "igpPhone": return self.igpPhone
        case "igpFirstName": return self.igpFirstName
        case "igpLastName": return self.igpLastName
        case "igpDisplayName": return self.igpDisplayName
        case "igpInitials": return self.igpInitials
        case "igpColor": return self.igpColor
        case "igpStatus": return self.igpStatus
        case "igpLastSeen": return self.igpLastSeen
        case "igpAvatarCount": return self.igpAvatarCount
        case "igpAvatar": return self.igpAvatar
        case "igpMutual": return self.igpMutual
        case "igpDeleted": return self.igpDeleted
        case "igpCacheId": return self.igpCacheId
        default: return nil
        }
    }
}
extension IGPRegisteredUser.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpId": return self.igpId
            case "igpUsername": return self.igpUsername
            case "igpPhone": return self.igpPhone
            case "igpFirstName": return self.igpFirstName
            case "igpLastName": return self.igpLastName
            case "igpDisplayName": return self.igpDisplayName
            case "igpInitials": return self.igpInitials
            case "igpColor": return self.igpColor
            case "igpStatus": return self.igpStatus
            case "igpLastSeen": return self.igpLastSeen
            case "igpAvatarCount": return self.igpAvatarCount
            case "igpAvatar": return self.igpAvatar
            case "igpMutual": return self.igpMutual
            case "igpDeleted": return self.igpDeleted
            case "igpCacheId": return self.igpCacheId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpId = newSubscriptValue
            case "igpUsername":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpUsername = newSubscriptValue
            case "igpPhone":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpPhone = newSubscriptValue
            case "igpFirstName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpFirstName = newSubscriptValue
            case "igpLastName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpLastName = newSubscriptValue
            case "igpDisplayName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpDisplayName = newSubscriptValue
            case "igpInitials":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpInitials = newSubscriptValue
            case "igpColor":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpColor = newSubscriptValue
            case "igpStatus":
                guard let newSubscriptValue = newSubscriptValue as? IGPRegisteredUser.IGPStatus else {
                    return
                }
                self.igpStatus = newSubscriptValue
            case "igpLastSeen":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpLastSeen = newSubscriptValue
            case "igpAvatarCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAvatarCount = newSubscriptValue
            case "igpAvatar":
                guard let newSubscriptValue = newSubscriptValue as? IGPAvatar else {
                    return
                }
                self.igpAvatar = newSubscriptValue
            case "igpMutual":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpMutual = newSubscriptValue
            case "igpDeleted":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpDeleted = newSubscriptValue
            case "igpCacheId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCacheId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPAvatar: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPAvatar> {
        var mergedArray = Array<IGPAvatar>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPAvatar? {
        return try IGPAvatar.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPAvatar {
        return try IGPAvatar.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPAvatar {
        return try IGPAvatar.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPAvatar {
        return try IGPAvatar.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPAvatar {
        return try IGPAvatar.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPAvatar {
        return try IGPAvatar.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPAvatar {
        return try IGPAvatar.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpId": return self.igpId
        case "igpFile": return self.igpFile
        default: return nil
        }
    }
}
extension IGPAvatar.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpId": return self.igpId
            case "igpFile": return self.igpFile
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpId = newSubscriptValue
            case "igpFile":
                guard let newSubscriptValue = newSubscriptValue as? IGPFile else {
                    return
                }
                self.igpFile = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessage> {
        var mergedArray = Array<IGPRoomMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessage? {
        return try IGPRoomMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage {
        return try IGPRoomMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpMessageId": return self.igpMessageId
        case "igpMessageVersion": return self.igpMessageVersion
        case "igpStatus": return self.igpStatus
        case "igpStatusVersion": return self.igpStatusVersion
        case "igpMessageType": return self.igpMessageType
        case "igpMessage": return self.igpMessage
        case "igpAttachment": return self.igpAttachment
        case "igpAuthor": return self.igpAuthor
        case "igpLocation": return self.igpLocation
        case "igpLog": return self.igpLog
        case "igpContact": return self.igpContact
        case "igpEdited": return self.igpEdited
        case "igpCreateTime": return self.igpCreateTime
        case "igpUpdateTime": return self.igpUpdateTime
        case "igpDeleted": return self.igpDeleted
        case "igpForwardFrom": return self.igpForwardFrom
        case "igpReplyTo": return self.igpReplyTo
        case "igpPreviousMessageId": return self.igpPreviousMessageId
        case "igpExtraType": return self.igpExtraType
        case "igpChannelExtra": return self.igpChannelExtra
        default: return nil
        }
    }
}
extension IGPRoomMessage.IGPAuthor: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessage.IGPAuthor> {
        var mergedArray = Array<IGPRoomMessage.IGPAuthor>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPAuthor? {
        return try IGPRoomMessage.IGPAuthor.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessage.IGPAuthor {
        return try IGPRoomMessage.IGPAuthor.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor {
        return try IGPRoomMessage.IGPAuthor.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPAuthor {
        return try IGPRoomMessage.IGPAuthor.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor {
        return try IGPRoomMessage.IGPAuthor.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPAuthor {
        return try IGPRoomMessage.IGPAuthor.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor {
        return try IGPRoomMessage.IGPAuthor.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpHash": return self.igpHash
        case "igpUser": return self.igpUser
        case "igpRoom": return self.igpRoom
        default: return nil
        }
    }
}
extension IGPRoomMessage.IGPAuthor.IGPUser: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessage.IGPAuthor.IGPUser> {
        var mergedArray = Array<IGPRoomMessage.IGPAuthor.IGPUser>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPAuthor.IGPUser? {
        return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
        return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
        return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
        return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
        return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
        return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPUser {
        return try IGPRoomMessage.IGPAuthor.IGPUser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpUserId": return self.igpUserId
        case "igpCacheId": return self.igpCacheId
        default: return nil
        }
    }
}
extension IGPRoomMessage.IGPAuthor.IGPRoom: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessage.IGPAuthor.IGPRoom> {
        var mergedArray = Array<IGPRoomMessage.IGPAuthor.IGPRoom>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPAuthor.IGPRoom? {
        return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
        return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
        return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
        return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
        return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
        return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPAuthor.IGPRoom {
        return try IGPRoomMessage.IGPAuthor.IGPRoom.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRoomId": return self.igpRoomId
        default: return nil
        }
    }
}
extension IGPRoomMessage.IGPChannelExtra: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomMessage.IGPChannelExtra> {
        var mergedArray = Array<IGPRoomMessage.IGPChannelExtra>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPChannelExtra? {
        return try IGPRoomMessage.IGPChannelExtra.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomMessage.IGPChannelExtra {
        return try IGPRoomMessage.IGPChannelExtra.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPChannelExtra {
        return try IGPRoomMessage.IGPChannelExtra.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomMessage.IGPChannelExtra {
        return try IGPRoomMessage.IGPChannelExtra.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPChannelExtra {
        return try IGPRoomMessage.IGPChannelExtra.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomMessage.IGPChannelExtra {
        return try IGPRoomMessage.IGPChannelExtra.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomMessage.IGPChannelExtra {
        return try IGPRoomMessage.IGPChannelExtra.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpSignature": return self.igpSignature
        case "igpViewsLabel": return self.igpViewsLabel
        case "igpThumbsUpLabel": return self.igpThumbsUpLabel
        case "igpThumbsDownLabel": return self.igpThumbsDownLabel
        default: return nil
        }
    }
}
extension IGPRoomMessage.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpMessageId": return self.igpMessageId
            case "igpMessageVersion": return self.igpMessageVersion
            case "igpStatus": return self.igpStatus
            case "igpStatusVersion": return self.igpStatusVersion
            case "igpMessageType": return self.igpMessageType
            case "igpMessage": return self.igpMessage
            case "igpAttachment": return self.igpAttachment
            case "igpAuthor": return self.igpAuthor
            case "igpLocation": return self.igpLocation
            case "igpLog": return self.igpLog
            case "igpContact": return self.igpContact
            case "igpEdited": return self.igpEdited
            case "igpCreateTime": return self.igpCreateTime
            case "igpUpdateTime": return self.igpUpdateTime
            case "igpDeleted": return self.igpDeleted
            case "igpForwardFrom": return self.igpForwardFrom
            case "igpReplyTo": return self.igpReplyTo
            case "igpPreviousMessageId": return self.igpPreviousMessageId
            case "igpExtraType": return self.igpExtraType
            case "igpChannelExtra": return self.igpChannelExtra
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageId = newSubscriptValue
            case "igpMessageVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageVersion = newSubscriptValue
            case "igpStatus":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageStatus else {
                    return
                }
                self.igpStatus = newSubscriptValue
            case "igpStatusVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpStatusVersion = newSubscriptValue
            case "igpMessageType":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageType else {
                    return
                }
                self.igpMessageType = newSubscriptValue
            case "igpMessage":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpMessage = newSubscriptValue
            case "igpAttachment":
                guard let newSubscriptValue = newSubscriptValue as? IGPFile else {
                    return
                }
                self.igpAttachment = newSubscriptValue
            case "igpAuthor":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage.IGPAuthor else {
                    return
                }
                self.igpAuthor = newSubscriptValue
            case "igpLocation":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageLocation else {
                    return
                }
                self.igpLocation = newSubscriptValue
            case "igpLog":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageLog else {
                    return
                }
                self.igpLog = newSubscriptValue
            case "igpContact":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageContact else {
                    return
                }
                self.igpContact = newSubscriptValue
            case "igpEdited":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpEdited = newSubscriptValue
            case "igpCreateTime":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpCreateTime = newSubscriptValue
            case "igpUpdateTime":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpUpdateTime = newSubscriptValue
            case "igpDeleted":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpDeleted = newSubscriptValue
            case "igpForwardFrom":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage else {
                    return
                }
                self.igpForwardFrom = newSubscriptValue
            case "igpReplyTo":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage else {
                    return
                }
                self.igpReplyTo = newSubscriptValue
            case "igpPreviousMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpPreviousMessageId = newSubscriptValue
            case "igpExtraType":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage.IGPExtraType else {
                    return
                }
                self.igpExtraType = newSubscriptValue
            case "igpChannelExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage.IGPChannelExtra else {
                    return
                }
                self.igpChannelExtra = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessage.IGPAuthor.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpHash": return self.igpHash
            case "igpUser": return self.igpUser
            case "igpRoom": return self.igpRoom
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpHash":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpHash = newSubscriptValue
            case "igpUser":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage.IGPAuthor.IGPUser else {
                    return
                }
                self.igpUser = newSubscriptValue
            case "igpRoom":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage.IGPAuthor.IGPRoom else {
                    return
                }
                self.igpRoom = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessage.IGPAuthor.IGPUser.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpUserId": return self.igpUserId
            case "igpCacheId": return self.igpCacheId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpUserId = newSubscriptValue
            case "igpCacheId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCacheId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessage.IGPAuthor.IGPRoom.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRoomId": return self.igpRoomId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomMessage.IGPChannelExtra.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpSignature": return self.igpSignature
            case "igpViewsLabel": return self.igpViewsLabel
            case "igpThumbsUpLabel": return self.igpThumbsUpLabel
            case "igpThumbsDownLabel": return self.igpThumbsDownLabel
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpSignature":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpSignature = newSubscriptValue
            case "igpViewsLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpViewsLabel = newSubscriptValue
            case "igpThumbsUpLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpThumbsUpLabel = newSubscriptValue
            case "igpThumbsDownLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpThumbsDownLabel = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoomDraft: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoomDraft> {
        var mergedArray = Array<IGPRoomDraft>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoomDraft? {
        return try IGPRoomDraft.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoomDraft {
        return try IGPRoomDraft.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpMessage": return self.igpMessage
        case "igpReplyTo": return self.igpReplyTo
        default: return nil
        }
    }
}
extension IGPRoomDraft.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpMessage": return self.igpMessage
            case "igpReplyTo": return self.igpReplyTo
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpMessage":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpMessage = newSubscriptValue
            case "igpReplyTo":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpReplyTo = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPRoom: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPRoom> {
        var mergedArray = Array<IGPRoom>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPRoom? {
        return try IGPRoom.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPRoom {
        return try IGPRoom.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPRoom {
        return try IGPRoom.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPRoom {
        return try IGPRoom.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoom {
        return try IGPRoom.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPRoom {
        return try IGPRoom.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPRoom {
        return try IGPRoom.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpId": return self.igpId
        case "igpType": return self.igpType
        case "igpTitle": return self.igpTitle
        case "igpInitials": return self.igpInitials
        case "igpColor": return self.igpColor
        case "igpUnreadCount": return self.igpUnreadCount
        case "igpLastMessage": return self.igpLastMessage
        case "igpReadOnly": return self.igpReadOnly
        case "igpIsParticipant": return self.igpIsParticipant
        case "igpDraft": return self.igpDraft
        case "igpChatRoomExtra": return self.igpChatRoomExtra
        case "igpGroupRoomExtra": return self.igpGroupRoomExtra
        case "igpChannelRoomExtra": return self.igpChannelRoomExtra
        default: return nil
        }
    }
}
extension IGPRoom.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpId": return self.igpId
            case "igpType": return self.igpType
            case "igpTitle": return self.igpTitle
            case "igpInitials": return self.igpInitials
            case "igpColor": return self.igpColor
            case "igpUnreadCount": return self.igpUnreadCount
            case "igpLastMessage": return self.igpLastMessage
            case "igpReadOnly": return self.igpReadOnly
            case "igpIsParticipant": return self.igpIsParticipant
            case "igpDraft": return self.igpDraft
            case "igpChatRoomExtra": return self.igpChatRoomExtra
            case "igpGroupRoomExtra": return self.igpGroupRoomExtra
            case "igpChannelRoomExtra": return self.igpChannelRoomExtra
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpId = newSubscriptValue
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoom.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpTitle":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpTitle = newSubscriptValue
            case "igpInitials":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpInitials = newSubscriptValue
            case "igpColor":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpColor = newSubscriptValue
            case "igpUnreadCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpUnreadCount = newSubscriptValue
            case "igpLastMessage":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage else {
                    return
                }
                self.igpLastMessage = newSubscriptValue
            case "igpReadOnly":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpReadOnly = newSubscriptValue
            case "igpIsParticipant":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpIsParticipant = newSubscriptValue
            case "igpDraft":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomDraft else {
                    return
                }
                self.igpDraft = newSubscriptValue
            case "igpChatRoomExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPChatRoom else {
                    return
                }
                self.igpChatRoomExtra = newSubscriptValue
            case "igpGroupRoomExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPGroupRoom else {
                    return
                }
                self.igpGroupRoomExtra = newSubscriptValue
            case "igpChannelRoomExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPChannelRoom else {
                    return
                }
                self.igpChannelRoomExtra = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPChatRoom: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChatRoom> {
        var mergedArray = Array<IGPChatRoom>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChatRoom? {
        return try IGPChatRoom.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChatRoom {
        return try IGPChatRoom.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpPeer": return self.igpPeer
        default: return nil
        }
    }
}
extension IGPChatRoom.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpPeer": return self.igpPeer
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpPeer":
                guard let newSubscriptValue = newSubscriptValue as? IGPRegisteredUser else {
                    return
                }
                self.igpPeer = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPGroupRoom: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupRoom> {
        var mergedArray = Array<IGPGroupRoom>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupRoom? {
        return try IGPGroupRoom.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom {
        return try IGPGroupRoom.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpType": return self.igpType
        case "igpRole": return self.igpRole
        case "igpParticipantsCount": return self.igpParticipantsCount
        case "igpParticipantsCountLabel": return self.igpParticipantsCountLabel
        case "igpParticipantsCountLimit": return self.igpParticipantsCountLimit
        case "igpParticipantsCountLimitLabel": return self.igpParticipantsCountLimitLabel
        case "igpDescription": return self.igpDescription
        case "igpAvatarCount": return self.igpAvatarCount
        case "igpAvatar": return self.igpAvatar
        case "igpPrivateExtra": return self.igpPrivateExtra
        case "igpPublicExtra": return self.igpPublicExtra
        default: return nil
        }
    }
}
extension IGPGroupRoom.IGPPrivateExtra: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupRoom.IGPPrivateExtra> {
        var mergedArray = Array<IGPGroupRoom.IGPPrivateExtra>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupRoom.IGPPrivateExtra? {
        return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupRoom.IGPPrivateExtra {
        return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPrivateExtra {
        return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupRoom.IGPPrivateExtra {
        return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPrivateExtra {
        return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupRoom.IGPPrivateExtra {
        return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPrivateExtra {
        return try IGPGroupRoom.IGPPrivateExtra.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpInviteLink": return self.igpInviteLink
        case "igpInviteToken": return self.igpInviteToken
        default: return nil
        }
    }
}
extension IGPGroupRoom.IGPPublicExtra: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupRoom.IGPPublicExtra> {
        var mergedArray = Array<IGPGroupRoom.IGPPublicExtra>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupRoom.IGPPublicExtra? {
        return try IGPGroupRoom.IGPPublicExtra.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupRoom.IGPPublicExtra {
        return try IGPGroupRoom.IGPPublicExtra.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPublicExtra {
        return try IGPGroupRoom.IGPPublicExtra.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupRoom.IGPPublicExtra {
        return try IGPGroupRoom.IGPPublicExtra.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPublicExtra {
        return try IGPGroupRoom.IGPPublicExtra.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupRoom.IGPPublicExtra {
        return try IGPGroupRoom.IGPPublicExtra.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupRoom.IGPPublicExtra {
        return try IGPGroupRoom.IGPPublicExtra.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpUsername": return self.igpUsername
        default: return nil
        }
    }
}
extension IGPGroupRoom.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpType": return self.igpType
            case "igpRole": return self.igpRole
            case "igpParticipantsCount": return self.igpParticipantsCount
            case "igpParticipantsCountLabel": return self.igpParticipantsCountLabel
            case "igpParticipantsCountLimit": return self.igpParticipantsCountLimit
            case "igpParticipantsCountLimitLabel": return self.igpParticipantsCountLimitLabel
            case "igpDescription": return self.igpDescription
            case "igpAvatarCount": return self.igpAvatarCount
            case "igpAvatar": return self.igpAvatar
            case "igpPrivateExtra": return self.igpPrivateExtra
            case "igpPublicExtra": return self.igpPublicExtra
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPGroupRoom.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpRole":
                guard let newSubscriptValue = newSubscriptValue as? IGPGroupRoom.IGPRole else {
                    return
                }
                self.igpRole = newSubscriptValue
            case "igpParticipantsCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpParticipantsCount = newSubscriptValue
            case "igpParticipantsCountLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpParticipantsCountLabel = newSubscriptValue
            case "igpParticipantsCountLimit":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpParticipantsCountLimit = newSubscriptValue
            case "igpParticipantsCountLimitLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpParticipantsCountLimitLabel = newSubscriptValue
            case "igpDescription":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpDescription = newSubscriptValue
            case "igpAvatarCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAvatarCount = newSubscriptValue
            case "igpAvatar":
                guard let newSubscriptValue = newSubscriptValue as? IGPAvatar else {
                    return
                }
                self.igpAvatar = newSubscriptValue
            case "igpPrivateExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPGroupRoom.IGPPrivateExtra else {
                    return
                }
                self.igpPrivateExtra = newSubscriptValue
            case "igpPublicExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPGroupRoom.IGPPublicExtra else {
                    return
                }
                self.igpPublicExtra = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPGroupRoom.IGPPrivateExtra.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpInviteLink": return self.igpInviteLink
            case "igpInviteToken": return self.igpInviteToken
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpInviteLink":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpInviteLink = newSubscriptValue
            case "igpInviteToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpInviteToken = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPGroupRoom.IGPPublicExtra.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpUsername": return self.igpUsername
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpUsername":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpUsername = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPChannelRoom: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChannelRoom> {
        var mergedArray = Array<IGPChannelRoom>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChannelRoom? {
        return try IGPChannelRoom.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom {
        return try IGPChannelRoom.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpType": return self.igpType
        case "igpRole": return self.igpRole
        case "igpParticipantsCount": return self.igpParticipantsCount
        case "igpParticipantsCountLabel": return self.igpParticipantsCountLabel
        case "igpDescription": return self.igpDescription
        case "igpAvatarCount": return self.igpAvatarCount
        case "igpAvatar": return self.igpAvatar
        case "igpPrivateExtra": return self.igpPrivateExtra
        case "igpPublicExtra": return self.igpPublicExtra
        case "igpSignature": return self.igpSignature
        case "igpSeenId": return self.igpSeenId
        default: return nil
        }
    }
}
extension IGPChannelRoom.IGPPrivateExtra: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChannelRoom.IGPPrivateExtra> {
        var mergedArray = Array<IGPChannelRoom.IGPPrivateExtra>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChannelRoom.IGPPrivateExtra? {
        return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChannelRoom.IGPPrivateExtra {
        return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPrivateExtra {
        return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChannelRoom.IGPPrivateExtra {
        return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPrivateExtra {
        return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChannelRoom.IGPPrivateExtra {
        return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPrivateExtra {
        return try IGPChannelRoom.IGPPrivateExtra.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpInviteLink": return self.igpInviteLink
        case "igpInviteToken": return self.igpInviteToken
        default: return nil
        }
    }
}
extension IGPChannelRoom.IGPPublicExtra: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChannelRoom.IGPPublicExtra> {
        var mergedArray = Array<IGPChannelRoom.IGPPublicExtra>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChannelRoom.IGPPublicExtra? {
        return try IGPChannelRoom.IGPPublicExtra.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChannelRoom.IGPPublicExtra {
        return try IGPChannelRoom.IGPPublicExtra.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPublicExtra {
        return try IGPChannelRoom.IGPPublicExtra.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChannelRoom.IGPPublicExtra {
        return try IGPChannelRoom.IGPPublicExtra.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPublicExtra {
        return try IGPChannelRoom.IGPPublicExtra.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChannelRoom.IGPPublicExtra {
        return try IGPChannelRoom.IGPPublicExtra.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelRoom.IGPPublicExtra {
        return try IGPChannelRoom.IGPPublicExtra.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpUsername": return self.igpUsername
        default: return nil
        }
    }
}
extension IGPChannelRoom.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpType": return self.igpType
            case "igpRole": return self.igpRole
            case "igpParticipantsCount": return self.igpParticipantsCount
            case "igpParticipantsCountLabel": return self.igpParticipantsCountLabel
            case "igpDescription": return self.igpDescription
            case "igpAvatarCount": return self.igpAvatarCount
            case "igpAvatar": return self.igpAvatar
            case "igpPrivateExtra": return self.igpPrivateExtra
            case "igpPublicExtra": return self.igpPublicExtra
            case "igpSignature": return self.igpSignature
            case "igpSeenId": return self.igpSeenId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPChannelRoom.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpRole":
                guard let newSubscriptValue = newSubscriptValue as? IGPChannelRoom.IGPRole else {
                    return
                }
                self.igpRole = newSubscriptValue
            case "igpParticipantsCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpParticipantsCount = newSubscriptValue
            case "igpParticipantsCountLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpParticipantsCountLabel = newSubscriptValue
            case "igpDescription":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpDescription = newSubscriptValue
            case "igpAvatarCount":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAvatarCount = newSubscriptValue
            case "igpAvatar":
                guard let newSubscriptValue = newSubscriptValue as? IGPAvatar else {
                    return
                }
                self.igpAvatar = newSubscriptValue
            case "igpPrivateExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPChannelRoom.IGPPrivateExtra else {
                    return
                }
                self.igpPrivateExtra = newSubscriptValue
            case "igpPublicExtra":
                guard let newSubscriptValue = newSubscriptValue as? IGPChannelRoom.IGPPublicExtra else {
                    return
                }
                self.igpPublicExtra = newSubscriptValue
            case "igpSignature":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpSignature = newSubscriptValue
            case "igpSeenId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpSeenId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPChannelRoom.IGPPrivateExtra.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpInviteLink": return self.igpInviteLink
            case "igpInviteToken": return self.igpInviteToken
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpInviteLink":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpInviteLink = newSubscriptValue
            case "igpInviteToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpInviteToken = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPChannelRoom.IGPPublicExtra.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpUsername": return self.igpUsername
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpUsername":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpUsername = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPThumbnail: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPThumbnail> {
        var mergedArray = Array<IGPThumbnail>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPThumbnail? {
        return try IGPThumbnail.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPThumbnail {
        return try IGPThumbnail.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpSize": return self.igpSize
        case "igpWidth": return self.igpWidth
        case "igpHeight": return self.igpHeight
        case "igpCacheId": return self.igpCacheId
        default: return nil
        }
    }
}
extension IGPThumbnail.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpSize": return self.igpSize
            case "igpWidth": return self.igpWidth
            case "igpHeight": return self.igpHeight
            case "igpCacheId": return self.igpCacheId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpSize":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpSize = newSubscriptValue
            case "igpWidth":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpWidth = newSubscriptValue
            case "igpHeight":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpHeight = newSubscriptValue
            case "igpCacheId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCacheId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPFile: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPFile> {
        var mergedArray = Array<IGPFile>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPFile? {
        return try IGPFile.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPFile {
        return try IGPFile.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPFile {
        return try IGPFile.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPFile {
        return try IGPFile.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFile {
        return try IGPFile.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPFile {
        return try IGPFile.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFile {
        return try IGPFile.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpToken": return self.igpToken
        case "igpName": return self.igpName
        case "igpSize": return self.igpSize
        case "igpLargeThumbnail": return self.igpLargeThumbnail
        case "igpSmallThumbnail": return self.igpSmallThumbnail
        case "igpWaveformThumbnail": return self.igpWaveformThumbnail
        case "igpWidth": return self.igpWidth
        case "igpHeight": return self.igpHeight
        case "igpDuration": return self.igpDuration
        case "igpCacheId": return self.igpCacheId
        default: return nil
        }
    }
}
extension IGPFile.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpToken": return self.igpToken
            case "igpName": return self.igpName
            case "igpSize": return self.igpSize
            case "igpLargeThumbnail": return self.igpLargeThumbnail
            case "igpSmallThumbnail": return self.igpSmallThumbnail
            case "igpWaveformThumbnail": return self.igpWaveformThumbnail
            case "igpWidth": return self.igpWidth
            case "igpHeight": return self.igpHeight
            case "igpDuration": return self.igpDuration
            case "igpCacheId": return self.igpCacheId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpToken = newSubscriptValue
            case "igpName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpName = newSubscriptValue
            case "igpSize":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpSize = newSubscriptValue
            case "igpLargeThumbnail":
                guard let newSubscriptValue = newSubscriptValue as? IGPThumbnail else {
                    return
                }
                self.igpLargeThumbnail = newSubscriptValue
            case "igpSmallThumbnail":
                guard let newSubscriptValue = newSubscriptValue as? IGPThumbnail else {
                    return
                }
                self.igpSmallThumbnail = newSubscriptValue
            case "igpWaveformThumbnail":
                guard let newSubscriptValue = newSubscriptValue as? IGPThumbnail else {
                    return
                }
                self.igpWaveformThumbnail = newSubscriptValue
            case "igpWidth":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpWidth = newSubscriptValue
            case "igpHeight":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpHeight = newSubscriptValue
            case "igpDuration":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.igpDuration = newSubscriptValue
            case "igpCacheId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCacheId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPWallpaper: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPWallpaper> {
        var mergedArray = Array<IGPWallpaper>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPWallpaper? {
        return try IGPWallpaper.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder().mergeFrom(data: data, extensionRegistry:GlobalRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPWallpaper {
        return try IGPWallpaper.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpFile": return self.igpFile
        case "igpColor": return self.igpColor
        default: return nil
        }
    }
}
extension IGPWallpaper.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpFile": return self.igpFile
            case "igpColor": return self.igpColor
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpFile":
                guard let newSubscriptValue = newSubscriptValue as? IGPFile else {
                    return
                }
                self.igpFile = newSubscriptValue
            case "igpColor":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpColor = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
