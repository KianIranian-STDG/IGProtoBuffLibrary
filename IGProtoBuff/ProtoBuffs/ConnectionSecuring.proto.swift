/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "ConnectionSecuring.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ConnectionSecuringRoot {
    public static let `default` = ConnectionSecuringRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPConnectionSecuringResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPConnectionSecuringResponse.Builder

    public static func == (lhs: IGPConnectionSecuringResponse, rhs: IGPConnectionSecuringResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpPublicKey == rhs.hasIgpPublicKey) && (!lhs.hasIgpPublicKey || lhs.igpPublicKey == rhs.igpPublicKey)
        fieldCheck = fieldCheck && (lhs.hasIgpSymmetricKeyLength == rhs.hasIgpSymmetricKeyLength) && (!lhs.hasIgpSymmetricKeyLength || lhs.igpSymmetricKeyLength == rhs.igpSymmetricKeyLength)
        fieldCheck = fieldCheck && (lhs.hasIgpHeartbeatInterval == rhs.hasIgpHeartbeatInterval) && (!lhs.hasIgpHeartbeatInterval || lhs.igpHeartbeatInterval == rhs.igpHeartbeatInterval)
        fieldCheck = fieldCheck && (lhs.hasIgpPrimaryNodeName == rhs.hasIgpPrimaryNodeName) && (!lhs.hasIgpPrimaryNodeName || lhs.igpPrimaryNodeName == rhs.igpPrimaryNodeName)
        fieldCheck = fieldCheck && (lhs.hasIgpSecondaryChunkSize == rhs.hasIgpSecondaryChunkSize) && (!lhs.hasIgpSecondaryChunkSize || lhs.igpSecondaryChunkSize == rhs.igpSecondaryChunkSize)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpPublicKey:String! = nil
    public fileprivate(set) var hasIgpPublicKey:Bool = false

    public fileprivate(set) var igpSymmetricKeyLength:Int32! = nil
    public fileprivate(set) var hasIgpSymmetricKeyLength:Bool = false

    public fileprivate(set) var igpHeartbeatInterval:Int32! = nil
    public fileprivate(set) var hasIgpHeartbeatInterval:Bool = false

    public fileprivate(set) var igpPrimaryNodeName:String! = nil
    public fileprivate(set) var hasIgpPrimaryNodeName:Bool = false

    public fileprivate(set) var igpSecondaryChunkSize:Int32! = nil
    public fileprivate(set) var hasIgpSecondaryChunkSize:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpPublicKey {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpPublicKey)
        }
        if hasIgpSymmetricKeyLength {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpSymmetricKeyLength)
        }
        if hasIgpHeartbeatInterval {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpHeartbeatInterval)
        }
        if hasIgpPrimaryNodeName {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpPrimaryNodeName)
        }
        if hasIgpSecondaryChunkSize {
            try codedOutputStream.writeInt32(fieldNumber: 6, value:igpSecondaryChunkSize)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpPublicKey {
            serialize_size += igpPublicKey.computeStringSize(fieldNumber: 2)
        }
        if hasIgpSymmetricKeyLength {
            serialize_size += igpSymmetricKeyLength.computeInt32Size(fieldNumber: 3)
        }
        if hasIgpHeartbeatInterval {
            serialize_size += igpHeartbeatInterval.computeInt32Size(fieldNumber: 4)
        }
        if hasIgpPrimaryNodeName {
            serialize_size += igpPrimaryNodeName.computeStringSize(fieldNumber: 5)
        }
        if hasIgpSecondaryChunkSize {
            serialize_size += igpSecondaryChunkSize.computeInt32Size(fieldNumber: 6)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPConnectionSecuringResponse.Builder {
        return IGPConnectionSecuringResponse.classBuilder() as! IGPConnectionSecuringResponse.Builder
    }
    public func getBuilder() -> IGPConnectionSecuringResponse.Builder {
        return classBuilder() as! IGPConnectionSecuringResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPConnectionSecuringResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPConnectionSecuringResponse.Builder()
    }
    public func toBuilder() throws -> IGPConnectionSecuringResponse.Builder {
        return try IGPConnectionSecuringResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPConnectionSecuringResponse) throws -> IGPConnectionSecuringResponse.Builder {
        return try IGPConnectionSecuringResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpPublicKey {
            jsonMap["IGPPublicKey"] = igpPublicKey
        }
        if hasIgpSymmetricKeyLength {
            jsonMap["IGPSymmetricKeyLength"] = Int(igpSymmetricKeyLength)
        }
        if hasIgpHeartbeatInterval {
            jsonMap["IGPHeartbeatInterval"] = Int(igpHeartbeatInterval)
        }
        if hasIgpPrimaryNodeName {
            jsonMap["IGPPrimaryNodeName"] = igpPrimaryNodeName
        }
        if hasIgpSecondaryChunkSize {
            jsonMap["IGPSecondaryChunkSize"] = Int(igpSecondaryChunkSize)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPublicKey {
            output += "\(indent) igpPublicKey: \(igpPublicKey) \n"
        }
        if hasIgpSymmetricKeyLength {
            output += "\(indent) igpSymmetricKeyLength: \(igpSymmetricKeyLength) \n"
        }
        if hasIgpHeartbeatInterval {
            output += "\(indent) igpHeartbeatInterval: \(igpHeartbeatInterval) \n"
        }
        if hasIgpPrimaryNodeName {
            output += "\(indent) igpPrimaryNodeName: \(igpPrimaryNodeName) \n"
        }
        if hasIgpSecondaryChunkSize {
            output += "\(indent) igpSecondaryChunkSize: \(igpSecondaryChunkSize) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpPublicKey {
                hashCode = (hashCode &* 31) &+ igpPublicKey.hashValue
            }
            if hasIgpSymmetricKeyLength {
                hashCode = (hashCode &* 31) &+ igpSymmetricKeyLength.hashValue
            }
            if hasIgpHeartbeatInterval {
                hashCode = (hashCode &* 31) &+ igpHeartbeatInterval.hashValue
            }
            if hasIgpPrimaryNodeName {
                hashCode = (hashCode &* 31) &+ igpPrimaryNodeName.hashValue
            }
            if hasIgpSecondaryChunkSize {
                hashCode = (hashCode &* 31) &+ igpSecondaryChunkSize.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPConnectionSecuringResponse"
    }
    override public func className() -> String {
        return "IGPConnectionSecuringResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPConnectionSecuringResponse = IGPConnectionSecuringResponse()
        public func getMessage() -> IGPConnectionSecuringResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPConnectionSecuringResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPConnectionSecuringResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPConnectionSecuringResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpPublicKey:String {
            get {
                return builderResult.igpPublicKey
            }
            set (value) {
                builderResult.hasIgpPublicKey = true
                builderResult.igpPublicKey = value
            }
        }
        public var hasIgpPublicKey:Bool {
            get {
                return builderResult.hasIgpPublicKey
            }
        }
        @discardableResult
        public func setIgpPublicKey(_ value:String) -> IGPConnectionSecuringResponse.Builder {
            self.igpPublicKey = value
            return self
        }
        @discardableResult
        public func clearIgpPublicKey() -> IGPConnectionSecuringResponse.Builder{
            builderResult.hasIgpPublicKey = false
            builderResult.igpPublicKey = nil
            return self
        }
        public var igpSymmetricKeyLength:Int32 {
            get {
                return builderResult.igpSymmetricKeyLength
            }
            set (value) {
                builderResult.hasIgpSymmetricKeyLength = true
                builderResult.igpSymmetricKeyLength = value
            }
        }
        public var hasIgpSymmetricKeyLength:Bool {
            get {
                return builderResult.hasIgpSymmetricKeyLength
            }
        }
        @discardableResult
        public func setIgpSymmetricKeyLength(_ value:Int32) -> IGPConnectionSecuringResponse.Builder {
            self.igpSymmetricKeyLength = value
            return self
        }
        @discardableResult
        public func clearIgpSymmetricKeyLength() -> IGPConnectionSecuringResponse.Builder{
            builderResult.hasIgpSymmetricKeyLength = false
            builderResult.igpSymmetricKeyLength = nil
            return self
        }
        public var igpHeartbeatInterval:Int32 {
            get {
                return builderResult.igpHeartbeatInterval
            }
            set (value) {
                builderResult.hasIgpHeartbeatInterval = true
                builderResult.igpHeartbeatInterval = value
            }
        }
        public var hasIgpHeartbeatInterval:Bool {
            get {
                return builderResult.hasIgpHeartbeatInterval
            }
        }
        @discardableResult
        public func setIgpHeartbeatInterval(_ value:Int32) -> IGPConnectionSecuringResponse.Builder {
            self.igpHeartbeatInterval = value
            return self
        }
        @discardableResult
        public func clearIgpHeartbeatInterval() -> IGPConnectionSecuringResponse.Builder{
            builderResult.hasIgpHeartbeatInterval = false
            builderResult.igpHeartbeatInterval = nil
            return self
        }
        public var igpPrimaryNodeName:String {
            get {
                return builderResult.igpPrimaryNodeName
            }
            set (value) {
                builderResult.hasIgpPrimaryNodeName = true
                builderResult.igpPrimaryNodeName = value
            }
        }
        public var hasIgpPrimaryNodeName:Bool {
            get {
                return builderResult.hasIgpPrimaryNodeName
            }
        }
        @discardableResult
        public func setIgpPrimaryNodeName(_ value:String) -> IGPConnectionSecuringResponse.Builder {
            self.igpPrimaryNodeName = value
            return self
        }
        @discardableResult
        public func clearIgpPrimaryNodeName() -> IGPConnectionSecuringResponse.Builder{
            builderResult.hasIgpPrimaryNodeName = false
            builderResult.igpPrimaryNodeName = nil
            return self
        }
        public var igpSecondaryChunkSize:Int32 {
            get {
                return builderResult.igpSecondaryChunkSize
            }
            set (value) {
                builderResult.hasIgpSecondaryChunkSize = true
                builderResult.igpSecondaryChunkSize = value
            }
        }
        public var hasIgpSecondaryChunkSize:Bool {
            get {
                return builderResult.hasIgpSecondaryChunkSize
            }
        }
        @discardableResult
        public func setIgpSecondaryChunkSize(_ value:Int32) -> IGPConnectionSecuringResponse.Builder {
            self.igpSecondaryChunkSize = value
            return self
        }
        @discardableResult
        public func clearIgpSecondaryChunkSize() -> IGPConnectionSecuringResponse.Builder{
            builderResult.hasIgpSecondaryChunkSize = false
            builderResult.igpSecondaryChunkSize = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPConnectionSecuringResponse.Builder {
            builderResult = IGPConnectionSecuringResponse()
            return self
        }
        override public func clone() throws -> IGPConnectionSecuringResponse.Builder {
            return try IGPConnectionSecuringResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPConnectionSecuringResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPConnectionSecuringResponse {
            let returnMe:IGPConnectionSecuringResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPConnectionSecuringResponse) throws -> IGPConnectionSecuringResponse.Builder {
            if other == IGPConnectionSecuringResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpPublicKey {
                igpPublicKey = other.igpPublicKey
            }
            if other.hasIgpSymmetricKeyLength {
                igpSymmetricKeyLength = other.igpSymmetricKeyLength
            }
            if other.hasIgpHeartbeatInterval {
                igpHeartbeatInterval = other.igpHeartbeatInterval
            }
            if other.hasIgpPrimaryNodeName {
                igpPrimaryNodeName = other.igpPrimaryNodeName
            }
            if other.hasIgpSecondaryChunkSize {
                igpSecondaryChunkSize = other.igpSecondaryChunkSize
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPConnectionSecuringResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSecuringResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    igpPublicKey = try codedInputStream.readString()

                case 24:
                    igpSymmetricKeyLength = try codedInputStream.readInt32()

                case 32:
                    igpHeartbeatInterval = try codedInputStream.readInt32()

                case 42:
                    igpPrimaryNodeName = try codedInputStream.readString()

                case 48:
                    igpSecondaryChunkSize = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPConnectionSecuringResponse.Builder {
            let resultDecodedBuilder = IGPConnectionSecuringResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpPublicKey = jsonMap["IGPPublicKey"] as? String {
                resultDecodedBuilder.igpPublicKey = jsonValueIgpPublicKey
            }
            if let jsonValueIgpSymmetricKeyLength = jsonMap["IGPSymmetricKeyLength"] as? Int {
                resultDecodedBuilder.igpSymmetricKeyLength = Int32(jsonValueIgpSymmetricKeyLength)
            } else if let jsonValueIgpSymmetricKeyLength = jsonMap["IGPSymmetricKeyLength"] as? String {
                resultDecodedBuilder.igpSymmetricKeyLength = Int32(jsonValueIgpSymmetricKeyLength)!
            }
            if let jsonValueIgpHeartbeatInterval = jsonMap["IGPHeartbeatInterval"] as? Int {
                resultDecodedBuilder.igpHeartbeatInterval = Int32(jsonValueIgpHeartbeatInterval)
            } else if let jsonValueIgpHeartbeatInterval = jsonMap["IGPHeartbeatInterval"] as? String {
                resultDecodedBuilder.igpHeartbeatInterval = Int32(jsonValueIgpHeartbeatInterval)!
            }
            if let jsonValueIgpPrimaryNodeName = jsonMap["IGPPrimaryNodeName"] as? String {
                resultDecodedBuilder.igpPrimaryNodeName = jsonValueIgpPrimaryNodeName
            }
            if let jsonValueIgpSecondaryChunkSize = jsonMap["IGPSecondaryChunkSize"] as? Int {
                resultDecodedBuilder.igpSecondaryChunkSize = Int32(jsonValueIgpSecondaryChunkSize)
            } else if let jsonValueIgpSecondaryChunkSize = jsonMap["IGPSecondaryChunkSize"] as? String {
                resultDecodedBuilder.igpSecondaryChunkSize = Int32(jsonValueIgpSecondaryChunkSize)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPConnectionSecuringResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPConnectionSecuringResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPConnectionSymmetricKey : GeneratedMessage {
    public typealias BuilderType = IGPConnectionSymmetricKey.Builder

    public static func == (lhs: IGPConnectionSymmetricKey, rhs: IGPConnectionSymmetricKey) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpSymmetricKey == rhs.hasIgpSymmetricKey) && (!lhs.hasIgpSymmetricKey || lhs.igpSymmetricKey == rhs.igpSymmetricKey)
        fieldCheck = fieldCheck && (lhs.hasIgpVersion == rhs.hasIgpVersion) && (!lhs.hasIgpVersion || lhs.igpVersion == rhs.igpVersion)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpSymmetricKey:Data! = nil
    public fileprivate(set) var hasIgpSymmetricKey:Bool = false

    public fileprivate(set) var igpVersion:Int32! = nil
    public fileprivate(set) var hasIgpVersion:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpSymmetricKey {
            try codedOutputStream.writeData(fieldNumber: 2, value:igpSymmetricKey)
        }
        if hasIgpVersion {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpVersion)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpSymmetricKey {
            serialize_size += igpSymmetricKey.computeDataSize(fieldNumber: 2)
        }
        if hasIgpVersion {
            serialize_size += igpVersion.computeInt32Size(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPConnectionSymmetricKey.Builder {
        return IGPConnectionSymmetricKey.classBuilder() as! IGPConnectionSymmetricKey.Builder
    }
    public func getBuilder() -> IGPConnectionSymmetricKey.Builder {
        return classBuilder() as! IGPConnectionSymmetricKey.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPConnectionSymmetricKey.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPConnectionSymmetricKey.Builder()
    }
    public func toBuilder() throws -> IGPConnectionSymmetricKey.Builder {
        return try IGPConnectionSymmetricKey.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPConnectionSymmetricKey) throws -> IGPConnectionSymmetricKey.Builder {
        return try IGPConnectionSymmetricKey.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpSymmetricKey {
            jsonMap["IGPSymmetricKey"] = igpSymmetricKey.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasIgpVersion {
            jsonMap["IGPVersion"] = Int(igpVersion)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpSymmetricKey {
            output += "\(indent) igpSymmetricKey: \(igpSymmetricKey) \n"
        }
        if hasIgpVersion {
            output += "\(indent) igpVersion: \(igpVersion) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpSymmetricKey {
                hashCode = (hashCode &* 31) &+ igpSymmetricKey.hashValue
            }
            if hasIgpVersion {
                hashCode = (hashCode &* 31) &+ igpVersion.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPConnectionSymmetricKey"
    }
    override public func className() -> String {
        return "IGPConnectionSymmetricKey"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPConnectionSymmetricKey = IGPConnectionSymmetricKey()
        public func getMessage() -> IGPConnectionSymmetricKey {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPConnectionSymmetricKey.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPConnectionSymmetricKey.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPConnectionSymmetricKey.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpSymmetricKey:Data {
            get {
                return builderResult.igpSymmetricKey
            }
            set (value) {
                builderResult.hasIgpSymmetricKey = true
                builderResult.igpSymmetricKey = value
            }
        }
        public var hasIgpSymmetricKey:Bool {
            get {
                return builderResult.hasIgpSymmetricKey
            }
        }
        @discardableResult
        public func setIgpSymmetricKey(_ value:Data) -> IGPConnectionSymmetricKey.Builder {
            self.igpSymmetricKey = value
            return self
        }
        @discardableResult
        public func clearIgpSymmetricKey() -> IGPConnectionSymmetricKey.Builder{
            builderResult.hasIgpSymmetricKey = false
            builderResult.igpSymmetricKey = nil
            return self
        }
        public var igpVersion:Int32 {
            get {
                return builderResult.igpVersion
            }
            set (value) {
                builderResult.hasIgpVersion = true
                builderResult.igpVersion = value
            }
        }
        public var hasIgpVersion:Bool {
            get {
                return builderResult.hasIgpVersion
            }
        }
        @discardableResult
        public func setIgpVersion(_ value:Int32) -> IGPConnectionSymmetricKey.Builder {
            self.igpVersion = value
            return self
        }
        @discardableResult
        public func clearIgpVersion() -> IGPConnectionSymmetricKey.Builder{
            builderResult.hasIgpVersion = false
            builderResult.igpVersion = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPConnectionSymmetricKey.Builder {
            builderResult = IGPConnectionSymmetricKey()
            return self
        }
        override public func clone() throws -> IGPConnectionSymmetricKey.Builder {
            return try IGPConnectionSymmetricKey.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPConnectionSymmetricKey {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPConnectionSymmetricKey {
            let returnMe:IGPConnectionSymmetricKey = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPConnectionSymmetricKey) throws -> IGPConnectionSymmetricKey.Builder {
            if other == IGPConnectionSymmetricKey() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpSymmetricKey {
                igpSymmetricKey = other.igpSymmetricKey
            }
            if other.hasIgpVersion {
                igpVersion = other.igpVersion
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPConnectionSymmetricKey.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKey.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    igpSymmetricKey = try codedInputStream.readData()

                case 24:
                    igpVersion = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPConnectionSymmetricKey.Builder {
            let resultDecodedBuilder = IGPConnectionSymmetricKey.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpSymmetricKey = jsonMap["IGPSymmetricKey"] as? String {
                resultDecodedBuilder.igpSymmetricKey = Data(base64Encoded:jsonValueIgpSymmetricKey, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueIgpVersion = jsonMap["IGPVersion"] as? Int {
                resultDecodedBuilder.igpVersion = Int32(jsonValueIgpVersion)
            } else if let jsonValueIgpVersion = jsonMap["IGPVersion"] as? String {
                resultDecodedBuilder.igpVersion = Int32(jsonValueIgpVersion)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPConnectionSymmetricKey.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPConnectionSymmetricKey.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPConnectionSymmetricKeyResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPConnectionSymmetricKeyResponse.Builder

    public static func == (lhs: IGPConnectionSymmetricKeyResponse, rhs: IGPConnectionSymmetricKeyResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpStatus == rhs.hasIgpStatus) && (!lhs.hasIgpStatus || lhs.igpStatus == rhs.igpStatus)
        fieldCheck = fieldCheck && (lhs.hasIgpSymmetricMethod == rhs.hasIgpSymmetricMethod) && (!lhs.hasIgpSymmetricMethod || lhs.igpSymmetricMethod == rhs.igpSymmetricMethod)
        fieldCheck = fieldCheck && (lhs.hasIgpSymmetricIvSize == rhs.hasIgpSymmetricIvSize) && (!lhs.hasIgpSymmetricIvSize || lhs.igpSymmetricIvSize == rhs.igpSymmetricIvSize)
        fieldCheck = fieldCheck && (lhs.hasIgpSecurityIssue == rhs.hasIgpSecurityIssue) && (!lhs.hasIgpSecurityIssue || lhs.igpSecurityIssue == rhs.igpSecurityIssue)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPStatus:Int32, GeneratedEnum {
            case rejected = 0
            case accepted = 1
            public func toString() -> String {
                switch self {
                case .rejected: return "REJECTED"
                case .accepted: return "ACCEPTED"
                }
            }
            public static func fromString(_ str:String) throws -> IGPConnectionSymmetricKeyResponse.IGPStatus {
                switch str {
                case "REJECTED":    return .rejected
                case "ACCEPTED":    return .accepted
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .rejected: return ".rejected"
                case .accepted: return ".accepted"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPStatus, rhs:IGPStatus) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpStatus:IGPConnectionSymmetricKeyResponse.IGPStatus = IGPConnectionSymmetricKeyResponse.IGPStatus.rejected
    public fileprivate(set) var hasIgpStatus:Bool = false
    public fileprivate(set) var igpSymmetricMethod:String! = nil
    public fileprivate(set) var hasIgpSymmetricMethod:Bool = false

    public fileprivate(set) var igpSymmetricIvSize:Int32! = nil
    public fileprivate(set) var hasIgpSymmetricIvSize:Bool = false

    public fileprivate(set) var igpSecurityIssue:Bool! = nil
    public fileprivate(set) var hasIgpSecurityIssue:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpStatus {
            try codedOutputStream.writeEnum(fieldNumber: 2, value:igpStatus.rawValue)
        }
        if hasIgpSymmetricMethod {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpSymmetricMethod)
        }
        if hasIgpSymmetricIvSize {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpSymmetricIvSize)
        }
        if hasIgpSecurityIssue {
            try codedOutputStream.writeBool(fieldNumber: 5, value:igpSecurityIssue)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if (hasIgpStatus) {
            serialize_size += igpStatus.rawValue.computeEnumSize(fieldNumber: 2)
        }
        if hasIgpSymmetricMethod {
            serialize_size += igpSymmetricMethod.computeStringSize(fieldNumber: 3)
        }
        if hasIgpSymmetricIvSize {
            serialize_size += igpSymmetricIvSize.computeInt32Size(fieldNumber: 4)
        }
        if hasIgpSecurityIssue {
            serialize_size += igpSecurityIssue.computeBoolSize(fieldNumber: 5)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPConnectionSymmetricKeyResponse.Builder {
        return IGPConnectionSymmetricKeyResponse.classBuilder() as! IGPConnectionSymmetricKeyResponse.Builder
    }
    public func getBuilder() -> IGPConnectionSymmetricKeyResponse.Builder {
        return classBuilder() as! IGPConnectionSymmetricKeyResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPConnectionSymmetricKeyResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPConnectionSymmetricKeyResponse.Builder()
    }
    public func toBuilder() throws -> IGPConnectionSymmetricKeyResponse.Builder {
        return try IGPConnectionSymmetricKeyResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPConnectionSymmetricKeyResponse) throws -> IGPConnectionSymmetricKeyResponse.Builder {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpStatus {
            jsonMap["IGPStatus"] = igpStatus.toString()
        }
        if hasIgpSymmetricMethod {
            jsonMap["IGPSymmetricMethod"] = igpSymmetricMethod
        }
        if hasIgpSymmetricIvSize {
            jsonMap["IGPSymmetricIvSize"] = Int(igpSymmetricIvSize)
        }
        if hasIgpSecurityIssue {
            jsonMap["IGPSecurityIssue"] = igpSecurityIssue
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if (hasIgpStatus) {
            output += "\(indent) igpStatus: \(igpStatus.description)\n"
        }
        if hasIgpSymmetricMethod {
            output += "\(indent) igpSymmetricMethod: \(igpSymmetricMethod) \n"
        }
        if hasIgpSymmetricIvSize {
            output += "\(indent) igpSymmetricIvSize: \(igpSymmetricIvSize) \n"
        }
        if hasIgpSecurityIssue {
            output += "\(indent) igpSecurityIssue: \(igpSecurityIssue) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpStatus {
                 hashCode = (hashCode &* 31) &+ igpStatus.hashValue
            }
            if hasIgpSymmetricMethod {
                hashCode = (hashCode &* 31) &+ igpSymmetricMethod.hashValue
            }
            if hasIgpSymmetricIvSize {
                hashCode = (hashCode &* 31) &+ igpSymmetricIvSize.hashValue
            }
            if hasIgpSecurityIssue {
                hashCode = (hashCode &* 31) &+ igpSecurityIssue.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPConnectionSymmetricKeyResponse"
    }
    override public func className() -> String {
        return "IGPConnectionSymmetricKeyResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPConnectionSymmetricKeyResponse = IGPConnectionSymmetricKeyResponse()
        public func getMessage() -> IGPConnectionSymmetricKeyResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPConnectionSymmetricKeyResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPConnectionSymmetricKeyResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPConnectionSymmetricKeyResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
            public var igpStatus:IGPConnectionSymmetricKeyResponse.IGPStatus {
                get {
                    return builderResult.igpStatus
                }
                set (value) {
                    builderResult.hasIgpStatus = true
                    builderResult.igpStatus = value
                }
            }
            public var hasIgpStatus:Bool{
                get {
                    return builderResult.hasIgpStatus
                }
            }
        @discardableResult
            public func setIgpStatus(_ value:IGPConnectionSymmetricKeyResponse.IGPStatus) -> IGPConnectionSymmetricKeyResponse.Builder {
              self.igpStatus = value
              return self
            }
        @discardableResult
            public func clearIgpStatus() -> IGPConnectionSymmetricKeyResponse.Builder {
               builderResult.hasIgpStatus = false
               builderResult.igpStatus = .rejected
               return self
            }
        public var igpSymmetricMethod:String {
            get {
                return builderResult.igpSymmetricMethod
            }
            set (value) {
                builderResult.hasIgpSymmetricMethod = true
                builderResult.igpSymmetricMethod = value
            }
        }
        public var hasIgpSymmetricMethod:Bool {
            get {
                return builderResult.hasIgpSymmetricMethod
            }
        }
        @discardableResult
        public func setIgpSymmetricMethod(_ value:String) -> IGPConnectionSymmetricKeyResponse.Builder {
            self.igpSymmetricMethod = value
            return self
        }
        @discardableResult
        public func clearIgpSymmetricMethod() -> IGPConnectionSymmetricKeyResponse.Builder{
            builderResult.hasIgpSymmetricMethod = false
            builderResult.igpSymmetricMethod = nil
            return self
        }
        public var igpSymmetricIvSize:Int32 {
            get {
                return builderResult.igpSymmetricIvSize
            }
            set (value) {
                builderResult.hasIgpSymmetricIvSize = true
                builderResult.igpSymmetricIvSize = value
            }
        }
        public var hasIgpSymmetricIvSize:Bool {
            get {
                return builderResult.hasIgpSymmetricIvSize
            }
        }
        @discardableResult
        public func setIgpSymmetricIvSize(_ value:Int32) -> IGPConnectionSymmetricKeyResponse.Builder {
            self.igpSymmetricIvSize = value
            return self
        }
        @discardableResult
        public func clearIgpSymmetricIvSize() -> IGPConnectionSymmetricKeyResponse.Builder{
            builderResult.hasIgpSymmetricIvSize = false
            builderResult.igpSymmetricIvSize = nil
            return self
        }
        public var igpSecurityIssue:Bool {
            get {
                return builderResult.igpSecurityIssue
            }
            set (value) {
                builderResult.hasIgpSecurityIssue = true
                builderResult.igpSecurityIssue = value
            }
        }
        public var hasIgpSecurityIssue:Bool {
            get {
                return builderResult.hasIgpSecurityIssue
            }
        }
        @discardableResult
        public func setIgpSecurityIssue(_ value:Bool) -> IGPConnectionSymmetricKeyResponse.Builder {
            self.igpSecurityIssue = value
            return self
        }
        @discardableResult
        public func clearIgpSecurityIssue() -> IGPConnectionSymmetricKeyResponse.Builder{
            builderResult.hasIgpSecurityIssue = false
            builderResult.igpSecurityIssue = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPConnectionSymmetricKeyResponse.Builder {
            builderResult = IGPConnectionSymmetricKeyResponse()
            return self
        }
        override public func clone() throws -> IGPConnectionSymmetricKeyResponse.Builder {
            return try IGPConnectionSymmetricKeyResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPConnectionSymmetricKeyResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPConnectionSymmetricKeyResponse {
            let returnMe:IGPConnectionSymmetricKeyResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPConnectionSymmetricKeyResponse) throws -> IGPConnectionSymmetricKeyResponse.Builder {
            if other == IGPConnectionSymmetricKeyResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpStatus {
                igpStatus = other.igpStatus
            }
            if other.hasIgpSymmetricMethod {
                igpSymmetricMethod = other.igpSymmetricMethod
            }
            if other.hasIgpSymmetricIvSize {
                igpSymmetricIvSize = other.igpSymmetricIvSize
            }
            if other.hasIgpSecurityIssue {
                igpSecurityIssue = other.igpSecurityIssue
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPConnectionSymmetricKeyResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKeyResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    let valueIntigpStatus = try codedInputStream.readEnum()
                    if let enumsigpStatus = IGPConnectionSymmetricKeyResponse.IGPStatus(rawValue:valueIntigpStatus){
                        igpStatus = enumsigpStatus
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntigpStatus))
                    }

                case 26:
                    igpSymmetricMethod = try codedInputStream.readString()

                case 32:
                    igpSymmetricIvSize = try codedInputStream.readInt32()

                case 40:
                    igpSecurityIssue = try codedInputStream.readBool()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPConnectionSymmetricKeyResponse.Builder {
            let resultDecodedBuilder = IGPConnectionSymmetricKeyResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpStatus = jsonMap["IGPStatus"] as? String {
                resultDecodedBuilder.igpStatus = try IGPConnectionSymmetricKeyResponse.IGPStatus.fromString(jsonValueIgpStatus)
            }
            if let jsonValueIgpSymmetricMethod = jsonMap["IGPSymmetricMethod"] as? String {
                resultDecodedBuilder.igpSymmetricMethod = jsonValueIgpSymmetricMethod
            }
            if let jsonValueIgpSymmetricIvSize = jsonMap["IGPSymmetricIvSize"] as? Int {
                resultDecodedBuilder.igpSymmetricIvSize = Int32(jsonValueIgpSymmetricIvSize)
            } else if let jsonValueIgpSymmetricIvSize = jsonMap["IGPSymmetricIvSize"] as? String {
                resultDecodedBuilder.igpSymmetricIvSize = Int32(jsonValueIgpSymmetricIvSize)!
            }
            if let jsonValueIgpSecurityIssue = jsonMap["IGPSecurityIssue"] as? Bool {
                resultDecodedBuilder.igpSecurityIssue = jsonValueIgpSecurityIssue
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPConnectionSymmetricKeyResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPConnectionSymmetricKeyResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPConnectionSecuringResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPConnectionSecuringResponse> {
        var mergedArray = Array<IGPConnectionSecuringResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPConnectionSecuringResponse? {
        return try IGPConnectionSecuringResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder().mergeFrom(data: data, extensionRegistry:ConnectionSecuringRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSecuringResponse {
        return try IGPConnectionSecuringResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpPublicKey": return self.igpPublicKey
        case "igpSymmetricKeyLength": return self.igpSymmetricKeyLength
        case "igpHeartbeatInterval": return self.igpHeartbeatInterval
        case "igpPrimaryNodeName": return self.igpPrimaryNodeName
        case "igpSecondaryChunkSize": return self.igpSecondaryChunkSize
        default: return nil
        }
    }
}
extension IGPConnectionSecuringResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPConnectionSecuringResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpPublicKey": return self.igpPublicKey
            case "igpSymmetricKeyLength": return self.igpSymmetricKeyLength
            case "igpHeartbeatInterval": return self.igpHeartbeatInterval
            case "igpPrimaryNodeName": return self.igpPrimaryNodeName
            case "igpSecondaryChunkSize": return self.igpSecondaryChunkSize
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpPublicKey":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPublicKey = newSubscriptValue
            case "igpSymmetricKeyLength":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpSymmetricKeyLength = newSubscriptValue
            case "igpHeartbeatInterval":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpHeartbeatInterval = newSubscriptValue
            case "igpPrimaryNodeName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPrimaryNodeName = newSubscriptValue
            case "igpSecondaryChunkSize":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpSecondaryChunkSize = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPConnectionSymmetricKey: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPConnectionSymmetricKey> {
        var mergedArray = Array<IGPConnectionSymmetricKey>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPConnectionSymmetricKey? {
        return try IGPConnectionSymmetricKey.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder().mergeFrom(data: data, extensionRegistry:ConnectionSecuringRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKey {
        return try IGPConnectionSymmetricKey.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpSymmetricKey": return self.igpSymmetricKey
        case "igpVersion": return self.igpVersion
        default: return nil
        }
    }
}
extension IGPConnectionSymmetricKey.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPConnectionSymmetricKey
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpSymmetricKey": return self.igpSymmetricKey
            case "igpVersion": return self.igpVersion
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpSymmetricKey":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.igpSymmetricKey = newSubscriptValue
            case "igpVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpVersion = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPConnectionSymmetricKeyResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPConnectionSymmetricKeyResponse> {
        var mergedArray = Array<IGPConnectionSymmetricKeyResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPConnectionSymmetricKeyResponse? {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeFrom(data: data, extensionRegistry:ConnectionSecuringRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPConnectionSymmetricKeyResponse {
        return try IGPConnectionSymmetricKeyResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpStatus": return self.igpStatus
        case "igpSymmetricMethod": return self.igpSymmetricMethod
        case "igpSymmetricIvSize": return self.igpSymmetricIvSize
        case "igpSecurityIssue": return self.igpSecurityIssue
        default: return nil
        }
    }
}
extension IGPConnectionSymmetricKeyResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPConnectionSymmetricKeyResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpStatus": return self.igpStatus
            case "igpSymmetricMethod": return self.igpSymmetricMethod
            case "igpSymmetricIvSize": return self.igpSymmetricIvSize
            case "igpSecurityIssue": return self.igpSecurityIssue
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpStatus":
                guard let newSubscriptValue = newSubscriptValue as? IGPConnectionSymmetricKeyResponse.IGPStatus else {
                    return
                }
                self.igpStatus = newSubscriptValue
            case "igpSymmetricMethod":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpSymmetricMethod = newSubscriptValue
            case "igpSymmetricIvSize":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpSymmetricIvSize = newSubscriptValue
            case "igpSecurityIssue":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpSecurityIssue = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
