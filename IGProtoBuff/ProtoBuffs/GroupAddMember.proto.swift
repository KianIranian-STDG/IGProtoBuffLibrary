/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "GroupAddMember.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct GroupAddMemberRoot {
    public static let `default` = GroupAddMemberRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPGroupAddMember : GeneratedMessage {

    public static func == (lhs: IGPGroupAddMember, rhs: IGPGroupAddMember) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpMember == rhs.hasIgpMember) && (!lhs.hasIgpMember || lhs.igpMember == rhs.igpMember)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPMember : GeneratedMessage {

        public static func == (lhs: IGPGroupAddMember.IGPMember, rhs: IGPGroupAddMember.IGPMember) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpUserId == rhs.hasIgpUserId) && (!lhs.hasIgpUserId || lhs.igpUserId == rhs.igpUserId)
            fieldCheck = fieldCheck && (lhs.hasIgpStartMessageId == rhs.hasIgpStartMessageId) && (!lhs.hasIgpStartMessageId || lhs.igpStartMessageId == rhs.igpStartMessageId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpUserId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpUserId:Bool = false

        public fileprivate(set) var igpStartMessageId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpStartMessageId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpUserId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:igpUserId)
            }
            if hasIgpStartMessageId {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:igpStartMessageId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpUserId {
                serialize_size += igpUserId.computeInt64Size(fieldNumber: 1)
            }
            if hasIgpStartMessageId {
                serialize_size += igpStartMessageId.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPGroupAddMember.IGPMember.Builder {
            return IGPGroupAddMember.IGPMember.classBuilder() as! IGPGroupAddMember.IGPMember.Builder
        }
        public func getBuilder() -> IGPGroupAddMember.IGPMember.Builder {
            return classBuilder() as! IGPGroupAddMember.IGPMember.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPGroupAddMember.IGPMember.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPGroupAddMember.IGPMember.Builder()
        }
        public func toBuilder() throws -> IGPGroupAddMember.IGPMember.Builder {
            return try IGPGroupAddMember.IGPMember.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPGroupAddMember.IGPMember) throws -> IGPGroupAddMember.IGPMember.Builder {
            return try IGPGroupAddMember.IGPMember.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpUserId {
                jsonMap["IGPUserId"] = "\(igpUserId)"
            }
            if hasIgpStartMessageId {
                jsonMap["IGPStartMessageId"] = "\(igpStartMessageId)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupAddMember.IGPMember {
            return try IGPGroupAddMember.IGPMember.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPGroupAddMember.IGPMember {
            return try IGPGroupAddMember.IGPMember.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpUserId {
                output += "\(indent) igpUserId: \(igpUserId) \n"
            }
            if hasIgpStartMessageId {
                output += "\(indent) igpStartMessageId: \(igpStartMessageId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpUserId {
                    hashCode = (hashCode &* 31) &+ igpUserId.hashValue
                }
                if hasIgpStartMessageId {
                    hashCode = (hashCode &* 31) &+ igpStartMessageId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPGroupAddMember.IGPMember"
        }
        override public func className() -> String {
            return "IGPGroupAddMember.IGPMember"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPGroupAddMember.IGPMember = IGPGroupAddMember.IGPMember()
            public func getMessage() -> IGPGroupAddMember.IGPMember {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpUserId:Int64 {
                get {
                    return builderResult.igpUserId
                }
                set (value) {
                    builderResult.hasIgpUserId = true
                    builderResult.igpUserId = value
                }
            }
            public var hasIgpUserId:Bool {
                get {
                    return builderResult.hasIgpUserId
                }
            }
            @discardableResult
            public func setIgpUserId(_ value:Int64) -> IGPGroupAddMember.IGPMember.Builder {
                self.igpUserId = value
                return self
            }
            @discardableResult
            public func clearIgpUserId() -> IGPGroupAddMember.IGPMember.Builder{
                builderResult.hasIgpUserId = false
                builderResult.igpUserId = Int64(0)
                return self
            }
            public var igpStartMessageId:Int64 {
                get {
                    return builderResult.igpStartMessageId
                }
                set (value) {
                    builderResult.hasIgpStartMessageId = true
                    builderResult.igpStartMessageId = value
                }
            }
            public var hasIgpStartMessageId:Bool {
                get {
                    return builderResult.hasIgpStartMessageId
                }
            }
            @discardableResult
            public func setIgpStartMessageId(_ value:Int64) -> IGPGroupAddMember.IGPMember.Builder {
                self.igpStartMessageId = value
                return self
            }
            @discardableResult
            public func clearIgpStartMessageId() -> IGPGroupAddMember.IGPMember.Builder{
                builderResult.hasIgpStartMessageId = false
                builderResult.igpStartMessageId = Int64(0)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPGroupAddMember.IGPMember.Builder {
                builderResult = IGPGroupAddMember.IGPMember()
                return self
            }
            override public func clone() throws -> IGPGroupAddMember.IGPMember.Builder {
                return try IGPGroupAddMember.IGPMember.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPGroupAddMember.IGPMember {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPGroupAddMember.IGPMember {
                let returnMe:IGPGroupAddMember.IGPMember = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPGroupAddMember.IGPMember) throws -> IGPGroupAddMember.IGPMember.Builder {
                if other == IGPGroupAddMember.IGPMember() {
                    return self
                }
                if other.hasIgpUserId {
                    igpUserId = other.igpUserId
                }
                if other.hasIgpStartMessageId {
                    igpStartMessageId = other.igpStartMessageId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupAddMember.IGPMember.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember.IGPMember.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        igpUserId = try codedInputStream.readInt64()

                    case 16:
                        igpStartMessageId = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupAddMember.IGPMember.Builder {
                let resultDecodedBuilder = IGPGroupAddMember.IGPMember.Builder()
                if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? String {
                    resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)!
                } else if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? Int {
                    resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)
                }
                if let jsonValueIgpStartMessageId = jsonMap["IGPStartMessageId"] as? String {
                    resultDecodedBuilder.igpStartMessageId = Int64(jsonValueIgpStartMessageId)!
                } else if let jsonValueIgpStartMessageId = jsonMap["IGPStartMessageId"] as? Int {
                    resultDecodedBuilder.igpStartMessageId = Int64(jsonValueIgpStartMessageId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupAddMember.IGPMember.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPGroupAddMember.IGPMember.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpMember:IGPGroupAddMember.IGPMember!
    public fileprivate(set) var hasIgpMember:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpMember {
            try codedOutputStream.writeMessage(fieldNumber: 3, value:igpMember)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if hasIgpMember {
            if let varSizeigpMember = igpMember?.computeMessageSize(fieldNumber: 3) {
                serialize_size += varSizeigpMember
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPGroupAddMember.Builder {
        return IGPGroupAddMember.classBuilder() as! IGPGroupAddMember.Builder
    }
    public func getBuilder() -> IGPGroupAddMember.Builder {
        return classBuilder() as! IGPGroupAddMember.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupAddMember.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupAddMember.Builder()
    }
    public func toBuilder() throws -> IGPGroupAddMember.Builder {
        return try IGPGroupAddMember.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPGroupAddMember) throws -> IGPGroupAddMember.Builder {
        return try IGPGroupAddMember.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        if hasIgpMember {
            jsonMap["IGPMember"] = try igpMember.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpMember {
            output += "\(indent) igpMember {\n"
            if let outDescIgpMember = igpMember {
                output += try outDescIgpMember.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpMember {
                if let hashValueigpMember = igpMember?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpMember
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPGroupAddMember"
    }
    override public func className() -> String {
        return "IGPGroupAddMember"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPGroupAddMember = IGPGroupAddMember()
        public func getMessage() -> IGPGroupAddMember {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPGroupAddMember.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPGroupAddMember.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPGroupAddMember.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPGroupAddMember.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPGroupAddMember.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
        public var igpMember:IGPGroupAddMember.IGPMember! {
            get {
                if igpMemberBuilder_ != nil {
                    builderResult.igpMember = igpMemberBuilder_.getMessage()
                }
                return builderResult.igpMember
            }
            set (value) {
                builderResult.hasIgpMember = true
                builderResult.igpMember = value
            }
        }
        public var hasIgpMember:Bool {
            get {
                return builderResult.hasIgpMember
            }
        }
        fileprivate var igpMemberBuilder_:IGPGroupAddMember.IGPMember.Builder! {
            didSet {
                builderResult.hasIgpMember = true
            }
        }
        public func getIgpMemberBuilder() -> IGPGroupAddMember.IGPMember.Builder {
            if igpMemberBuilder_ == nil {
                igpMemberBuilder_ = IGPGroupAddMember.IGPMember.Builder()
                builderResult.igpMember = igpMemberBuilder_.getMessage()
                if igpMember != nil {
                    try! igpMemberBuilder_.mergeFrom(other: igpMember)
                }
            }
            return igpMemberBuilder_
        }
        @discardableResult
        public func setIgpMember(_ value:IGPGroupAddMember.IGPMember!) -> IGPGroupAddMember.Builder {
            self.igpMember = value
            return self
        }
        @discardableResult
        public func mergeIgpMember(value:IGPGroupAddMember.IGPMember) throws -> IGPGroupAddMember.Builder {
            if builderResult.hasIgpMember {
                builderResult.igpMember = try IGPGroupAddMember.IGPMember.builderWithPrototype(prototype:builderResult.igpMember).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpMember = value
            }
            builderResult.hasIgpMember = true
            return self
        }
        @discardableResult
        public func clearIgpMember() -> IGPGroupAddMember.Builder {
            igpMemberBuilder_ = nil
            builderResult.hasIgpMember = false
            builderResult.igpMember = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPGroupAddMember.Builder {
            builderResult = IGPGroupAddMember()
            return self
        }
        override public func clone() throws -> IGPGroupAddMember.Builder {
            return try IGPGroupAddMember.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPGroupAddMember {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPGroupAddMember {
            let returnMe:IGPGroupAddMember = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPGroupAddMember) throws -> IGPGroupAddMember.Builder {
            if other == IGPGroupAddMember() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if (other.hasIgpMember) {
                try mergeIgpMember(value: other.igpMember)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupAddMember.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 26:
                    let subBuilder:IGPGroupAddMember.IGPMember.Builder = IGPGroupAddMember.IGPMember.Builder()
                    if hasIgpMember {
                        try subBuilder.mergeFrom(other: igpMember)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpMember = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupAddMember.Builder {
            let resultDecodedBuilder = IGPGroupAddMember.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpMember = jsonMap["IGPMember"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpMember = try IGPGroupAddMember.IGPMember.Builder.decodeToBuilder(jsonMap:jsonValueIgpMember).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupAddMember.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPGroupAddMember.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPGroupAddMemberResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPGroupAddMemberResponse, rhs: IGPGroupAddMemberResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpUserId == rhs.hasIgpUserId) && (!lhs.hasIgpUserId || lhs.igpUserId == rhs.igpUserId)
        fieldCheck = fieldCheck && (lhs.hasIgpRole == rhs.hasIgpRole) && (!lhs.hasIgpRole || lhs.igpRole == rhs.igpRole)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpUserId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpUserId:Bool = false

    public fileprivate(set) var igpRole:IGPGroupRoom.IGPRole = IGPGroupRoom.IGPRole.member
    public fileprivate(set) var hasIgpRole:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpUserId {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:igpUserId)
        }
        if hasIgpRole {
            try codedOutputStream.writeEnum(fieldNumber: 4, value:igpRole.rawValue)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if hasIgpUserId {
            serialize_size += igpUserId.computeInt64Size(fieldNumber: 3)
        }
        if (hasIgpRole) {
            serialize_size += igpRole.rawValue.computeEnumSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPGroupAddMemberResponse.Builder {
        return IGPGroupAddMemberResponse.classBuilder() as! IGPGroupAddMemberResponse.Builder
    }
    public func getBuilder() -> IGPGroupAddMemberResponse.Builder {
        return classBuilder() as! IGPGroupAddMemberResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupAddMemberResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupAddMemberResponse.Builder()
    }
    public func toBuilder() throws -> IGPGroupAddMemberResponse.Builder {
        return try IGPGroupAddMemberResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPGroupAddMemberResponse) throws -> IGPGroupAddMemberResponse.Builder {
        return try IGPGroupAddMemberResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        if hasIgpUserId {
            jsonMap["IGPUserId"] = "\(igpUserId)"
        }
        if hasIgpRole {
            jsonMap["IGPRole"] = igpRole.toString()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpUserId {
            output += "\(indent) igpUserId: \(igpUserId) \n"
        }
        if (hasIgpRole) {
            output += "\(indent) igpRole: \(igpRole.description)\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpUserId {
                hashCode = (hashCode &* 31) &+ igpUserId.hashValue
            }
            if hasIgpRole {
                 hashCode = (hashCode &* 31) &+ igpRole.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPGroupAddMemberResponse"
    }
    override public func className() -> String {
        return "IGPGroupAddMemberResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPGroupAddMemberResponse = IGPGroupAddMemberResponse()
        public func getMessage() -> IGPGroupAddMemberResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPGroupAddMemberResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPGroupAddMemberResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPGroupAddMemberResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPGroupAddMemberResponse.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPGroupAddMemberResponse.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
        public var igpUserId:Int64 {
            get {
                return builderResult.igpUserId
            }
            set (value) {
                builderResult.hasIgpUserId = true
                builderResult.igpUserId = value
            }
        }
        public var hasIgpUserId:Bool {
            get {
                return builderResult.hasIgpUserId
            }
        }
        @discardableResult
        public func setIgpUserId(_ value:Int64) -> IGPGroupAddMemberResponse.Builder {
            self.igpUserId = value
            return self
        }
        @discardableResult
        public func clearIgpUserId() -> IGPGroupAddMemberResponse.Builder{
            builderResult.hasIgpUserId = false
            builderResult.igpUserId = Int64(0)
            return self
        }
            public var igpRole:IGPGroupRoom.IGPRole {
                get {
                    return builderResult.igpRole
                }
                set (value) {
                    builderResult.hasIgpRole = true
                    builderResult.igpRole = value
                }
            }
            public var hasIgpRole:Bool{
                get {
                    return builderResult.hasIgpRole
                }
            }
        @discardableResult
            public func setIgpRole(_ value:IGPGroupRoom.IGPRole) -> IGPGroupAddMemberResponse.Builder {
              self.igpRole = value
              return self
            }
        @discardableResult
            public func clearIgpRole() -> IGPGroupAddMemberResponse.Builder {
               builderResult.hasIgpRole = false
               builderResult.igpRole = .member
               return self
            }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPGroupAddMemberResponse.Builder {
            builderResult = IGPGroupAddMemberResponse()
            return self
        }
        override public func clone() throws -> IGPGroupAddMemberResponse.Builder {
            return try IGPGroupAddMemberResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPGroupAddMemberResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPGroupAddMemberResponse {
            let returnMe:IGPGroupAddMemberResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPGroupAddMemberResponse) throws -> IGPGroupAddMemberResponse.Builder {
            if other == IGPGroupAddMemberResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpUserId {
                igpUserId = other.igpUserId
            }
            if other.hasIgpRole {
                igpRole = other.igpRole
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupAddMemberResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMemberResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 24:
                    igpUserId = try codedInputStream.readInt64()

                case 32:
                    let valueIntigpRole = try codedInputStream.readEnum()
                    if let enumsigpRole = IGPGroupRoom.IGPRole(rawValue:valueIntigpRole){
                        igpRole = enumsigpRole
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 4, value:Int64(valueIntigpRole))
                    }

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupAddMemberResponse.Builder {
            let resultDecodedBuilder = IGPGroupAddMemberResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? String {
                resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)!
            } else if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? Int {
                resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)
            }
            if let jsonValueIgpRole = jsonMap["IGPRole"] as? String {
                resultDecodedBuilder.igpRole = try IGPGroupRoom.IGPRole.fromString(str: jsonValueIgpRole)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupAddMemberResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPGroupAddMemberResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPGroupAddMember: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupAddMember> {
        var mergedArray = Array<IGPGroupAddMember>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupAddMember? {
        return try IGPGroupAddMember.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder().mergeFrom(data: data, extensionRegistry:GroupAddMemberRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember {
        return try IGPGroupAddMember.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpRoomId": return self.igpRoomId
        case "igpMember": return self.igpMember
        default: return nil
        }
    }
}
extension IGPGroupAddMember.IGPMember: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupAddMember.IGPMember> {
        var mergedArray = Array<IGPGroupAddMember.IGPMember>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupAddMember.IGPMember? {
        return try IGPGroupAddMember.IGPMember.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupAddMember.IGPMember {
        return try IGPGroupAddMember.IGPMember.Builder().mergeFrom(data: data, extensionRegistry:GroupAddMemberRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember.IGPMember {
        return try IGPGroupAddMember.IGPMember.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupAddMember.IGPMember {
        return try IGPGroupAddMember.IGPMember.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember.IGPMember {
        return try IGPGroupAddMember.IGPMember.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupAddMember.IGPMember {
        return try IGPGroupAddMember.IGPMember.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMember.IGPMember {
        return try IGPGroupAddMember.IGPMember.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpUserId": return self.igpUserId
        case "igpStartMessageId": return self.igpStartMessageId
        default: return nil
        }
    }
}
extension IGPGroupAddMember.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpRoomId": return self.igpRoomId
            case "igpMember": return self.igpMember
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpMember":
                guard let newSubscriptValue = newSubscriptValue as? IGPGroupAddMember.IGPMember else {
                    return
                }
                self.igpMember = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPGroupAddMember.IGPMember.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpUserId": return self.igpUserId
            case "igpStartMessageId": return self.igpStartMessageId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpUserId = newSubscriptValue
            case "igpStartMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpStartMessageId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPGroupAddMemberResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupAddMemberResponse> {
        var mergedArray = Array<IGPGroupAddMemberResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupAddMemberResponse? {
        return try IGPGroupAddMemberResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder().mergeFrom(data: data, extensionRegistry:GroupAddMemberRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupAddMemberResponse {
        return try IGPGroupAddMemberResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpRoomId": return self.igpRoomId
        case "igpUserId": return self.igpUserId
        case "igpRole": return self.igpRole
        default: return nil
        }
    }
}
extension IGPGroupAddMemberResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpRoomId": return self.igpRoomId
            case "igpUserId": return self.igpUserId
            case "igpRole": return self.igpRole
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpUserId = newSubscriptValue
            case "igpRole":
                guard let newSubscriptValue = newSubscriptValue as? IGPGroupRoom.IGPRole else {
                    return
                }
                self.igpRole = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
