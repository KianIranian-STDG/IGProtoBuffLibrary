/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "UserContactsImport.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct UserContactsImportRoot {
    public static let `default` = UserContactsImportRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPUserContactsImport : GeneratedMessage {
    public typealias BuilderType = IGPUserContactsImport.Builder

    public static func == (lhs: IGPUserContactsImport, rhs: IGPUserContactsImport) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.igpContacts == rhs.igpContacts)
        fieldCheck = fieldCheck && (lhs.hasIgpForce == rhs.hasIgpForce) && (!lhs.hasIgpForce || lhs.igpForce == rhs.igpForce)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPContact : GeneratedMessage {
        public typealias BuilderType = IGPUserContactsImport.IGPContact.Builder

        public static func == (lhs: IGPUserContactsImport.IGPContact, rhs: IGPUserContactsImport.IGPContact) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpPhone == rhs.hasIgpPhone) && (!lhs.hasIgpPhone || lhs.igpPhone == rhs.igpPhone)
            fieldCheck = fieldCheck && (lhs.hasIgpFirstName == rhs.hasIgpFirstName) && (!lhs.hasIgpFirstName || lhs.igpFirstName == rhs.igpFirstName)
            fieldCheck = fieldCheck && (lhs.hasIgpLastName == rhs.hasIgpLastName) && (!lhs.hasIgpLastName || lhs.igpLastName == rhs.igpLastName)
            fieldCheck = fieldCheck && (lhs.hasIgpClientId == rhs.hasIgpClientId) && (!lhs.hasIgpClientId || lhs.igpClientId == rhs.igpClientId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpPhone:String! = nil
        public fileprivate(set) var hasIgpPhone:Bool = false

        public fileprivate(set) var igpFirstName:String! = nil
        public fileprivate(set) var hasIgpFirstName:Bool = false

        public fileprivate(set) var igpLastName:String! = nil
        public fileprivate(set) var hasIgpLastName:Bool = false

        public fileprivate(set) var igpClientId:String! = nil
        public fileprivate(set) var hasIgpClientId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpPhone {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpPhone)
            }
            if hasIgpFirstName {
                try codedOutputStream.writeString(fieldNumber: 2, value:igpFirstName)
            }
            if hasIgpLastName {
                try codedOutputStream.writeString(fieldNumber: 3, value:igpLastName)
            }
            if hasIgpClientId {
                try codedOutputStream.writeString(fieldNumber: 4, value:igpClientId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpPhone {
                serialize_size += igpPhone.computeStringSize(fieldNumber: 1)
            }
            if hasIgpFirstName {
                serialize_size += igpFirstName.computeStringSize(fieldNumber: 2)
            }
            if hasIgpLastName {
                serialize_size += igpLastName.computeStringSize(fieldNumber: 3)
            }
            if hasIgpClientId {
                serialize_size += igpClientId.computeStringSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPUserContactsImport.IGPContact.Builder {
            return IGPUserContactsImport.IGPContact.classBuilder() as! IGPUserContactsImport.IGPContact.Builder
        }
        public func getBuilder() -> IGPUserContactsImport.IGPContact.Builder {
            return classBuilder() as! IGPUserContactsImport.IGPContact.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserContactsImport.IGPContact.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserContactsImport.IGPContact.Builder()
        }
        public func toBuilder() throws -> IGPUserContactsImport.IGPContact.Builder {
            return try IGPUserContactsImport.IGPContact.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPUserContactsImport.IGPContact) throws -> IGPUserContactsImport.IGPContact.Builder {
            return try IGPUserContactsImport.IGPContact.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpPhone {
                jsonMap["IGPPhone"] = igpPhone
            }
            if hasIgpFirstName {
                jsonMap["IGPFirstName"] = igpFirstName
            }
            if hasIgpLastName {
                jsonMap["IGPLastName"] = igpLastName
            }
            if hasIgpClientId {
                jsonMap["IGPClientId"] = igpClientId
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImport.IGPContact {
            return try IGPUserContactsImport.IGPContact.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPUserContactsImport.IGPContact {
            return try IGPUserContactsImport.IGPContact.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpPhone {
                output += "\(indent) igpPhone: \(igpPhone) \n"
            }
            if hasIgpFirstName {
                output += "\(indent) igpFirstName: \(igpFirstName) \n"
            }
            if hasIgpLastName {
                output += "\(indent) igpLastName: \(igpLastName) \n"
            }
            if hasIgpClientId {
                output += "\(indent) igpClientId: \(igpClientId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpPhone {
                    hashCode = (hashCode &* 31) &+ igpPhone.hashValue
                }
                if hasIgpFirstName {
                    hashCode = (hashCode &* 31) &+ igpFirstName.hashValue
                }
                if hasIgpLastName {
                    hashCode = (hashCode &* 31) &+ igpLastName.hashValue
                }
                if hasIgpClientId {
                    hashCode = (hashCode &* 31) &+ igpClientId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPUserContactsImport.IGPContact"
        }
        override public func className() -> String {
            return "IGPUserContactsImport.IGPContact"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPUserContactsImport.IGPContact = IGPUserContactsImport.IGPContact()
            public func getMessage() -> IGPUserContactsImport.IGPContact {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpPhone:String {
                get {
                    return builderResult.igpPhone
                }
                set (value) {
                    builderResult.hasIgpPhone = true
                    builderResult.igpPhone = value
                }
            }
            public var hasIgpPhone:Bool {
                get {
                    return builderResult.hasIgpPhone
                }
            }
            @discardableResult
            public func setIgpPhone(_ value:String) -> IGPUserContactsImport.IGPContact.Builder {
                self.igpPhone = value
                return self
            }
            @discardableResult
            public func clearIgpPhone() -> IGPUserContactsImport.IGPContact.Builder{
                builderResult.hasIgpPhone = false
                builderResult.igpPhone = nil
                return self
            }
            public var igpFirstName:String {
                get {
                    return builderResult.igpFirstName
                }
                set (value) {
                    builderResult.hasIgpFirstName = true
                    builderResult.igpFirstName = value
                }
            }
            public var hasIgpFirstName:Bool {
                get {
                    return builderResult.hasIgpFirstName
                }
            }
            @discardableResult
            public func setIgpFirstName(_ value:String) -> IGPUserContactsImport.IGPContact.Builder {
                self.igpFirstName = value
                return self
            }
            @discardableResult
            public func clearIgpFirstName() -> IGPUserContactsImport.IGPContact.Builder{
                builderResult.hasIgpFirstName = false
                builderResult.igpFirstName = nil
                return self
            }
            public var igpLastName:String {
                get {
                    return builderResult.igpLastName
                }
                set (value) {
                    builderResult.hasIgpLastName = true
                    builderResult.igpLastName = value
                }
            }
            public var hasIgpLastName:Bool {
                get {
                    return builderResult.hasIgpLastName
                }
            }
            @discardableResult
            public func setIgpLastName(_ value:String) -> IGPUserContactsImport.IGPContact.Builder {
                self.igpLastName = value
                return self
            }
            @discardableResult
            public func clearIgpLastName() -> IGPUserContactsImport.IGPContact.Builder{
                builderResult.hasIgpLastName = false
                builderResult.igpLastName = nil
                return self
            }
            public var igpClientId:String {
                get {
                    return builderResult.igpClientId
                }
                set (value) {
                    builderResult.hasIgpClientId = true
                    builderResult.igpClientId = value
                }
            }
            public var hasIgpClientId:Bool {
                get {
                    return builderResult.hasIgpClientId
                }
            }
            @discardableResult
            public func setIgpClientId(_ value:String) -> IGPUserContactsImport.IGPContact.Builder {
                self.igpClientId = value
                return self
            }
            @discardableResult
            public func clearIgpClientId() -> IGPUserContactsImport.IGPContact.Builder{
                builderResult.hasIgpClientId = false
                builderResult.igpClientId = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPUserContactsImport.IGPContact.Builder {
                builderResult = IGPUserContactsImport.IGPContact()
                return self
            }
            override public func clone() throws -> IGPUserContactsImport.IGPContact.Builder {
                return try IGPUserContactsImport.IGPContact.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPUserContactsImport.IGPContact {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPUserContactsImport.IGPContact {
                let returnMe:IGPUserContactsImport.IGPContact = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPUserContactsImport.IGPContact) throws -> IGPUserContactsImport.IGPContact.Builder {
                if other == IGPUserContactsImport.IGPContact() {
                    return self
                }
                if other.hasIgpPhone {
                    igpPhone = other.igpPhone
                }
                if other.hasIgpFirstName {
                    igpFirstName = other.igpFirstName
                }
                if other.hasIgpLastName {
                    igpLastName = other.igpLastName
                }
                if other.hasIgpClientId {
                    igpClientId = other.igpClientId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImport.IGPContact.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport.IGPContact.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpPhone = try codedInputStream.readString()

                    case 18:
                        igpFirstName = try codedInputStream.readString()

                    case 26:
                        igpLastName = try codedInputStream.readString()

                    case 34:
                        igpClientId = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImport.IGPContact.Builder {
                let resultDecodedBuilder = IGPUserContactsImport.IGPContact.Builder()
                if let jsonValueIgpPhone = jsonMap["IGPPhone"] as? String {
                    resultDecodedBuilder.igpPhone = jsonValueIgpPhone
                }
                if let jsonValueIgpFirstName = jsonMap["IGPFirstName"] as? String {
                    resultDecodedBuilder.igpFirstName = jsonValueIgpFirstName
                }
                if let jsonValueIgpLastName = jsonMap["IGPLastName"] as? String {
                    resultDecodedBuilder.igpLastName = jsonValueIgpLastName
                }
                if let jsonValueIgpClientId = jsonMap["IGPClientId"] as? String {
                    resultDecodedBuilder.igpClientId = jsonValueIgpClientId
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPUserContactsImport.IGPContact.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPUserContactsImport.IGPContact.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpContacts:Array<IGPUserContactsImport.IGPContact>  = Array<IGPUserContactsImport.IGPContact>()
    public fileprivate(set) var igpForce:Bool! = nil
    public fileprivate(set) var hasIgpForce:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        for oneElementIgpContacts in igpContacts {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpContacts)
        }
        if hasIgpForce {
            try codedOutputStream.writeBool(fieldNumber: 3, value:igpForce)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        for oneElementIgpContacts in igpContacts {
            serialize_size += oneElementIgpContacts.computeMessageSize(fieldNumber: 2)
        }
        if hasIgpForce {
            serialize_size += igpForce.computeBoolSize(fieldNumber: 3)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserContactsImport.Builder {
        return IGPUserContactsImport.classBuilder() as! IGPUserContactsImport.Builder
    }
    public func getBuilder() -> IGPUserContactsImport.Builder {
        return classBuilder() as! IGPUserContactsImport.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsImport.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsImport.Builder()
    }
    public func toBuilder() throws -> IGPUserContactsImport.Builder {
        return try IGPUserContactsImport.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserContactsImport) throws -> IGPUserContactsImport.Builder {
        return try IGPUserContactsImport.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if !igpContacts.isEmpty {
            var jsonArrayIgpContacts:Array<Dictionary<String,Any>> = []
            for oneValueIgpContacts in igpContacts {
                let ecodedMessageIgpContacts = try oneValueIgpContacts.encode()
                jsonArrayIgpContacts.append(ecodedMessageIgpContacts)
            }
            jsonMap["IGPContacts"] = jsonArrayIgpContacts
        }
        if hasIgpForce {
            jsonMap["IGPForce"] = igpForce
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpContactsElementIndex:Int = 0
        for oneElementIgpContacts in igpContacts {
            output += "\(indent) igpContacts[\(igpContactsElementIndex)] {\n"
            output += try oneElementIgpContacts.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpContactsElementIndex += 1
        }
        if hasIgpForce {
            output += "\(indent) igpForce: \(igpForce) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            for oneElementIgpContacts in igpContacts {
                hashCode = (hashCode &* 31) &+ oneElementIgpContacts.hashValue
            }
            if hasIgpForce {
                hashCode = (hashCode &* 31) &+ igpForce.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserContactsImport"
    }
    override public func className() -> String {
        return "IGPUserContactsImport"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPUserContactsImport = IGPUserContactsImport()
        public func getMessage() -> IGPUserContactsImport {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPUserContactsImport.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPUserContactsImport.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPUserContactsImport.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpContacts:Array<IGPUserContactsImport.IGPContact> {
            get {
                return builderResult.igpContacts
            }
            set (value) {
                builderResult.igpContacts = value
            }
        }
        @discardableResult
        public func setIgpContacts(_ value:Array<IGPUserContactsImport.IGPContact>) -> IGPUserContactsImport.Builder {
            self.igpContacts = value
            return self
        }
        @discardableResult
        public func clearIgpContacts() -> IGPUserContactsImport.Builder {
            builderResult.igpContacts.removeAll(keepingCapacity: false)
            return self
        }
        public var igpForce:Bool {
            get {
                return builderResult.igpForce
            }
            set (value) {
                builderResult.hasIgpForce = true
                builderResult.igpForce = value
            }
        }
        public var hasIgpForce:Bool {
            get {
                return builderResult.hasIgpForce
            }
        }
        @discardableResult
        public func setIgpForce(_ value:Bool) -> IGPUserContactsImport.Builder {
            self.igpForce = value
            return self
        }
        @discardableResult
        public func clearIgpForce() -> IGPUserContactsImport.Builder{
            builderResult.hasIgpForce = false
            builderResult.igpForce = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserContactsImport.Builder {
            builderResult = IGPUserContactsImport()
            return self
        }
        override public func clone() throws -> IGPUserContactsImport.Builder {
            return try IGPUserContactsImport.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserContactsImport {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserContactsImport {
            let returnMe:IGPUserContactsImport = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserContactsImport) throws -> IGPUserContactsImport.Builder {
            if other == IGPUserContactsImport() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if !other.igpContacts.isEmpty  {
                 builderResult.igpContacts += other.igpContacts
            }
            if other.hasIgpForce {
                igpForce = other.igpForce
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImport.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPUserContactsImport.IGPContact.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpContacts.append(subBuilder.buildPartial())

                case 24:
                    igpForce = try codedInputStream.readBool()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImport.Builder {
            let resultDecodedBuilder = IGPUserContactsImport.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpContacts = jsonMap["IGPContacts"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpContacts:Array<IGPUserContactsImport.IGPContact> = []
                for oneValueIgpContacts in jsonValueIgpContacts {
                    let messageFromStringIgpContacts = try IGPUserContactsImport.IGPContact.Builder.decodeToBuilder(jsonMap:oneValueIgpContacts).build()

                    jsonArrayIgpContacts.append(messageFromStringIgpContacts)
                }
                resultDecodedBuilder.igpContacts = jsonArrayIgpContacts
            }
            if let jsonValueIgpForce = jsonMap["IGPForce"] as? Bool {
                resultDecodedBuilder.igpForce = jsonValueIgpForce
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserContactsImport.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserContactsImport.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPUserContactsImportResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPUserContactsImportResponse.Builder

    public static func == (lhs: IGPUserContactsImportResponse, rhs: IGPUserContactsImportResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.igpRegisteredContacts == rhs.igpRegisteredContacts)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPContact : GeneratedMessage {
        public typealias BuilderType = IGPUserContactsImportResponse.IGPContact.Builder

        public static func == (lhs: IGPUserContactsImportResponse.IGPContact, rhs: IGPUserContactsImportResponse.IGPContact) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpClientId == rhs.hasIgpClientId) && (!lhs.hasIgpClientId || lhs.igpClientId == rhs.igpClientId)
            fieldCheck = fieldCheck && (lhs.hasIgpUserId == rhs.hasIgpUserId) && (!lhs.hasIgpUserId || lhs.igpUserId == rhs.igpUserId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpClientId:String! = nil
        public fileprivate(set) var hasIgpClientId:Bool = false

        public fileprivate(set) var igpUserId:Int64! = nil
        public fileprivate(set) var hasIgpUserId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpClientId {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpClientId)
            }
            if hasIgpUserId {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:igpUserId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpClientId {
                serialize_size += igpClientId.computeStringSize(fieldNumber: 1)
            }
            if hasIgpUserId {
                serialize_size += igpUserId.computeInt64Size(fieldNumber: 2)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPUserContactsImportResponse.IGPContact.Builder {
            return IGPUserContactsImportResponse.IGPContact.classBuilder() as! IGPUserContactsImportResponse.IGPContact.Builder
        }
        public func getBuilder() -> IGPUserContactsImportResponse.IGPContact.Builder {
            return classBuilder() as! IGPUserContactsImportResponse.IGPContact.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserContactsImportResponse.IGPContact.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserContactsImportResponse.IGPContact.Builder()
        }
        public func toBuilder() throws -> IGPUserContactsImportResponse.IGPContact.Builder {
            return try IGPUserContactsImportResponse.IGPContact.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPUserContactsImportResponse.IGPContact) throws -> IGPUserContactsImportResponse.IGPContact.Builder {
            return try IGPUserContactsImportResponse.IGPContact.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpClientId {
                jsonMap["IGPClientId"] = igpClientId
            }
            if hasIgpUserId {
                jsonMap["IGPUserId"] = "\(igpUserId!)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImportResponse.IGPContact {
            return try IGPUserContactsImportResponse.IGPContact.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPUserContactsImportResponse.IGPContact {
            return try IGPUserContactsImportResponse.IGPContact.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpClientId {
                output += "\(indent) igpClientId: \(igpClientId) \n"
            }
            if hasIgpUserId {
                output += "\(indent) igpUserId: \(igpUserId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpClientId {
                    hashCode = (hashCode &* 31) &+ igpClientId.hashValue
                }
                if hasIgpUserId {
                    hashCode = (hashCode &* 31) &+ igpUserId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPUserContactsImportResponse.IGPContact"
        }
        override public func className() -> String {
            return "IGPUserContactsImportResponse.IGPContact"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPUserContactsImportResponse.IGPContact = IGPUserContactsImportResponse.IGPContact()
            public func getMessage() -> IGPUserContactsImportResponse.IGPContact {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpClientId:String {
                get {
                    return builderResult.igpClientId
                }
                set (value) {
                    builderResult.hasIgpClientId = true
                    builderResult.igpClientId = value
                }
            }
            public var hasIgpClientId:Bool {
                get {
                    return builderResult.hasIgpClientId
                }
            }
            @discardableResult
            public func setIgpClientId(_ value:String) -> IGPUserContactsImportResponse.IGPContact.Builder {
                self.igpClientId = value
                return self
            }
            @discardableResult
            public func clearIgpClientId() -> IGPUserContactsImportResponse.IGPContact.Builder{
                builderResult.hasIgpClientId = false
                builderResult.igpClientId = nil
                return self
            }
            public var igpUserId:Int64 {
                get {
                    return builderResult.igpUserId
                }
                set (value) {
                    builderResult.hasIgpUserId = true
                    builderResult.igpUserId = value
                }
            }
            public var hasIgpUserId:Bool {
                get {
                    return builderResult.hasIgpUserId
                }
            }
            @discardableResult
            public func setIgpUserId(_ value:Int64) -> IGPUserContactsImportResponse.IGPContact.Builder {
                self.igpUserId = value
                return self
            }
            @discardableResult
            public func clearIgpUserId() -> IGPUserContactsImportResponse.IGPContact.Builder{
                builderResult.hasIgpUserId = false
                builderResult.igpUserId = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPUserContactsImportResponse.IGPContact.Builder {
                builderResult = IGPUserContactsImportResponse.IGPContact()
                return self
            }
            override public func clone() throws -> IGPUserContactsImportResponse.IGPContact.Builder {
                return try IGPUserContactsImportResponse.IGPContact.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPUserContactsImportResponse.IGPContact {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPUserContactsImportResponse.IGPContact {
                let returnMe:IGPUserContactsImportResponse.IGPContact = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPUserContactsImportResponse.IGPContact) throws -> IGPUserContactsImportResponse.IGPContact.Builder {
                if other == IGPUserContactsImportResponse.IGPContact() {
                    return self
                }
                if other.hasIgpClientId {
                    igpClientId = other.igpClientId
                }
                if other.hasIgpUserId {
                    igpUserId = other.igpUserId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImportResponse.IGPContact.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse.IGPContact.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpClientId = try codedInputStream.readString()

                    case 16:
                        igpUserId = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImportResponse.IGPContact.Builder {
                let resultDecodedBuilder = IGPUserContactsImportResponse.IGPContact.Builder()
                if let jsonValueIgpClientId = jsonMap["IGPClientId"] as? String {
                    resultDecodedBuilder.igpClientId = jsonValueIgpClientId
                }
                if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? String {
                    resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)!
                } else if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? Int {
                    resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPUserContactsImportResponse.IGPContact.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPUserContactsImportResponse.IGPContact.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRegisteredContacts:Array<IGPUserContactsImportResponse.IGPContact>  = Array<IGPUserContactsImportResponse.IGPContact>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        for oneElementIgpRegisteredContacts in igpRegisteredContacts {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpRegisteredContacts)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        for oneElementIgpRegisteredContacts in igpRegisteredContacts {
            serialize_size += oneElementIgpRegisteredContacts.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserContactsImportResponse.Builder {
        return IGPUserContactsImportResponse.classBuilder() as! IGPUserContactsImportResponse.Builder
    }
    public func getBuilder() -> IGPUserContactsImportResponse.Builder {
        return classBuilder() as! IGPUserContactsImportResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsImportResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsImportResponse.Builder()
    }
    public func toBuilder() throws -> IGPUserContactsImportResponse.Builder {
        return try IGPUserContactsImportResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserContactsImportResponse) throws -> IGPUserContactsImportResponse.Builder {
        return try IGPUserContactsImportResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if !igpRegisteredContacts.isEmpty {
            var jsonArrayIgpRegisteredContacts:Array<Dictionary<String,Any>> = []
            for oneValueIgpRegisteredContacts in igpRegisteredContacts {
                let ecodedMessageIgpRegisteredContacts = try oneValueIgpRegisteredContacts.encode()
                jsonArrayIgpRegisteredContacts.append(ecodedMessageIgpRegisteredContacts)
            }
            jsonMap["IGPRegisteredContacts"] = jsonArrayIgpRegisteredContacts
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpRegisteredContactsElementIndex:Int = 0
        for oneElementIgpRegisteredContacts in igpRegisteredContacts {
            output += "\(indent) igpRegisteredContacts[\(igpRegisteredContactsElementIndex)] {\n"
            output += try oneElementIgpRegisteredContacts.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpRegisteredContactsElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            for oneElementIgpRegisteredContacts in igpRegisteredContacts {
                hashCode = (hashCode &* 31) &+ oneElementIgpRegisteredContacts.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserContactsImportResponse"
    }
    override public func className() -> String {
        return "IGPUserContactsImportResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPUserContactsImportResponse = IGPUserContactsImportResponse()
        public func getMessage() -> IGPUserContactsImportResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPUserContactsImportResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPUserContactsImportResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPUserContactsImportResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpRegisteredContacts:Array<IGPUserContactsImportResponse.IGPContact> {
            get {
                return builderResult.igpRegisteredContacts
            }
            set (value) {
                builderResult.igpRegisteredContacts = value
            }
        }
        @discardableResult
        public func setIgpRegisteredContacts(_ value:Array<IGPUserContactsImportResponse.IGPContact>) -> IGPUserContactsImportResponse.Builder {
            self.igpRegisteredContacts = value
            return self
        }
        @discardableResult
        public func clearIgpRegisteredContacts() -> IGPUserContactsImportResponse.Builder {
            builderResult.igpRegisteredContacts.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserContactsImportResponse.Builder {
            builderResult = IGPUserContactsImportResponse()
            return self
        }
        override public func clone() throws -> IGPUserContactsImportResponse.Builder {
            return try IGPUserContactsImportResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserContactsImportResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserContactsImportResponse {
            let returnMe:IGPUserContactsImportResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserContactsImportResponse) throws -> IGPUserContactsImportResponse.Builder {
            if other == IGPUserContactsImportResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if !other.igpRegisteredContacts.isEmpty  {
                 builderResult.igpRegisteredContacts += other.igpRegisteredContacts
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImportResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPUserContactsImportResponse.IGPContact.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpRegisteredContacts.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsImportResponse.Builder {
            let resultDecodedBuilder = IGPUserContactsImportResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpRegisteredContacts = jsonMap["IGPRegisteredContacts"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpRegisteredContacts:Array<IGPUserContactsImportResponse.IGPContact> = []
                for oneValueIgpRegisteredContacts in jsonValueIgpRegisteredContacts {
                    let messageFromStringIgpRegisteredContacts = try IGPUserContactsImportResponse.IGPContact.Builder.decodeToBuilder(jsonMap:oneValueIgpRegisteredContacts).build()

                    jsonArrayIgpRegisteredContacts.append(messageFromStringIgpRegisteredContacts)
                }
                resultDecodedBuilder.igpRegisteredContacts = jsonArrayIgpRegisteredContacts
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserContactsImportResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserContactsImportResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPUserContactsImport: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserContactsImport> {
        var mergedArray = Array<IGPUserContactsImport>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserContactsImport? {
        return try IGPUserContactsImport.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder().mergeFrom(data: data, extensionRegistry:UserContactsImportRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport {
        return try IGPUserContactsImport.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpContacts": return self.igpContacts
        case "igpForce": return self.igpForce
        default: return nil
        }
    }
}
extension IGPUserContactsImport.IGPContact: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserContactsImport.IGPContact> {
        var mergedArray = Array<IGPUserContactsImport.IGPContact>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserContactsImport.IGPContact? {
        return try IGPUserContactsImport.IGPContact.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserContactsImport.IGPContact {
        return try IGPUserContactsImport.IGPContact.Builder().mergeFrom(data: data, extensionRegistry:UserContactsImportRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport.IGPContact {
        return try IGPUserContactsImport.IGPContact.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserContactsImport.IGPContact {
        return try IGPUserContactsImport.IGPContact.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport.IGPContact {
        return try IGPUserContactsImport.IGPContact.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImport.IGPContact {
        return try IGPUserContactsImport.IGPContact.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImport.IGPContact {
        return try IGPUserContactsImport.IGPContact.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpPhone": return self.igpPhone
        case "igpFirstName": return self.igpFirstName
        case "igpLastName": return self.igpLastName
        case "igpClientId": return self.igpClientId
        default: return nil
        }
    }
}
extension IGPUserContactsImport.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserContactsImport
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpContacts": return self.igpContacts
            case "igpForce": return self.igpForce
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpContacts":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPUserContactsImport.IGPContact> else {
                    return
                }
                self.igpContacts = newSubscriptValue
            case "igpForce":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpForce = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserContactsImport.IGPContact.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserContactsImport.IGPContact
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpPhone": return self.igpPhone
            case "igpFirstName": return self.igpFirstName
            case "igpLastName": return self.igpLastName
            case "igpClientId": return self.igpClientId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpPhone":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPhone = newSubscriptValue
            case "igpFirstName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpFirstName = newSubscriptValue
            case "igpLastName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpLastName = newSubscriptValue
            case "igpClientId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpClientId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserContactsImportResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserContactsImportResponse> {
        var mergedArray = Array<IGPUserContactsImportResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserContactsImportResponse? {
        return try IGPUserContactsImportResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder().mergeFrom(data: data, extensionRegistry:UserContactsImportRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse {
        return try IGPUserContactsImportResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpRegisteredContacts": return self.igpRegisteredContacts
        default: return nil
        }
    }
}
extension IGPUserContactsImportResponse.IGPContact: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserContactsImportResponse.IGPContact> {
        var mergedArray = Array<IGPUserContactsImportResponse.IGPContact>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserContactsImportResponse.IGPContact? {
        return try IGPUserContactsImportResponse.IGPContact.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserContactsImportResponse.IGPContact {
        return try IGPUserContactsImportResponse.IGPContact.Builder().mergeFrom(data: data, extensionRegistry:UserContactsImportRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse.IGPContact {
        return try IGPUserContactsImportResponse.IGPContact.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserContactsImportResponse.IGPContact {
        return try IGPUserContactsImportResponse.IGPContact.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse.IGPContact {
        return try IGPUserContactsImportResponse.IGPContact.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsImportResponse.IGPContact {
        return try IGPUserContactsImportResponse.IGPContact.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsImportResponse.IGPContact {
        return try IGPUserContactsImportResponse.IGPContact.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpClientId": return self.igpClientId
        case "igpUserId": return self.igpUserId
        default: return nil
        }
    }
}
extension IGPUserContactsImportResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserContactsImportResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpRegisteredContacts": return self.igpRegisteredContacts
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpRegisteredContacts":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPUserContactsImportResponse.IGPContact> else {
                    return
                }
                self.igpRegisteredContacts = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserContactsImportResponse.IGPContact.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserContactsImportResponse.IGPContact
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpClientId": return self.igpClientId
            case "igpUserId": return self.igpUserId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpClientId":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpClientId = newSubscriptValue
            case "igpUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpUserId = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
