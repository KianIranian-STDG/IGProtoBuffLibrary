/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "SignalingGetConfiguration.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct SignalingGetConfigurationRoot {
    public static let `default` = SignalingGetConfigurationRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPSignalingGetConfiguration : GeneratedMessage {

    public static func == (lhs: IGPSignalingGetConfiguration, rhs: IGPSignalingGetConfiguration) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingGetConfiguration.Builder {
        return IGPSignalingGetConfiguration.classBuilder() as! IGPSignalingGetConfiguration.Builder
    }
    public func getBuilder() -> IGPSignalingGetConfiguration.Builder {
        return classBuilder() as! IGPSignalingGetConfiguration.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetConfiguration.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetConfiguration.Builder()
    }
    public func toBuilder() throws -> IGPSignalingGetConfiguration.Builder {
        return try IGPSignalingGetConfiguration.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingGetConfiguration) throws -> IGPSignalingGetConfiguration.Builder {
        return try IGPSignalingGetConfiguration.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingGetConfiguration"
    }
    override public func className() -> String {
        return "IGPSignalingGetConfiguration"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPSignalingGetConfiguration = IGPSignalingGetConfiguration()
        public func getMessage() -> IGPSignalingGetConfiguration {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPSignalingGetConfiguration.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPSignalingGetConfiguration.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPSignalingGetConfiguration.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingGetConfiguration.Builder {
            builderResult = IGPSignalingGetConfiguration()
            return self
        }
        override public func clone() throws -> IGPSignalingGetConfiguration.Builder {
            return try IGPSignalingGetConfiguration.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingGetConfiguration {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingGetConfiguration {
            let returnMe:IGPSignalingGetConfiguration = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingGetConfiguration) throws -> IGPSignalingGetConfiguration.Builder {
            if other == IGPSignalingGetConfiguration() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetConfiguration.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfiguration.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetConfiguration.Builder {
            let resultDecodedBuilder = IGPSignalingGetConfiguration.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingGetConfiguration.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingGetConfiguration.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPSignalingGetConfigurationResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPSignalingGetConfigurationResponse, rhs: IGPSignalingGetConfigurationResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.igpIceServer == rhs.igpIceServer)
        fieldCheck = fieldCheck && (lhs.hasIgpVoiceCalling == rhs.hasIgpVoiceCalling) && (!lhs.hasIgpVoiceCalling || lhs.igpVoiceCalling == rhs.igpVoiceCalling)
        fieldCheck = fieldCheck && (lhs.hasIgpVideoCalling == rhs.hasIgpVideoCalling) && (!lhs.hasIgpVideoCalling || lhs.igpVideoCalling == rhs.igpVideoCalling)
        fieldCheck = fieldCheck && (lhs.hasIgpScreenSharing == rhs.hasIgpScreenSharing) && (!lhs.hasIgpScreenSharing || lhs.igpScreenSharing == rhs.igpScreenSharing)
        fieldCheck = fieldCheck && (lhs.hasIgpSecretChat == rhs.hasIgpSecretChat) && (!lhs.hasIgpSecretChat || lhs.igpSecretChat == rhs.igpSecretChat)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPIceServer : GeneratedMessage {

        public static func == (lhs: IGPSignalingGetConfigurationResponse.IGPIceServer, rhs: IGPSignalingGetConfigurationResponse.IGPIceServer) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpUrl == rhs.hasIgpUrl) && (!lhs.hasIgpUrl || lhs.igpUrl == rhs.igpUrl)
            fieldCheck = fieldCheck && (lhs.hasIgpCredential == rhs.hasIgpCredential) && (!lhs.hasIgpCredential || lhs.igpCredential == rhs.igpCredential)
            fieldCheck = fieldCheck && (lhs.hasIgpUsername == rhs.hasIgpUsername) && (!lhs.hasIgpUsername || lhs.igpUsername == rhs.igpUsername)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpUrl:String = ""
        public fileprivate(set) var hasIgpUrl:Bool = false

        public fileprivate(set) var igpCredential:String = ""
        public fileprivate(set) var hasIgpCredential:Bool = false

        public fileprivate(set) var igpUsername:String = ""
        public fileprivate(set) var hasIgpUsername:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpUrl {
                try codedOutputStream.writeString(fieldNumber: 1, value:igpUrl)
            }
            if hasIgpCredential {
                try codedOutputStream.writeString(fieldNumber: 2, value:igpCredential)
            }
            if hasIgpUsername {
                try codedOutputStream.writeString(fieldNumber: 3, value:igpUsername)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpUrl {
                serialize_size += igpUrl.computeStringSize(fieldNumber: 1)
            }
            if hasIgpCredential {
                serialize_size += igpCredential.computeStringSize(fieldNumber: 2)
            }
            if hasIgpUsername {
                serialize_size += igpUsername.computeStringSize(fieldNumber: 3)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
            return IGPSignalingGetConfigurationResponse.IGPIceServer.classBuilder() as! IGPSignalingGetConfigurationResponse.IGPIceServer.Builder
        }
        public func getBuilder() -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
            return classBuilder() as! IGPSignalingGetConfigurationResponse.IGPIceServer.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPSignalingGetConfigurationResponse.IGPIceServer.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPSignalingGetConfigurationResponse.IGPIceServer.Builder()
        }
        public func toBuilder() throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
            return try IGPSignalingGetConfigurationResponse.IGPIceServer.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPSignalingGetConfigurationResponse.IGPIceServer) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
            return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpUrl {
                jsonMap["IGPUrl"] = igpUrl
            }
            if hasIgpCredential {
                jsonMap["IGPCredential"] = igpCredential
            }
            if hasIgpUsername {
                jsonMap["IGPUsername"] = igpUsername
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
            return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
            return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpUrl {
                output += "\(indent) igpUrl: \(igpUrl) \n"
            }
            if hasIgpCredential {
                output += "\(indent) igpCredential: \(igpCredential) \n"
            }
            if hasIgpUsername {
                output += "\(indent) igpUsername: \(igpUsername) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpUrl {
                    hashCode = (hashCode &* 31) &+ igpUrl.hashValue
                }
                if hasIgpCredential {
                    hashCode = (hashCode &* 31) &+ igpCredential.hashValue
                }
                if hasIgpUsername {
                    hashCode = (hashCode &* 31) &+ igpUsername.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPSignalingGetConfigurationResponse.IGPIceServer"
        }
        override public func className() -> String {
            return "IGPSignalingGetConfigurationResponse.IGPIceServer"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPSignalingGetConfigurationResponse.IGPIceServer = IGPSignalingGetConfigurationResponse.IGPIceServer()
            public func getMessage() -> IGPSignalingGetConfigurationResponse.IGPIceServer {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpUrl:String {
                get {
                    return builderResult.igpUrl
                }
                set (value) {
                    builderResult.hasIgpUrl = true
                    builderResult.igpUrl = value
                }
            }
            public var hasIgpUrl:Bool {
                get {
                    return builderResult.hasIgpUrl
                }
            }
            @discardableResult
            public func setIgpUrl(_ value:String) -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                self.igpUrl = value
                return self
            }
            @discardableResult
            public func clearIgpUrl() -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder{
                builderResult.hasIgpUrl = false
                builderResult.igpUrl = ""
                return self
            }
            public var igpCredential:String {
                get {
                    return builderResult.igpCredential
                }
                set (value) {
                    builderResult.hasIgpCredential = true
                    builderResult.igpCredential = value
                }
            }
            public var hasIgpCredential:Bool {
                get {
                    return builderResult.hasIgpCredential
                }
            }
            @discardableResult
            public func setIgpCredential(_ value:String) -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                self.igpCredential = value
                return self
            }
            @discardableResult
            public func clearIgpCredential() -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder{
                builderResult.hasIgpCredential = false
                builderResult.igpCredential = ""
                return self
            }
            public var igpUsername:String {
                get {
                    return builderResult.igpUsername
                }
                set (value) {
                    builderResult.hasIgpUsername = true
                    builderResult.igpUsername = value
                }
            }
            public var hasIgpUsername:Bool {
                get {
                    return builderResult.hasIgpUsername
                }
            }
            @discardableResult
            public func setIgpUsername(_ value:String) -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                self.igpUsername = value
                return self
            }
            @discardableResult
            public func clearIgpUsername() -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder{
                builderResult.hasIgpUsername = false
                builderResult.igpUsername = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                builderResult = IGPSignalingGetConfigurationResponse.IGPIceServer()
                return self
            }
            override public func clone() throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                return try IGPSignalingGetConfigurationResponse.IGPIceServer.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPSignalingGetConfigurationResponse.IGPIceServer {
                let returnMe:IGPSignalingGetConfigurationResponse.IGPIceServer = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPSignalingGetConfigurationResponse.IGPIceServer) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                if other == IGPSignalingGetConfigurationResponse.IGPIceServer() {
                    return self
                }
                if other.hasIgpUrl {
                    igpUrl = other.igpUrl
                }
                if other.hasIgpCredential {
                    igpCredential = other.igpCredential
                }
                if other.hasIgpUsername {
                    igpUsername = other.igpUsername
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 10:
                        igpUrl = try codedInputStream.readString()

                    case 18:
                        igpCredential = try codedInputStream.readString()

                    case 26:
                        igpUsername = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                let resultDecodedBuilder = IGPSignalingGetConfigurationResponse.IGPIceServer.Builder()
                if let jsonValueIgpUrl = jsonMap["IGPUrl"] as? String {
                    resultDecodedBuilder.igpUrl = jsonValueIgpUrl
                }
                if let jsonValueIgpCredential = jsonMap["IGPCredential"] as? String {
                    resultDecodedBuilder.igpCredential = jsonValueIgpCredential
                }
                if let jsonValueIgpUsername = jsonMap["IGPUsername"] as? String {
                    resultDecodedBuilder.igpUsername = jsonValueIgpUsername
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpIceServer:Array<IGPSignalingGetConfigurationResponse.IGPIceServer>  = Array<IGPSignalingGetConfigurationResponse.IGPIceServer>()
    public fileprivate(set) var igpVoiceCalling:Bool = false
    public fileprivate(set) var hasIgpVoiceCalling:Bool = false

    public fileprivate(set) var igpVideoCalling:Bool = false
    public fileprivate(set) var hasIgpVideoCalling:Bool = false

    public fileprivate(set) var igpScreenSharing:Bool = false
    public fileprivate(set) var hasIgpScreenSharing:Bool = false

    public fileprivate(set) var igpSecretChat:Bool = false
    public fileprivate(set) var hasIgpSecretChat:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        for oneElementIgpIceServer in igpIceServer {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpIceServer)
        }
        if hasIgpVoiceCalling {
            try codedOutputStream.writeBool(fieldNumber: 3, value:igpVoiceCalling)
        }
        if hasIgpVideoCalling {
            try codedOutputStream.writeBool(fieldNumber: 4, value:igpVideoCalling)
        }
        if hasIgpScreenSharing {
            try codedOutputStream.writeBool(fieldNumber: 5, value:igpScreenSharing)
        }
        if hasIgpSecretChat {
            try codedOutputStream.writeBool(fieldNumber: 6, value:igpSecretChat)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        for oneElementIgpIceServer in igpIceServer {
            serialize_size += oneElementIgpIceServer.computeMessageSize(fieldNumber: 2)
        }
        if hasIgpVoiceCalling {
            serialize_size += igpVoiceCalling.computeBoolSize(fieldNumber: 3)
        }
        if hasIgpVideoCalling {
            serialize_size += igpVideoCalling.computeBoolSize(fieldNumber: 4)
        }
        if hasIgpScreenSharing {
            serialize_size += igpScreenSharing.computeBoolSize(fieldNumber: 5)
        }
        if hasIgpSecretChat {
            serialize_size += igpSecretChat.computeBoolSize(fieldNumber: 6)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingGetConfigurationResponse.Builder {
        return IGPSignalingGetConfigurationResponse.classBuilder() as! IGPSignalingGetConfigurationResponse.Builder
    }
    public func getBuilder() -> IGPSignalingGetConfigurationResponse.Builder {
        return classBuilder() as! IGPSignalingGetConfigurationResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetConfigurationResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetConfigurationResponse.Builder()
    }
    public func toBuilder() throws -> IGPSignalingGetConfigurationResponse.Builder {
        return try IGPSignalingGetConfigurationResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingGetConfigurationResponse) throws -> IGPSignalingGetConfigurationResponse.Builder {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if !igpIceServer.isEmpty {
            var jsonArrayIgpIceServer:Array<Dictionary<String,Any>> = []
            for oneValueIgpIceServer in igpIceServer {
                let ecodedMessageIgpIceServer = try oneValueIgpIceServer.encode()
                jsonArrayIgpIceServer.append(ecodedMessageIgpIceServer)
            }
            jsonMap["IGPIceServer"] = jsonArrayIgpIceServer
        }
        if hasIgpVoiceCalling {
            jsonMap["IGPVoiceCalling"] = igpVoiceCalling
        }
        if hasIgpVideoCalling {
            jsonMap["IGPVideoCalling"] = igpVideoCalling
        }
        if hasIgpScreenSharing {
            jsonMap["IGPScreenSharing"] = igpScreenSharing
        }
        if hasIgpSecretChat {
            jsonMap["IGPSecretChat"] = igpSecretChat
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpIceServerElementIndex:Int = 0
        for oneElementIgpIceServer in igpIceServer {
            output += "\(indent) igpIceServer[\(igpIceServerElementIndex)] {\n"
            output += try oneElementIgpIceServer.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpIceServerElementIndex += 1
        }
        if hasIgpVoiceCalling {
            output += "\(indent) igpVoiceCalling: \(igpVoiceCalling) \n"
        }
        if hasIgpVideoCalling {
            output += "\(indent) igpVideoCalling: \(igpVideoCalling) \n"
        }
        if hasIgpScreenSharing {
            output += "\(indent) igpScreenSharing: \(igpScreenSharing) \n"
        }
        if hasIgpSecretChat {
            output += "\(indent) igpSecretChat: \(igpSecretChat) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            for oneElementIgpIceServer in igpIceServer {
                hashCode = (hashCode &* 31) &+ oneElementIgpIceServer.hashValue
            }
            if hasIgpVoiceCalling {
                hashCode = (hashCode &* 31) &+ igpVoiceCalling.hashValue
            }
            if hasIgpVideoCalling {
                hashCode = (hashCode &* 31) &+ igpVideoCalling.hashValue
            }
            if hasIgpScreenSharing {
                hashCode = (hashCode &* 31) &+ igpScreenSharing.hashValue
            }
            if hasIgpSecretChat {
                hashCode = (hashCode &* 31) &+ igpSecretChat.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingGetConfigurationResponse"
    }
    override public func className() -> String {
        return "IGPSignalingGetConfigurationResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPSignalingGetConfigurationResponse = IGPSignalingGetConfigurationResponse()
        public func getMessage() -> IGPSignalingGetConfigurationResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPSignalingGetConfigurationResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPSignalingGetConfigurationResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPSignalingGetConfigurationResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpIceServer:Array<IGPSignalingGetConfigurationResponse.IGPIceServer> {
            get {
                return builderResult.igpIceServer
            }
            set (value) {
                builderResult.igpIceServer = value
            }
        }
        @discardableResult
        public func setIgpIceServer(_ value:Array<IGPSignalingGetConfigurationResponse.IGPIceServer>) -> IGPSignalingGetConfigurationResponse.Builder {
            self.igpIceServer = value
            return self
        }
        @discardableResult
        public func clearIgpIceServer() -> IGPSignalingGetConfigurationResponse.Builder {
            builderResult.igpIceServer.removeAll(keepingCapacity: false)
            return self
        }
        public var igpVoiceCalling:Bool {
            get {
                return builderResult.igpVoiceCalling
            }
            set (value) {
                builderResult.hasIgpVoiceCalling = true
                builderResult.igpVoiceCalling = value
            }
        }
        public var hasIgpVoiceCalling:Bool {
            get {
                return builderResult.hasIgpVoiceCalling
            }
        }
        @discardableResult
        public func setIgpVoiceCalling(_ value:Bool) -> IGPSignalingGetConfigurationResponse.Builder {
            self.igpVoiceCalling = value
            return self
        }
        @discardableResult
        public func clearIgpVoiceCalling() -> IGPSignalingGetConfigurationResponse.Builder{
            builderResult.hasIgpVoiceCalling = false
            builderResult.igpVoiceCalling = false
            return self
        }
        public var igpVideoCalling:Bool {
            get {
                return builderResult.igpVideoCalling
            }
            set (value) {
                builderResult.hasIgpVideoCalling = true
                builderResult.igpVideoCalling = value
            }
        }
        public var hasIgpVideoCalling:Bool {
            get {
                return builderResult.hasIgpVideoCalling
            }
        }
        @discardableResult
        public func setIgpVideoCalling(_ value:Bool) -> IGPSignalingGetConfigurationResponse.Builder {
            self.igpVideoCalling = value
            return self
        }
        @discardableResult
        public func clearIgpVideoCalling() -> IGPSignalingGetConfigurationResponse.Builder{
            builderResult.hasIgpVideoCalling = false
            builderResult.igpVideoCalling = false
            return self
        }
        public var igpScreenSharing:Bool {
            get {
                return builderResult.igpScreenSharing
            }
            set (value) {
                builderResult.hasIgpScreenSharing = true
                builderResult.igpScreenSharing = value
            }
        }
        public var hasIgpScreenSharing:Bool {
            get {
                return builderResult.hasIgpScreenSharing
            }
        }
        @discardableResult
        public func setIgpScreenSharing(_ value:Bool) -> IGPSignalingGetConfigurationResponse.Builder {
            self.igpScreenSharing = value
            return self
        }
        @discardableResult
        public func clearIgpScreenSharing() -> IGPSignalingGetConfigurationResponse.Builder{
            builderResult.hasIgpScreenSharing = false
            builderResult.igpScreenSharing = false
            return self
        }
        public var igpSecretChat:Bool {
            get {
                return builderResult.igpSecretChat
            }
            set (value) {
                builderResult.hasIgpSecretChat = true
                builderResult.igpSecretChat = value
            }
        }
        public var hasIgpSecretChat:Bool {
            get {
                return builderResult.hasIgpSecretChat
            }
        }
        @discardableResult
        public func setIgpSecretChat(_ value:Bool) -> IGPSignalingGetConfigurationResponse.Builder {
            self.igpSecretChat = value
            return self
        }
        @discardableResult
        public func clearIgpSecretChat() -> IGPSignalingGetConfigurationResponse.Builder{
            builderResult.hasIgpSecretChat = false
            builderResult.igpSecretChat = false
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingGetConfigurationResponse.Builder {
            builderResult = IGPSignalingGetConfigurationResponse()
            return self
        }
        override public func clone() throws -> IGPSignalingGetConfigurationResponse.Builder {
            return try IGPSignalingGetConfigurationResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingGetConfigurationResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingGetConfigurationResponse {
            let returnMe:IGPSignalingGetConfigurationResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingGetConfigurationResponse) throws -> IGPSignalingGetConfigurationResponse.Builder {
            if other == IGPSignalingGetConfigurationResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if !other.igpIceServer.isEmpty  {
                 builderResult.igpIceServer += other.igpIceServer
            }
            if other.hasIgpVoiceCalling {
                igpVoiceCalling = other.igpVoiceCalling
            }
            if other.hasIgpVideoCalling {
                igpVideoCalling = other.igpVideoCalling
            }
            if other.hasIgpScreenSharing {
                igpScreenSharing = other.igpScreenSharing
            }
            if other.hasIgpSecretChat {
                igpSecretChat = other.igpSecretChat
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetConfigurationResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPSignalingGetConfigurationResponse.IGPIceServer.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpIceServer.append(subBuilder.buildPartial())

                case 24:
                    igpVoiceCalling = try codedInputStream.readBool()

                case 32:
                    igpVideoCalling = try codedInputStream.readBool()

                case 40:
                    igpScreenSharing = try codedInputStream.readBool()

                case 48:
                    igpSecretChat = try codedInputStream.readBool()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetConfigurationResponse.Builder {
            let resultDecodedBuilder = IGPSignalingGetConfigurationResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpIceServer = jsonMap["IGPIceServer"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpIceServer:Array<IGPSignalingGetConfigurationResponse.IGPIceServer> = []
                for oneValueIgpIceServer in jsonValueIgpIceServer {
                    let messageFromStringIgpIceServer = try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder.decodeToBuilder(jsonMap:oneValueIgpIceServer).build()

                    jsonArrayIgpIceServer.append(messageFromStringIgpIceServer)
                }
                resultDecodedBuilder.igpIceServer = jsonArrayIgpIceServer
            }
            if let jsonValueIgpVoiceCalling = jsonMap["IGPVoiceCalling"] as? Bool {
                resultDecodedBuilder.igpVoiceCalling = jsonValueIgpVoiceCalling
            }
            if let jsonValueIgpVideoCalling = jsonMap["IGPVideoCalling"] as? Bool {
                resultDecodedBuilder.igpVideoCalling = jsonValueIgpVideoCalling
            }
            if let jsonValueIgpScreenSharing = jsonMap["IGPScreenSharing"] as? Bool {
                resultDecodedBuilder.igpScreenSharing = jsonValueIgpScreenSharing
            }
            if let jsonValueIgpSecretChat = jsonMap["IGPSecretChat"] as? Bool {
                resultDecodedBuilder.igpSecretChat = jsonValueIgpSecretChat
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingGetConfigurationResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingGetConfigurationResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPSignalingGetConfiguration: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingGetConfiguration> {
        var mergedArray = Array<IGPSignalingGetConfiguration>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingGetConfiguration? {
        return try IGPSignalingGetConfiguration.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder().mergeFrom(data: data, extensionRegistry:SignalingGetConfigurationRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfiguration {
        return try IGPSignalingGetConfiguration.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        default: return nil
        }
    }
}
extension IGPSignalingGetConfiguration.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPSignalingGetConfigurationResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingGetConfigurationResponse> {
        var mergedArray = Array<IGPSignalingGetConfigurationResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingGetConfigurationResponse? {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeFrom(data: data, extensionRegistry:SignalingGetConfigurationRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse {
        return try IGPSignalingGetConfigurationResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpIceServer": return self.igpIceServer
        case "igpVoiceCalling": return self.igpVoiceCalling
        case "igpVideoCalling": return self.igpVideoCalling
        case "igpScreenSharing": return self.igpScreenSharing
        case "igpSecretChat": return self.igpSecretChat
        default: return nil
        }
    }
}
extension IGPSignalingGetConfigurationResponse.IGPIceServer: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingGetConfigurationResponse.IGPIceServer> {
        var mergedArray = Array<IGPSignalingGetConfigurationResponse.IGPIceServer>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer? {
        return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
        return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeFrom(data: data, extensionRegistry:SignalingGetConfigurationRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
        return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
        return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
        return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
        return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetConfigurationResponse.IGPIceServer {
        return try IGPSignalingGetConfigurationResponse.IGPIceServer.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpUrl": return self.igpUrl
        case "igpCredential": return self.igpCredential
        case "igpUsername": return self.igpUsername
        default: return nil
        }
    }
}
extension IGPSignalingGetConfigurationResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpIceServer": return self.igpIceServer
            case "igpVoiceCalling": return self.igpVoiceCalling
            case "igpVideoCalling": return self.igpVideoCalling
            case "igpScreenSharing": return self.igpScreenSharing
            case "igpSecretChat": return self.igpSecretChat
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpIceServer":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPSignalingGetConfigurationResponse.IGPIceServer> else {
                    return
                }
                self.igpIceServer = newSubscriptValue
            case "igpVoiceCalling":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpVoiceCalling = newSubscriptValue
            case "igpVideoCalling":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpVideoCalling = newSubscriptValue
            case "igpScreenSharing":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpScreenSharing = newSubscriptValue
            case "igpSecretChat":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpSecretChat = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPSignalingGetConfigurationResponse.IGPIceServer.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpUrl": return self.igpUrl
            case "igpCredential": return self.igpCredential
            case "igpUsername": return self.igpUsername
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpUrl = newSubscriptValue
            case "igpCredential":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCredential = newSubscriptValue
            case "igpUsername":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpUsername = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
