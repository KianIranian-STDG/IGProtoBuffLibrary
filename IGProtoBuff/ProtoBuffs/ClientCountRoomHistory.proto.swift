/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "ClientCountRoomHistory.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ClientCountRoomHistoryRoot {
    public static let `default` = ClientCountRoomHistoryRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPClientCountRoomHistory : GeneratedMessage {

    public static func == (lhs: IGPClientCountRoomHistory, rhs: IGPClientCountRoomHistory) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientCountRoomHistory.Builder {
        return IGPClientCountRoomHistory.classBuilder() as! IGPClientCountRoomHistory.Builder
    }
    public func getBuilder() -> IGPClientCountRoomHistory.Builder {
        return classBuilder() as! IGPClientCountRoomHistory.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientCountRoomHistory.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientCountRoomHistory.Builder()
    }
    public func toBuilder() throws -> IGPClientCountRoomHistory.Builder {
        return try IGPClientCountRoomHistory.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientCountRoomHistory) throws -> IGPClientCountRoomHistory.Builder {
        return try IGPClientCountRoomHistory.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientCountRoomHistory"
    }
    override public func className() -> String {
        return "IGPClientCountRoomHistory"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPClientCountRoomHistory = IGPClientCountRoomHistory()
        public func getMessage() -> IGPClientCountRoomHistory {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPClientCountRoomHistory.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPClientCountRoomHistory.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPClientCountRoomHistory.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPClientCountRoomHistory.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPClientCountRoomHistory.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientCountRoomHistory.Builder {
            builderResult = IGPClientCountRoomHistory()
            return self
        }
        override public func clone() throws -> IGPClientCountRoomHistory.Builder {
            return try IGPClientCountRoomHistory.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientCountRoomHistory {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientCountRoomHistory {
            let returnMe:IGPClientCountRoomHistory = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientCountRoomHistory) throws -> IGPClientCountRoomHistory.Builder {
            if other == IGPClientCountRoomHistory() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientCountRoomHistory.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistory.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientCountRoomHistory.Builder {
            let resultDecodedBuilder = IGPClientCountRoomHistory.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientCountRoomHistory.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientCountRoomHistory.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPClientCountRoomHistoryResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPClientCountRoomHistoryResponse, rhs: IGPClientCountRoomHistoryResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpMedia == rhs.hasIgpMedia) && (!lhs.hasIgpMedia || lhs.igpMedia == rhs.igpMedia)
        fieldCheck = fieldCheck && (lhs.hasIgpImage == rhs.hasIgpImage) && (!lhs.hasIgpImage || lhs.igpImage == rhs.igpImage)
        fieldCheck = fieldCheck && (lhs.hasIgpVideo == rhs.hasIgpVideo) && (!lhs.hasIgpVideo || lhs.igpVideo == rhs.igpVideo)
        fieldCheck = fieldCheck && (lhs.hasIgpAudio == rhs.hasIgpAudio) && (!lhs.hasIgpAudio || lhs.igpAudio == rhs.igpAudio)
        fieldCheck = fieldCheck && (lhs.hasIgpVoice == rhs.hasIgpVoice) && (!lhs.hasIgpVoice || lhs.igpVoice == rhs.igpVoice)
        fieldCheck = fieldCheck && (lhs.hasIgpGif == rhs.hasIgpGif) && (!lhs.hasIgpGif || lhs.igpGif == rhs.igpGif)
        fieldCheck = fieldCheck && (lhs.hasIgpFile == rhs.hasIgpFile) && (!lhs.hasIgpFile || lhs.igpFile == rhs.igpFile)
        fieldCheck = fieldCheck && (lhs.hasIgpUrl == rhs.hasIgpUrl) && (!lhs.hasIgpUrl || lhs.igpUrl == rhs.igpUrl)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpMedia:Int32 = Int32(0)
    public fileprivate(set) var hasIgpMedia:Bool = false

    public fileprivate(set) var igpImage:Int32 = Int32(0)
    public fileprivate(set) var hasIgpImage:Bool = false

    public fileprivate(set) var igpVideo:Int32 = Int32(0)
    public fileprivate(set) var hasIgpVideo:Bool = false

    public fileprivate(set) var igpAudio:Int32 = Int32(0)
    public fileprivate(set) var hasIgpAudio:Bool = false

    public fileprivate(set) var igpVoice:Int32 = Int32(0)
    public fileprivate(set) var hasIgpVoice:Bool = false

    public fileprivate(set) var igpGif:Int32 = Int32(0)
    public fileprivate(set) var hasIgpGif:Bool = false

    public fileprivate(set) var igpFile:Int32 = Int32(0)
    public fileprivate(set) var hasIgpFile:Bool = false

    public fileprivate(set) var igpUrl:Int32 = Int32(0)
    public fileprivate(set) var hasIgpUrl:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpMedia {
            try codedOutputStream.writeInt32(fieldNumber: 2, value:igpMedia)
        }
        if hasIgpImage {
            try codedOutputStream.writeInt32(fieldNumber: 3, value:igpImage)
        }
        if hasIgpVideo {
            try codedOutputStream.writeInt32(fieldNumber: 4, value:igpVideo)
        }
        if hasIgpAudio {
            try codedOutputStream.writeInt32(fieldNumber: 5, value:igpAudio)
        }
        if hasIgpVoice {
            try codedOutputStream.writeInt32(fieldNumber: 6, value:igpVoice)
        }
        if hasIgpGif {
            try codedOutputStream.writeInt32(fieldNumber: 7, value:igpGif)
        }
        if hasIgpFile {
            try codedOutputStream.writeInt32(fieldNumber: 8, value:igpFile)
        }
        if hasIgpUrl {
            try codedOutputStream.writeInt32(fieldNumber: 9, value:igpUrl)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpMedia {
            serialize_size += igpMedia.computeInt32Size(fieldNumber: 2)
        }
        if hasIgpImage {
            serialize_size += igpImage.computeInt32Size(fieldNumber: 3)
        }
        if hasIgpVideo {
            serialize_size += igpVideo.computeInt32Size(fieldNumber: 4)
        }
        if hasIgpAudio {
            serialize_size += igpAudio.computeInt32Size(fieldNumber: 5)
        }
        if hasIgpVoice {
            serialize_size += igpVoice.computeInt32Size(fieldNumber: 6)
        }
        if hasIgpGif {
            serialize_size += igpGif.computeInt32Size(fieldNumber: 7)
        }
        if hasIgpFile {
            serialize_size += igpFile.computeInt32Size(fieldNumber: 8)
        }
        if hasIgpUrl {
            serialize_size += igpUrl.computeInt32Size(fieldNumber: 9)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientCountRoomHistoryResponse.Builder {
        return IGPClientCountRoomHistoryResponse.classBuilder() as! IGPClientCountRoomHistoryResponse.Builder
    }
    public func getBuilder() -> IGPClientCountRoomHistoryResponse.Builder {
        return classBuilder() as! IGPClientCountRoomHistoryResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientCountRoomHistoryResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientCountRoomHistoryResponse.Builder()
    }
    public func toBuilder() throws -> IGPClientCountRoomHistoryResponse.Builder {
        return try IGPClientCountRoomHistoryResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientCountRoomHistoryResponse) throws -> IGPClientCountRoomHistoryResponse.Builder {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpMedia {
            jsonMap["IGPMedia"] = Int(igpMedia)
        }
        if hasIgpImage {
            jsonMap["IGPImage"] = Int(igpImage)
        }
        if hasIgpVideo {
            jsonMap["IGPVideo"] = Int(igpVideo)
        }
        if hasIgpAudio {
            jsonMap["IGPAudio"] = Int(igpAudio)
        }
        if hasIgpVoice {
            jsonMap["IGPVoice"] = Int(igpVoice)
        }
        if hasIgpGif {
            jsonMap["IGPGif"] = Int(igpGif)
        }
        if hasIgpFile {
            jsonMap["IGPFile"] = Int(igpFile)
        }
        if hasIgpUrl {
            jsonMap["IGPUrl"] = Int(igpUrl)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpMedia {
            output += "\(indent) igpMedia: \(igpMedia) \n"
        }
        if hasIgpImage {
            output += "\(indent) igpImage: \(igpImage) \n"
        }
        if hasIgpVideo {
            output += "\(indent) igpVideo: \(igpVideo) \n"
        }
        if hasIgpAudio {
            output += "\(indent) igpAudio: \(igpAudio) \n"
        }
        if hasIgpVoice {
            output += "\(indent) igpVoice: \(igpVoice) \n"
        }
        if hasIgpGif {
            output += "\(indent) igpGif: \(igpGif) \n"
        }
        if hasIgpFile {
            output += "\(indent) igpFile: \(igpFile) \n"
        }
        if hasIgpUrl {
            output += "\(indent) igpUrl: \(igpUrl) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpMedia {
                hashCode = (hashCode &* 31) &+ igpMedia.hashValue
            }
            if hasIgpImage {
                hashCode = (hashCode &* 31) &+ igpImage.hashValue
            }
            if hasIgpVideo {
                hashCode = (hashCode &* 31) &+ igpVideo.hashValue
            }
            if hasIgpAudio {
                hashCode = (hashCode &* 31) &+ igpAudio.hashValue
            }
            if hasIgpVoice {
                hashCode = (hashCode &* 31) &+ igpVoice.hashValue
            }
            if hasIgpGif {
                hashCode = (hashCode &* 31) &+ igpGif.hashValue
            }
            if hasIgpFile {
                hashCode = (hashCode &* 31) &+ igpFile.hashValue
            }
            if hasIgpUrl {
                hashCode = (hashCode &* 31) &+ igpUrl.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientCountRoomHistoryResponse"
    }
    override public func className() -> String {
        return "IGPClientCountRoomHistoryResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPClientCountRoomHistoryResponse = IGPClientCountRoomHistoryResponse()
        public func getMessage() -> IGPClientCountRoomHistoryResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPClientCountRoomHistoryResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPClientCountRoomHistoryResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpMedia:Int32 {
            get {
                return builderResult.igpMedia
            }
            set (value) {
                builderResult.hasIgpMedia = true
                builderResult.igpMedia = value
            }
        }
        public var hasIgpMedia:Bool {
            get {
                return builderResult.hasIgpMedia
            }
        }
        @discardableResult
        public func setIgpMedia(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpMedia = value
            return self
        }
        @discardableResult
        public func clearIgpMedia() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpMedia = false
            builderResult.igpMedia = Int32(0)
            return self
        }
        public var igpImage:Int32 {
            get {
                return builderResult.igpImage
            }
            set (value) {
                builderResult.hasIgpImage = true
                builderResult.igpImage = value
            }
        }
        public var hasIgpImage:Bool {
            get {
                return builderResult.hasIgpImage
            }
        }
        @discardableResult
        public func setIgpImage(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpImage = value
            return self
        }
        @discardableResult
        public func clearIgpImage() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpImage = false
            builderResult.igpImage = Int32(0)
            return self
        }
        public var igpVideo:Int32 {
            get {
                return builderResult.igpVideo
            }
            set (value) {
                builderResult.hasIgpVideo = true
                builderResult.igpVideo = value
            }
        }
        public var hasIgpVideo:Bool {
            get {
                return builderResult.hasIgpVideo
            }
        }
        @discardableResult
        public func setIgpVideo(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpVideo = value
            return self
        }
        @discardableResult
        public func clearIgpVideo() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpVideo = false
            builderResult.igpVideo = Int32(0)
            return self
        }
        public var igpAudio:Int32 {
            get {
                return builderResult.igpAudio
            }
            set (value) {
                builderResult.hasIgpAudio = true
                builderResult.igpAudio = value
            }
        }
        public var hasIgpAudio:Bool {
            get {
                return builderResult.hasIgpAudio
            }
        }
        @discardableResult
        public func setIgpAudio(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpAudio = value
            return self
        }
        @discardableResult
        public func clearIgpAudio() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpAudio = false
            builderResult.igpAudio = Int32(0)
            return self
        }
        public var igpVoice:Int32 {
            get {
                return builderResult.igpVoice
            }
            set (value) {
                builderResult.hasIgpVoice = true
                builderResult.igpVoice = value
            }
        }
        public var hasIgpVoice:Bool {
            get {
                return builderResult.hasIgpVoice
            }
        }
        @discardableResult
        public func setIgpVoice(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpVoice = value
            return self
        }
        @discardableResult
        public func clearIgpVoice() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpVoice = false
            builderResult.igpVoice = Int32(0)
            return self
        }
        public var igpGif:Int32 {
            get {
                return builderResult.igpGif
            }
            set (value) {
                builderResult.hasIgpGif = true
                builderResult.igpGif = value
            }
        }
        public var hasIgpGif:Bool {
            get {
                return builderResult.hasIgpGif
            }
        }
        @discardableResult
        public func setIgpGif(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpGif = value
            return self
        }
        @discardableResult
        public func clearIgpGif() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpGif = false
            builderResult.igpGif = Int32(0)
            return self
        }
        public var igpFile:Int32 {
            get {
                return builderResult.igpFile
            }
            set (value) {
                builderResult.hasIgpFile = true
                builderResult.igpFile = value
            }
        }
        public var hasIgpFile:Bool {
            get {
                return builderResult.hasIgpFile
            }
        }
        @discardableResult
        public func setIgpFile(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpFile = value
            return self
        }
        @discardableResult
        public func clearIgpFile() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpFile = false
            builderResult.igpFile = Int32(0)
            return self
        }
        public var igpUrl:Int32 {
            get {
                return builderResult.igpUrl
            }
            set (value) {
                builderResult.hasIgpUrl = true
                builderResult.igpUrl = value
            }
        }
        public var hasIgpUrl:Bool {
            get {
                return builderResult.hasIgpUrl
            }
        }
        @discardableResult
        public func setIgpUrl(_ value:Int32) -> IGPClientCountRoomHistoryResponse.Builder {
            self.igpUrl = value
            return self
        }
        @discardableResult
        public func clearIgpUrl() -> IGPClientCountRoomHistoryResponse.Builder{
            builderResult.hasIgpUrl = false
            builderResult.igpUrl = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientCountRoomHistoryResponse.Builder {
            builderResult = IGPClientCountRoomHistoryResponse()
            return self
        }
        override public func clone() throws -> IGPClientCountRoomHistoryResponse.Builder {
            return try IGPClientCountRoomHistoryResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientCountRoomHistoryResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientCountRoomHistoryResponse {
            let returnMe:IGPClientCountRoomHistoryResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientCountRoomHistoryResponse) throws -> IGPClientCountRoomHistoryResponse.Builder {
            if other == IGPClientCountRoomHistoryResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpMedia {
                igpMedia = other.igpMedia
            }
            if other.hasIgpImage {
                igpImage = other.igpImage
            }
            if other.hasIgpVideo {
                igpVideo = other.igpVideo
            }
            if other.hasIgpAudio {
                igpAudio = other.igpAudio
            }
            if other.hasIgpVoice {
                igpVoice = other.igpVoice
            }
            if other.hasIgpGif {
                igpGif = other.igpGif
            }
            if other.hasIgpFile {
                igpFile = other.igpFile
            }
            if other.hasIgpUrl {
                igpUrl = other.igpUrl
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientCountRoomHistoryResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistoryResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpMedia = try codedInputStream.readInt32()

                case 24:
                    igpImage = try codedInputStream.readInt32()

                case 32:
                    igpVideo = try codedInputStream.readInt32()

                case 40:
                    igpAudio = try codedInputStream.readInt32()

                case 48:
                    igpVoice = try codedInputStream.readInt32()

                case 56:
                    igpGif = try codedInputStream.readInt32()

                case 64:
                    igpFile = try codedInputStream.readInt32()

                case 72:
                    igpUrl = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientCountRoomHistoryResponse.Builder {
            let resultDecodedBuilder = IGPClientCountRoomHistoryResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpMedia = jsonMap["IGPMedia"] as? Int {
                resultDecodedBuilder.igpMedia = Int32(jsonValueIgpMedia)
            } else if let jsonValueIgpMedia = jsonMap["IGPMedia"] as? String {
                resultDecodedBuilder.igpMedia = Int32(jsonValueIgpMedia)!
            }
            if let jsonValueIgpImage = jsonMap["IGPImage"] as? Int {
                resultDecodedBuilder.igpImage = Int32(jsonValueIgpImage)
            } else if let jsonValueIgpImage = jsonMap["IGPImage"] as? String {
                resultDecodedBuilder.igpImage = Int32(jsonValueIgpImage)!
            }
            if let jsonValueIgpVideo = jsonMap["IGPVideo"] as? Int {
                resultDecodedBuilder.igpVideo = Int32(jsonValueIgpVideo)
            } else if let jsonValueIgpVideo = jsonMap["IGPVideo"] as? String {
                resultDecodedBuilder.igpVideo = Int32(jsonValueIgpVideo)!
            }
            if let jsonValueIgpAudio = jsonMap["IGPAudio"] as? Int {
                resultDecodedBuilder.igpAudio = Int32(jsonValueIgpAudio)
            } else if let jsonValueIgpAudio = jsonMap["IGPAudio"] as? String {
                resultDecodedBuilder.igpAudio = Int32(jsonValueIgpAudio)!
            }
            if let jsonValueIgpVoice = jsonMap["IGPVoice"] as? Int {
                resultDecodedBuilder.igpVoice = Int32(jsonValueIgpVoice)
            } else if let jsonValueIgpVoice = jsonMap["IGPVoice"] as? String {
                resultDecodedBuilder.igpVoice = Int32(jsonValueIgpVoice)!
            }
            if let jsonValueIgpGif = jsonMap["IGPGif"] as? Int {
                resultDecodedBuilder.igpGif = Int32(jsonValueIgpGif)
            } else if let jsonValueIgpGif = jsonMap["IGPGif"] as? String {
                resultDecodedBuilder.igpGif = Int32(jsonValueIgpGif)!
            }
            if let jsonValueIgpFile = jsonMap["IGPFile"] as? Int {
                resultDecodedBuilder.igpFile = Int32(jsonValueIgpFile)
            } else if let jsonValueIgpFile = jsonMap["IGPFile"] as? String {
                resultDecodedBuilder.igpFile = Int32(jsonValueIgpFile)!
            }
            if let jsonValueIgpUrl = jsonMap["IGPUrl"] as? Int {
                resultDecodedBuilder.igpUrl = Int32(jsonValueIgpUrl)
            } else if let jsonValueIgpUrl = jsonMap["IGPUrl"] as? String {
                resultDecodedBuilder.igpUrl = Int32(jsonValueIgpUrl)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientCountRoomHistoryResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientCountRoomHistoryResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPClientCountRoomHistory: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientCountRoomHistory> {
        var mergedArray = Array<IGPClientCountRoomHistory>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientCountRoomHistory? {
        return try IGPClientCountRoomHistory.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder().mergeFrom(data: data, extensionRegistry:ClientCountRoomHistoryRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistory {
        return try IGPClientCountRoomHistory.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpRoomId": return self.igpRoomId
        default: return nil
        }
    }
}
extension IGPClientCountRoomHistory.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpRoomId": return self.igpRoomId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPClientCountRoomHistoryResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientCountRoomHistoryResponse> {
        var mergedArray = Array<IGPClientCountRoomHistoryResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientCountRoomHistoryResponse? {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeFrom(data: data, extensionRegistry:ClientCountRoomHistoryRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCountRoomHistoryResponse {
        return try IGPClientCountRoomHistoryResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpMedia": return self.igpMedia
        case "igpImage": return self.igpImage
        case "igpVideo": return self.igpVideo
        case "igpAudio": return self.igpAudio
        case "igpVoice": return self.igpVoice
        case "igpGif": return self.igpGif
        case "igpFile": return self.igpFile
        case "igpUrl": return self.igpUrl
        default: return nil
        }
    }
}
extension IGPClientCountRoomHistoryResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpMedia": return self.igpMedia
            case "igpImage": return self.igpImage
            case "igpVideo": return self.igpVideo
            case "igpAudio": return self.igpAudio
            case "igpVoice": return self.igpVoice
            case "igpGif": return self.igpGif
            case "igpFile": return self.igpFile
            case "igpUrl": return self.igpUrl
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpMedia":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpMedia = newSubscriptValue
            case "igpImage":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpImage = newSubscriptValue
            case "igpVideo":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpVideo = newSubscriptValue
            case "igpAudio":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAudio = newSubscriptValue
            case "igpVoice":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpVoice = newSubscriptValue
            case "igpGif":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpGif = newSubscriptValue
            case "igpFile":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpFile = newSubscriptValue
            case "igpUrl":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpUrl = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
