/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "UserSessionGetActiveList.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct UserSessionGetActiveListRoot {
    public static let `default` = UserSessionGetActiveListRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPUserSessionGetActiveList : GeneratedMessage {
    public typealias BuilderType = IGPUserSessionGetActiveList.Builder

    public static func == (lhs: IGPUserSessionGetActiveList, rhs: IGPUserSessionGetActiveList) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserSessionGetActiveList.Builder {
        return IGPUserSessionGetActiveList.classBuilder() as! IGPUserSessionGetActiveList.Builder
    }
    public func getBuilder() -> IGPUserSessionGetActiveList.Builder {
        return classBuilder() as! IGPUserSessionGetActiveList.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserSessionGetActiveList.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserSessionGetActiveList.Builder()
    }
    public func toBuilder() throws -> IGPUserSessionGetActiveList.Builder {
        return try IGPUserSessionGetActiveList.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserSessionGetActiveList) throws -> IGPUserSessionGetActiveList.Builder {
        return try IGPUserSessionGetActiveList.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserSessionGetActiveList"
    }
    override public func className() -> String {
        return "IGPUserSessionGetActiveList"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPUserSessionGetActiveList = IGPUserSessionGetActiveList()
        public func getMessage() -> IGPUserSessionGetActiveList {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPUserSessionGetActiveList.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPUserSessionGetActiveList.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPUserSessionGetActiveList.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserSessionGetActiveList.Builder {
            builderResult = IGPUserSessionGetActiveList()
            return self
        }
        override public func clone() throws -> IGPUserSessionGetActiveList.Builder {
            return try IGPUserSessionGetActiveList.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserSessionGetActiveList {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserSessionGetActiveList {
            let returnMe:IGPUserSessionGetActiveList = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserSessionGetActiveList) throws -> IGPUserSessionGetActiveList.Builder {
            if other == IGPUserSessionGetActiveList() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserSessionGetActiveList.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveList.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserSessionGetActiveList.Builder {
            let resultDecodedBuilder = IGPUserSessionGetActiveList.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserSessionGetActiveList.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserSessionGetActiveList.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPUserSessionGetActiveListResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPUserSessionGetActiveListResponse.Builder

    public static func == (lhs: IGPUserSessionGetActiveListResponse, rhs: IGPUserSessionGetActiveListResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.igpSession == rhs.igpSession)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPSession : GeneratedMessage {
        public typealias BuilderType = IGPUserSessionGetActiveListResponse.IGPSession.Builder

        public static func == (lhs: IGPUserSessionGetActiveListResponse.IGPSession, rhs: IGPUserSessionGetActiveListResponse.IGPSession) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpSessionId == rhs.hasIgpSessionId) && (!lhs.hasIgpSessionId || lhs.igpSessionId == rhs.igpSessionId)
            fieldCheck = fieldCheck && (lhs.hasIgpAppName == rhs.hasIgpAppName) && (!lhs.hasIgpAppName || lhs.igpAppName == rhs.igpAppName)
            fieldCheck = fieldCheck && (lhs.hasIgpAppId == rhs.hasIgpAppId) && (!lhs.hasIgpAppId || lhs.igpAppId == rhs.igpAppId)
            fieldCheck = fieldCheck && (lhs.hasIgpAppBuildVersion == rhs.hasIgpAppBuildVersion) && (!lhs.hasIgpAppBuildVersion || lhs.igpAppBuildVersion == rhs.igpAppBuildVersion)
            fieldCheck = fieldCheck && (lhs.hasIgpAppVersion == rhs.hasIgpAppVersion) && (!lhs.hasIgpAppVersion || lhs.igpAppVersion == rhs.igpAppVersion)
            fieldCheck = fieldCheck && (lhs.hasIgpPlatform == rhs.hasIgpPlatform) && (!lhs.hasIgpPlatform || lhs.igpPlatform == rhs.igpPlatform)
            fieldCheck = fieldCheck && (lhs.hasIgpPlatformVersion == rhs.hasIgpPlatformVersion) && (!lhs.hasIgpPlatformVersion || lhs.igpPlatformVersion == rhs.igpPlatformVersion)
            fieldCheck = fieldCheck && (lhs.hasIgpDevice == rhs.hasIgpDevice) && (!lhs.hasIgpDevice || lhs.igpDevice == rhs.igpDevice)
            fieldCheck = fieldCheck && (lhs.hasIgpDeviceName == rhs.hasIgpDeviceName) && (!lhs.hasIgpDeviceName || lhs.igpDeviceName == rhs.igpDeviceName)
            fieldCheck = fieldCheck && (lhs.hasIgpLanguage == rhs.hasIgpLanguage) && (!lhs.hasIgpLanguage || lhs.igpLanguage == rhs.igpLanguage)
            fieldCheck = fieldCheck && (lhs.hasIgpCountry == rhs.hasIgpCountry) && (!lhs.hasIgpCountry || lhs.igpCountry == rhs.igpCountry)
            fieldCheck = fieldCheck && (lhs.hasIgpCurrent == rhs.hasIgpCurrent) && (!lhs.hasIgpCurrent || lhs.igpCurrent == rhs.igpCurrent)
            fieldCheck = fieldCheck && (lhs.hasIgpCreateTime == rhs.hasIgpCreateTime) && (!lhs.hasIgpCreateTime || lhs.igpCreateTime == rhs.igpCreateTime)
            fieldCheck = fieldCheck && (lhs.hasIgpActiveTime == rhs.hasIgpActiveTime) && (!lhs.hasIgpActiveTime || lhs.igpActiveTime == rhs.igpActiveTime)
            fieldCheck = fieldCheck && (lhs.hasIgpIp == rhs.hasIgpIp) && (!lhs.hasIgpIp || lhs.igpIp == rhs.igpIp)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpSessionId:Int64! = nil
        public fileprivate(set) var hasIgpSessionId:Bool = false

        public fileprivate(set) var igpAppName:String! = nil
        public fileprivate(set) var hasIgpAppName:Bool = false

        public fileprivate(set) var igpAppId:Int32! = nil
        public fileprivate(set) var hasIgpAppId:Bool = false

        public fileprivate(set) var igpAppBuildVersion:Int32! = nil
        public fileprivate(set) var hasIgpAppBuildVersion:Bool = false

        public fileprivate(set) var igpAppVersion:String! = nil
        public fileprivate(set) var hasIgpAppVersion:Bool = false

        public fileprivate(set) var igpPlatform:IGPPlatform = IGPPlatform.unknownPlatform
        public fileprivate(set) var hasIgpPlatform:Bool = false
        public fileprivate(set) var igpPlatformVersion:String! = nil
        public fileprivate(set) var hasIgpPlatformVersion:Bool = false

        public fileprivate(set) var igpDevice:IGPDevice = IGPDevice.unknownDevice
        public fileprivate(set) var hasIgpDevice:Bool = false
        public fileprivate(set) var igpDeviceName:String! = nil
        public fileprivate(set) var hasIgpDeviceName:Bool = false

        public fileprivate(set) var igpLanguage:IGPLanguage = IGPLanguage.enUs
        public fileprivate(set) var hasIgpLanguage:Bool = false
        public fileprivate(set) var igpCountry:String! = nil
        public fileprivate(set) var hasIgpCountry:Bool = false

        public fileprivate(set) var igpCurrent:Bool! = nil
        public fileprivate(set) var hasIgpCurrent:Bool = false

        public fileprivate(set) var igpCreateTime:Int32! = nil
        public fileprivate(set) var hasIgpCreateTime:Bool = false

        public fileprivate(set) var igpActiveTime:Int32! = nil
        public fileprivate(set) var hasIgpActiveTime:Bool = false

        public fileprivate(set) var igpIp:String! = nil
        public fileprivate(set) var hasIgpIp:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpSessionId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:igpSessionId)
            }
            if hasIgpAppName {
                try codedOutputStream.writeString(fieldNumber: 2, value:igpAppName)
            }
            if hasIgpAppId {
                try codedOutputStream.writeInt32(fieldNumber: 3, value:igpAppId)
            }
            if hasIgpAppBuildVersion {
                try codedOutputStream.writeInt32(fieldNumber: 4, value:igpAppBuildVersion)
            }
            if hasIgpAppVersion {
                try codedOutputStream.writeString(fieldNumber: 5, value:igpAppVersion)
            }
            if hasIgpPlatform {
                try codedOutputStream.writeEnum(fieldNumber: 6, value:igpPlatform.rawValue)
            }
            if hasIgpPlatformVersion {
                try codedOutputStream.writeString(fieldNumber: 7, value:igpPlatformVersion)
            }
            if hasIgpDevice {
                try codedOutputStream.writeEnum(fieldNumber: 8, value:igpDevice.rawValue)
            }
            if hasIgpDeviceName {
                try codedOutputStream.writeString(fieldNumber: 9, value:igpDeviceName)
            }
            if hasIgpLanguage {
                try codedOutputStream.writeEnum(fieldNumber: 10, value:igpLanguage.rawValue)
            }
            if hasIgpCountry {
                try codedOutputStream.writeString(fieldNumber: 11, value:igpCountry)
            }
            if hasIgpCurrent {
                try codedOutputStream.writeBool(fieldNumber: 12, value:igpCurrent)
            }
            if hasIgpCreateTime {
                try codedOutputStream.writeInt32(fieldNumber: 13, value:igpCreateTime)
            }
            if hasIgpActiveTime {
                try codedOutputStream.writeInt32(fieldNumber: 14, value:igpActiveTime)
            }
            if hasIgpIp {
                try codedOutputStream.writeString(fieldNumber: 15, value:igpIp)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpSessionId {
                serialize_size += igpSessionId.computeInt64Size(fieldNumber: 1)
            }
            if hasIgpAppName {
                serialize_size += igpAppName.computeStringSize(fieldNumber: 2)
            }
            if hasIgpAppId {
                serialize_size += igpAppId.computeInt32Size(fieldNumber: 3)
            }
            if hasIgpAppBuildVersion {
                serialize_size += igpAppBuildVersion.computeInt32Size(fieldNumber: 4)
            }
            if hasIgpAppVersion {
                serialize_size += igpAppVersion.computeStringSize(fieldNumber: 5)
            }
            if (hasIgpPlatform) {
                serialize_size += igpPlatform.rawValue.computeEnumSize(fieldNumber: 6)
            }
            if hasIgpPlatformVersion {
                serialize_size += igpPlatformVersion.computeStringSize(fieldNumber: 7)
            }
            if (hasIgpDevice) {
                serialize_size += igpDevice.rawValue.computeEnumSize(fieldNumber: 8)
            }
            if hasIgpDeviceName {
                serialize_size += igpDeviceName.computeStringSize(fieldNumber: 9)
            }
            if (hasIgpLanguage) {
                serialize_size += igpLanguage.rawValue.computeEnumSize(fieldNumber: 10)
            }
            if hasIgpCountry {
                serialize_size += igpCountry.computeStringSize(fieldNumber: 11)
            }
            if hasIgpCurrent {
                serialize_size += igpCurrent.computeBoolSize(fieldNumber: 12)
            }
            if hasIgpCreateTime {
                serialize_size += igpCreateTime.computeInt32Size(fieldNumber: 13)
            }
            if hasIgpActiveTime {
                serialize_size += igpActiveTime.computeInt32Size(fieldNumber: 14)
            }
            if hasIgpIp {
                serialize_size += igpIp.computeStringSize(fieldNumber: 15)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
            return IGPUserSessionGetActiveListResponse.IGPSession.classBuilder() as! IGPUserSessionGetActiveListResponse.IGPSession.Builder
        }
        public func getBuilder() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
            return classBuilder() as! IGPUserSessionGetActiveListResponse.IGPSession.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserSessionGetActiveListResponse.IGPSession.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserSessionGetActiveListResponse.IGPSession.Builder()
        }
        public func toBuilder() throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
            return try IGPUserSessionGetActiveListResponse.IGPSession.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPUserSessionGetActiveListResponse.IGPSession) throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
            return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpSessionId {
                jsonMap["IGPSessionId"] = "\(igpSessionId!)"
            }
            if hasIgpAppName {
                jsonMap["IGPAppName"] = igpAppName
            }
            if hasIgpAppId {
                jsonMap["IGPAppId"] = Int(igpAppId)
            }
            if hasIgpAppBuildVersion {
                jsonMap["IGPAppBuildVersion"] = Int(igpAppBuildVersion)
            }
            if hasIgpAppVersion {
                jsonMap["IGPAppVersion"] = igpAppVersion
            }
            if hasIgpPlatform {
                jsonMap["IGPPlatform"] = igpPlatform.toString()
            }
            if hasIgpPlatformVersion {
                jsonMap["IGPPlatformVersion"] = igpPlatformVersion
            }
            if hasIgpDevice {
                jsonMap["IGPDevice"] = igpDevice.toString()
            }
            if hasIgpDeviceName {
                jsonMap["IGPDeviceName"] = igpDeviceName
            }
            if hasIgpLanguage {
                jsonMap["IGPLanguage"] = igpLanguage.toString()
            }
            if hasIgpCountry {
                jsonMap["IGPCountry"] = igpCountry
            }
            if hasIgpCurrent {
                jsonMap["IGPCurrent"] = igpCurrent
            }
            if hasIgpCreateTime {
                jsonMap["IGPCreateTime"] = Int(igpCreateTime)
            }
            if hasIgpActiveTime {
                jsonMap["IGPActiveTime"] = Int(igpActiveTime)
            }
            if hasIgpIp {
                jsonMap["IGPIp"] = igpIp
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
            return try IGPUserSessionGetActiveListResponse.IGPSession.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
            return try IGPUserSessionGetActiveListResponse.IGPSession.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpSessionId {
                output += "\(indent) igpSessionId: \(igpSessionId) \n"
            }
            if hasIgpAppName {
                output += "\(indent) igpAppName: \(igpAppName) \n"
            }
            if hasIgpAppId {
                output += "\(indent) igpAppId: \(igpAppId) \n"
            }
            if hasIgpAppBuildVersion {
                output += "\(indent) igpAppBuildVersion: \(igpAppBuildVersion) \n"
            }
            if hasIgpAppVersion {
                output += "\(indent) igpAppVersion: \(igpAppVersion) \n"
            }
            if (hasIgpPlatform) {
                output += "\(indent) igpPlatform: \(igpPlatform.description)\n"
            }
            if hasIgpPlatformVersion {
                output += "\(indent) igpPlatformVersion: \(igpPlatformVersion) \n"
            }
            if (hasIgpDevice) {
                output += "\(indent) igpDevice: \(igpDevice.description)\n"
            }
            if hasIgpDeviceName {
                output += "\(indent) igpDeviceName: \(igpDeviceName) \n"
            }
            if (hasIgpLanguage) {
                output += "\(indent) igpLanguage: \(igpLanguage.description)\n"
            }
            if hasIgpCountry {
                output += "\(indent) igpCountry: \(igpCountry) \n"
            }
            if hasIgpCurrent {
                output += "\(indent) igpCurrent: \(igpCurrent) \n"
            }
            if hasIgpCreateTime {
                output += "\(indent) igpCreateTime: \(igpCreateTime) \n"
            }
            if hasIgpActiveTime {
                output += "\(indent) igpActiveTime: \(igpActiveTime) \n"
            }
            if hasIgpIp {
                output += "\(indent) igpIp: \(igpIp) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpSessionId {
                    hashCode = (hashCode &* 31) &+ igpSessionId.hashValue
                }
                if hasIgpAppName {
                    hashCode = (hashCode &* 31) &+ igpAppName.hashValue
                }
                if hasIgpAppId {
                    hashCode = (hashCode &* 31) &+ igpAppId.hashValue
                }
                if hasIgpAppBuildVersion {
                    hashCode = (hashCode &* 31) &+ igpAppBuildVersion.hashValue
                }
                if hasIgpAppVersion {
                    hashCode = (hashCode &* 31) &+ igpAppVersion.hashValue
                }
                if hasIgpPlatform {
                     hashCode = (hashCode &* 31) &+ igpPlatform.hashValue
                }
                if hasIgpPlatformVersion {
                    hashCode = (hashCode &* 31) &+ igpPlatformVersion.hashValue
                }
                if hasIgpDevice {
                     hashCode = (hashCode &* 31) &+ igpDevice.hashValue
                }
                if hasIgpDeviceName {
                    hashCode = (hashCode &* 31) &+ igpDeviceName.hashValue
                }
                if hasIgpLanguage {
                     hashCode = (hashCode &* 31) &+ igpLanguage.hashValue
                }
                if hasIgpCountry {
                    hashCode = (hashCode &* 31) &+ igpCountry.hashValue
                }
                if hasIgpCurrent {
                    hashCode = (hashCode &* 31) &+ igpCurrent.hashValue
                }
                if hasIgpCreateTime {
                    hashCode = (hashCode &* 31) &+ igpCreateTime.hashValue
                }
                if hasIgpActiveTime {
                    hashCode = (hashCode &* 31) &+ igpActiveTime.hashValue
                }
                if hasIgpIp {
                    hashCode = (hashCode &* 31) &+ igpIp.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPUserSessionGetActiveListResponse.IGPSession"
        }
        override public func className() -> String {
            return "IGPUserSessionGetActiveListResponse.IGPSession"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPUserSessionGetActiveListResponse.IGPSession = IGPUserSessionGetActiveListResponse.IGPSession()
            public func getMessage() -> IGPUserSessionGetActiveListResponse.IGPSession {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpSessionId:Int64 {
                get {
                    return builderResult.igpSessionId
                }
                set (value) {
                    builderResult.hasIgpSessionId = true
                    builderResult.igpSessionId = value
                }
            }
            public var hasIgpSessionId:Bool {
                get {
                    return builderResult.hasIgpSessionId
                }
            }
            @discardableResult
            public func setIgpSessionId(_ value:Int64) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpSessionId = value
                return self
            }
            @discardableResult
            public func clearIgpSessionId() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpSessionId = false
                builderResult.igpSessionId = nil
                return self
            }
            public var igpAppName:String {
                get {
                    return builderResult.igpAppName
                }
                set (value) {
                    builderResult.hasIgpAppName = true
                    builderResult.igpAppName = value
                }
            }
            public var hasIgpAppName:Bool {
                get {
                    return builderResult.hasIgpAppName
                }
            }
            @discardableResult
            public func setIgpAppName(_ value:String) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpAppName = value
                return self
            }
            @discardableResult
            public func clearIgpAppName() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpAppName = false
                builderResult.igpAppName = nil
                return self
            }
            public var igpAppId:Int32 {
                get {
                    return builderResult.igpAppId
                }
                set (value) {
                    builderResult.hasIgpAppId = true
                    builderResult.igpAppId = value
                }
            }
            public var hasIgpAppId:Bool {
                get {
                    return builderResult.hasIgpAppId
                }
            }
            @discardableResult
            public func setIgpAppId(_ value:Int32) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpAppId = value
                return self
            }
            @discardableResult
            public func clearIgpAppId() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpAppId = false
                builderResult.igpAppId = nil
                return self
            }
            public var igpAppBuildVersion:Int32 {
                get {
                    return builderResult.igpAppBuildVersion
                }
                set (value) {
                    builderResult.hasIgpAppBuildVersion = true
                    builderResult.igpAppBuildVersion = value
                }
            }
            public var hasIgpAppBuildVersion:Bool {
                get {
                    return builderResult.hasIgpAppBuildVersion
                }
            }
            @discardableResult
            public func setIgpAppBuildVersion(_ value:Int32) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpAppBuildVersion = value
                return self
            }
            @discardableResult
            public func clearIgpAppBuildVersion() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpAppBuildVersion = false
                builderResult.igpAppBuildVersion = nil
                return self
            }
            public var igpAppVersion:String {
                get {
                    return builderResult.igpAppVersion
                }
                set (value) {
                    builderResult.hasIgpAppVersion = true
                    builderResult.igpAppVersion = value
                }
            }
            public var hasIgpAppVersion:Bool {
                get {
                    return builderResult.hasIgpAppVersion
                }
            }
            @discardableResult
            public func setIgpAppVersion(_ value:String) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpAppVersion = value
                return self
            }
            @discardableResult
            public func clearIgpAppVersion() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpAppVersion = false
                builderResult.igpAppVersion = nil
                return self
            }
                public var igpPlatform:IGPPlatform {
                    get {
                        return builderResult.igpPlatform
                    }
                    set (value) {
                        builderResult.hasIgpPlatform = true
                        builderResult.igpPlatform = value
                    }
                }
                public var hasIgpPlatform:Bool{
                    get {
                        return builderResult.hasIgpPlatform
                    }
                }
            @discardableResult
                public func setIgpPlatform(_ value:IGPPlatform) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                  self.igpPlatform = value
                  return self
                }
            @discardableResult
                public func clearIgpPlatform() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                   builderResult.hasIgpPlatform = false
                   builderResult.igpPlatform = .unknownPlatform
                   return self
                }
            public var igpPlatformVersion:String {
                get {
                    return builderResult.igpPlatformVersion
                }
                set (value) {
                    builderResult.hasIgpPlatformVersion = true
                    builderResult.igpPlatformVersion = value
                }
            }
            public var hasIgpPlatformVersion:Bool {
                get {
                    return builderResult.hasIgpPlatformVersion
                }
            }
            @discardableResult
            public func setIgpPlatformVersion(_ value:String) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpPlatformVersion = value
                return self
            }
            @discardableResult
            public func clearIgpPlatformVersion() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpPlatformVersion = false
                builderResult.igpPlatformVersion = nil
                return self
            }
                public var igpDevice:IGPDevice {
                    get {
                        return builderResult.igpDevice
                    }
                    set (value) {
                        builderResult.hasIgpDevice = true
                        builderResult.igpDevice = value
                    }
                }
                public var hasIgpDevice:Bool{
                    get {
                        return builderResult.hasIgpDevice
                    }
                }
            @discardableResult
                public func setIgpDevice(_ value:IGPDevice) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                  self.igpDevice = value
                  return self
                }
            @discardableResult
                public func clearIgpDevice() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                   builderResult.hasIgpDevice = false
                   builderResult.igpDevice = .unknownDevice
                   return self
                }
            public var igpDeviceName:String {
                get {
                    return builderResult.igpDeviceName
                }
                set (value) {
                    builderResult.hasIgpDeviceName = true
                    builderResult.igpDeviceName = value
                }
            }
            public var hasIgpDeviceName:Bool {
                get {
                    return builderResult.hasIgpDeviceName
                }
            }
            @discardableResult
            public func setIgpDeviceName(_ value:String) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpDeviceName = value
                return self
            }
            @discardableResult
            public func clearIgpDeviceName() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpDeviceName = false
                builderResult.igpDeviceName = nil
                return self
            }
                public var igpLanguage:IGPLanguage {
                    get {
                        return builderResult.igpLanguage
                    }
                    set (value) {
                        builderResult.hasIgpLanguage = true
                        builderResult.igpLanguage = value
                    }
                }
                public var hasIgpLanguage:Bool{
                    get {
                        return builderResult.hasIgpLanguage
                    }
                }
            @discardableResult
                public func setIgpLanguage(_ value:IGPLanguage) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                  self.igpLanguage = value
                  return self
                }
            @discardableResult
                public func clearIgpLanguage() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                   builderResult.hasIgpLanguage = false
                   builderResult.igpLanguage = .enUs
                   return self
                }
            public var igpCountry:String {
                get {
                    return builderResult.igpCountry
                }
                set (value) {
                    builderResult.hasIgpCountry = true
                    builderResult.igpCountry = value
                }
            }
            public var hasIgpCountry:Bool {
                get {
                    return builderResult.hasIgpCountry
                }
            }
            @discardableResult
            public func setIgpCountry(_ value:String) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpCountry = value
                return self
            }
            @discardableResult
            public func clearIgpCountry() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpCountry = false
                builderResult.igpCountry = nil
                return self
            }
            public var igpCurrent:Bool {
                get {
                    return builderResult.igpCurrent
                }
                set (value) {
                    builderResult.hasIgpCurrent = true
                    builderResult.igpCurrent = value
                }
            }
            public var hasIgpCurrent:Bool {
                get {
                    return builderResult.hasIgpCurrent
                }
            }
            @discardableResult
            public func setIgpCurrent(_ value:Bool) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpCurrent = value
                return self
            }
            @discardableResult
            public func clearIgpCurrent() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpCurrent = false
                builderResult.igpCurrent = nil
                return self
            }
            public var igpCreateTime:Int32 {
                get {
                    return builderResult.igpCreateTime
                }
                set (value) {
                    builderResult.hasIgpCreateTime = true
                    builderResult.igpCreateTime = value
                }
            }
            public var hasIgpCreateTime:Bool {
                get {
                    return builderResult.hasIgpCreateTime
                }
            }
            @discardableResult
            public func setIgpCreateTime(_ value:Int32) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpCreateTime = value
                return self
            }
            @discardableResult
            public func clearIgpCreateTime() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpCreateTime = false
                builderResult.igpCreateTime = nil
                return self
            }
            public var igpActiveTime:Int32 {
                get {
                    return builderResult.igpActiveTime
                }
                set (value) {
                    builderResult.hasIgpActiveTime = true
                    builderResult.igpActiveTime = value
                }
            }
            public var hasIgpActiveTime:Bool {
                get {
                    return builderResult.hasIgpActiveTime
                }
            }
            @discardableResult
            public func setIgpActiveTime(_ value:Int32) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpActiveTime = value
                return self
            }
            @discardableResult
            public func clearIgpActiveTime() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpActiveTime = false
                builderResult.igpActiveTime = nil
                return self
            }
            public var igpIp:String {
                get {
                    return builderResult.igpIp
                }
                set (value) {
                    builderResult.hasIgpIp = true
                    builderResult.igpIp = value
                }
            }
            public var hasIgpIp:Bool {
                get {
                    return builderResult.hasIgpIp
                }
            }
            @discardableResult
            public func setIgpIp(_ value:String) -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                self.igpIp = value
                return self
            }
            @discardableResult
            public func clearIgpIp() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder{
                builderResult.hasIgpIp = false
                builderResult.igpIp = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                builderResult = IGPUserSessionGetActiveListResponse.IGPSession()
                return self
            }
            override public func clone() throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                return try IGPUserSessionGetActiveListResponse.IGPSession.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPUserSessionGetActiveListResponse.IGPSession {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPUserSessionGetActiveListResponse.IGPSession {
                let returnMe:IGPUserSessionGetActiveListResponse.IGPSession = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPUserSessionGetActiveListResponse.IGPSession) throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                if other == IGPUserSessionGetActiveListResponse.IGPSession() {
                    return self
                }
                if other.hasIgpSessionId {
                    igpSessionId = other.igpSessionId
                }
                if other.hasIgpAppName {
                    igpAppName = other.igpAppName
                }
                if other.hasIgpAppId {
                    igpAppId = other.igpAppId
                }
                if other.hasIgpAppBuildVersion {
                    igpAppBuildVersion = other.igpAppBuildVersion
                }
                if other.hasIgpAppVersion {
                    igpAppVersion = other.igpAppVersion
                }
                if other.hasIgpPlatform {
                    igpPlatform = other.igpPlatform
                }
                if other.hasIgpPlatformVersion {
                    igpPlatformVersion = other.igpPlatformVersion
                }
                if other.hasIgpDevice {
                    igpDevice = other.igpDevice
                }
                if other.hasIgpDeviceName {
                    igpDeviceName = other.igpDeviceName
                }
                if other.hasIgpLanguage {
                    igpLanguage = other.igpLanguage
                }
                if other.hasIgpCountry {
                    igpCountry = other.igpCountry
                }
                if other.hasIgpCurrent {
                    igpCurrent = other.igpCurrent
                }
                if other.hasIgpCreateTime {
                    igpCreateTime = other.igpCreateTime
                }
                if other.hasIgpActiveTime {
                    igpActiveTime = other.igpActiveTime
                }
                if other.hasIgpIp {
                    igpIp = other.igpIp
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        igpSessionId = try codedInputStream.readInt64()

                    case 18:
                        igpAppName = try codedInputStream.readString()

                    case 24:
                        igpAppId = try codedInputStream.readInt32()

                    case 32:
                        igpAppBuildVersion = try codedInputStream.readInt32()

                    case 42:
                        igpAppVersion = try codedInputStream.readString()

                    case 48:
                        let valueIntigpPlatform = try codedInputStream.readEnum()
                        if let enumsigpPlatform = IGPPlatform(rawValue:valueIntigpPlatform){
                            igpPlatform = enumsigpPlatform
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 6, value:Int64(valueIntigpPlatform))
                        }

                    case 58:
                        igpPlatformVersion = try codedInputStream.readString()

                    case 64:
                        let valueIntigpDevice = try codedInputStream.readEnum()
                        if let enumsigpDevice = IGPDevice(rawValue:valueIntigpDevice){
                            igpDevice = enumsigpDevice
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 8, value:Int64(valueIntigpDevice))
                        }

                    case 74:
                        igpDeviceName = try codedInputStream.readString()

                    case 80:
                        let valueIntigpLanguage = try codedInputStream.readEnum()
                        if let enumsigpLanguage = IGPLanguage(rawValue:valueIntigpLanguage){
                            igpLanguage = enumsigpLanguage
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 10, value:Int64(valueIntigpLanguage))
                        }

                    case 90:
                        igpCountry = try codedInputStream.readString()

                    case 96:
                        igpCurrent = try codedInputStream.readBool()

                    case 104:
                        igpCreateTime = try codedInputStream.readInt32()

                    case 112:
                        igpActiveTime = try codedInputStream.readInt32()

                    case 122:
                        igpIp = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                let resultDecodedBuilder = IGPUserSessionGetActiveListResponse.IGPSession.Builder()
                if let jsonValueIgpSessionId = jsonMap["IGPSessionId"] as? String {
                    resultDecodedBuilder.igpSessionId = Int64(jsonValueIgpSessionId)!
                } else if let jsonValueIgpSessionId = jsonMap["IGPSessionId"] as? Int {
                    resultDecodedBuilder.igpSessionId = Int64(jsonValueIgpSessionId)
                }
                if let jsonValueIgpAppName = jsonMap["IGPAppName"] as? String {
                    resultDecodedBuilder.igpAppName = jsonValueIgpAppName
                }
                if let jsonValueIgpAppId = jsonMap["IGPAppId"] as? Int {
                    resultDecodedBuilder.igpAppId = Int32(jsonValueIgpAppId)
                } else if let jsonValueIgpAppId = jsonMap["IGPAppId"] as? String {
                    resultDecodedBuilder.igpAppId = Int32(jsonValueIgpAppId)!
                }
                if let jsonValueIgpAppBuildVersion = jsonMap["IGPAppBuildVersion"] as? Int {
                    resultDecodedBuilder.igpAppBuildVersion = Int32(jsonValueIgpAppBuildVersion)
                } else if let jsonValueIgpAppBuildVersion = jsonMap["IGPAppBuildVersion"] as? String {
                    resultDecodedBuilder.igpAppBuildVersion = Int32(jsonValueIgpAppBuildVersion)!
                }
                if let jsonValueIgpAppVersion = jsonMap["IGPAppVersion"] as? String {
                    resultDecodedBuilder.igpAppVersion = jsonValueIgpAppVersion
                }
                if let jsonValueIgpPlatform = jsonMap["IGPPlatform"] as? String {
                    resultDecodedBuilder.igpPlatform = try IGPPlatform.fromString(jsonValueIgpPlatform)
                }
                if let jsonValueIgpPlatformVersion = jsonMap["IGPPlatformVersion"] as? String {
                    resultDecodedBuilder.igpPlatformVersion = jsonValueIgpPlatformVersion
                }
                if let jsonValueIgpDevice = jsonMap["IGPDevice"] as? String {
                    resultDecodedBuilder.igpDevice = try IGPDevice.fromString(jsonValueIgpDevice)
                }
                if let jsonValueIgpDeviceName = jsonMap["IGPDeviceName"] as? String {
                    resultDecodedBuilder.igpDeviceName = jsonValueIgpDeviceName
                }
                if let jsonValueIgpLanguage = jsonMap["IGPLanguage"] as? String {
                    resultDecodedBuilder.igpLanguage = try IGPLanguage.fromString(jsonValueIgpLanguage)
                }
                if let jsonValueIgpCountry = jsonMap["IGPCountry"] as? String {
                    resultDecodedBuilder.igpCountry = jsonValueIgpCountry
                }
                if let jsonValueIgpCurrent = jsonMap["IGPCurrent"] as? Bool {
                    resultDecodedBuilder.igpCurrent = jsonValueIgpCurrent
                }
                if let jsonValueIgpCreateTime = jsonMap["IGPCreateTime"] as? Int {
                    resultDecodedBuilder.igpCreateTime = Int32(jsonValueIgpCreateTime)
                } else if let jsonValueIgpCreateTime = jsonMap["IGPCreateTime"] as? String {
                    resultDecodedBuilder.igpCreateTime = Int32(jsonValueIgpCreateTime)!
                }
                if let jsonValueIgpActiveTime = jsonMap["IGPActiveTime"] as? Int {
                    resultDecodedBuilder.igpActiveTime = Int32(jsonValueIgpActiveTime)
                } else if let jsonValueIgpActiveTime = jsonMap["IGPActiveTime"] as? String {
                    resultDecodedBuilder.igpActiveTime = Int32(jsonValueIgpActiveTime)!
                }
                if let jsonValueIgpIp = jsonMap["IGPIp"] as? String {
                    resultDecodedBuilder.igpIp = jsonValueIgpIp
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPUserSessionGetActiveListResponse.IGPSession.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPUserSessionGetActiveListResponse.IGPSession.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpSession:Array<IGPUserSessionGetActiveListResponse.IGPSession>  = Array<IGPUserSessionGetActiveListResponse.IGPSession>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        for oneElementIgpSession in igpSession {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpSession)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        for oneElementIgpSession in igpSession {
            serialize_size += oneElementIgpSession.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserSessionGetActiveListResponse.Builder {
        return IGPUserSessionGetActiveListResponse.classBuilder() as! IGPUserSessionGetActiveListResponse.Builder
    }
    public func getBuilder() -> IGPUserSessionGetActiveListResponse.Builder {
        return classBuilder() as! IGPUserSessionGetActiveListResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserSessionGetActiveListResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserSessionGetActiveListResponse.Builder()
    }
    public func toBuilder() throws -> IGPUserSessionGetActiveListResponse.Builder {
        return try IGPUserSessionGetActiveListResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserSessionGetActiveListResponse) throws -> IGPUserSessionGetActiveListResponse.Builder {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if !igpSession.isEmpty {
            var jsonArrayIgpSession:Array<Dictionary<String,Any>> = []
            for oneValueIgpSession in igpSession {
                let ecodedMessageIgpSession = try oneValueIgpSession.encode()
                jsonArrayIgpSession.append(ecodedMessageIgpSession)
            }
            jsonMap["IGPSession"] = jsonArrayIgpSession
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpSessionElementIndex:Int = 0
        for oneElementIgpSession in igpSession {
            output += "\(indent) igpSession[\(igpSessionElementIndex)] {\n"
            output += try oneElementIgpSession.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpSessionElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            for oneElementIgpSession in igpSession {
                hashCode = (hashCode &* 31) &+ oneElementIgpSession.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserSessionGetActiveListResponse"
    }
    override public func className() -> String {
        return "IGPUserSessionGetActiveListResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPUserSessionGetActiveListResponse = IGPUserSessionGetActiveListResponse()
        public func getMessage() -> IGPUserSessionGetActiveListResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPUserSessionGetActiveListResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPUserSessionGetActiveListResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPUserSessionGetActiveListResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpSession:Array<IGPUserSessionGetActiveListResponse.IGPSession> {
            get {
                return builderResult.igpSession
            }
            set (value) {
                builderResult.igpSession = value
            }
        }
        @discardableResult
        public func setIgpSession(_ value:Array<IGPUserSessionGetActiveListResponse.IGPSession>) -> IGPUserSessionGetActiveListResponse.Builder {
            self.igpSession = value
            return self
        }
        @discardableResult
        public func clearIgpSession() -> IGPUserSessionGetActiveListResponse.Builder {
            builderResult.igpSession.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserSessionGetActiveListResponse.Builder {
            builderResult = IGPUserSessionGetActiveListResponse()
            return self
        }
        override public func clone() throws -> IGPUserSessionGetActiveListResponse.Builder {
            return try IGPUserSessionGetActiveListResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserSessionGetActiveListResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserSessionGetActiveListResponse {
            let returnMe:IGPUserSessionGetActiveListResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserSessionGetActiveListResponse) throws -> IGPUserSessionGetActiveListResponse.Builder {
            if other == IGPUserSessionGetActiveListResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if !other.igpSession.isEmpty  {
                 builderResult.igpSession += other.igpSession
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserSessionGetActiveListResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPUserSessionGetActiveListResponse.IGPSession.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpSession.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserSessionGetActiveListResponse.Builder {
            let resultDecodedBuilder = IGPUserSessionGetActiveListResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpSession = jsonMap["IGPSession"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpSession:Array<IGPUserSessionGetActiveListResponse.IGPSession> = []
                for oneValueIgpSession in jsonValueIgpSession {
                    let messageFromStringIgpSession = try IGPUserSessionGetActiveListResponse.IGPSession.Builder.decodeToBuilder(jsonMap:oneValueIgpSession).build()

                    jsonArrayIgpSession.append(messageFromStringIgpSession)
                }
                resultDecodedBuilder.igpSession = jsonArrayIgpSession
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserSessionGetActiveListResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserSessionGetActiveListResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPUserSessionGetActiveList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserSessionGetActiveList> {
        var mergedArray = Array<IGPUserSessionGetActiveList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserSessionGetActiveList? {
        return try IGPUserSessionGetActiveList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder().mergeFrom(data: data, extensionRegistry:UserSessionGetActiveListRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveList {
        return try IGPUserSessionGetActiveList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        default: return nil
        }
    }
}
extension IGPUserSessionGetActiveList.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserSessionGetActiveList
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserSessionGetActiveListResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserSessionGetActiveListResponse> {
        var mergedArray = Array<IGPUserSessionGetActiveListResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserSessionGetActiveListResponse? {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeFrom(data: data, extensionRegistry:UserSessionGetActiveListRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse {
        return try IGPUserSessionGetActiveListResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpSession": return self.igpSession
        default: return nil
        }
    }
}
extension IGPUserSessionGetActiveListResponse.IGPSession: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserSessionGetActiveListResponse.IGPSession> {
        var mergedArray = Array<IGPUserSessionGetActiveListResponse.IGPSession>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserSessionGetActiveListResponse.IGPSession? {
        return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
        return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeFrom(data: data, extensionRegistry:UserSessionGetActiveListRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
        return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
        return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
        return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
        return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserSessionGetActiveListResponse.IGPSession {
        return try IGPUserSessionGetActiveListResponse.IGPSession.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpSessionId": return self.igpSessionId
        case "igpAppName": return self.igpAppName
        case "igpAppId": return self.igpAppId
        case "igpAppBuildVersion": return self.igpAppBuildVersion
        case "igpAppVersion": return self.igpAppVersion
        case "igpPlatform": return self.igpPlatform
        case "igpPlatformVersion": return self.igpPlatformVersion
        case "igpDevice": return self.igpDevice
        case "igpDeviceName": return self.igpDeviceName
        case "igpLanguage": return self.igpLanguage
        case "igpCountry": return self.igpCountry
        case "igpCurrent": return self.igpCurrent
        case "igpCreateTime": return self.igpCreateTime
        case "igpActiveTime": return self.igpActiveTime
        case "igpIp": return self.igpIp
        default: return nil
        }
    }
}
extension IGPUserSessionGetActiveListResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserSessionGetActiveListResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpSession": return self.igpSession
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpSession":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPUserSessionGetActiveListResponse.IGPSession> else {
                    return
                }
                self.igpSession = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserSessionGetActiveListResponse.IGPSession.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserSessionGetActiveListResponse.IGPSession
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpSessionId": return self.igpSessionId
            case "igpAppName": return self.igpAppName
            case "igpAppId": return self.igpAppId
            case "igpAppBuildVersion": return self.igpAppBuildVersion
            case "igpAppVersion": return self.igpAppVersion
            case "igpPlatform": return self.igpPlatform
            case "igpPlatformVersion": return self.igpPlatformVersion
            case "igpDevice": return self.igpDevice
            case "igpDeviceName": return self.igpDeviceName
            case "igpLanguage": return self.igpLanguage
            case "igpCountry": return self.igpCountry
            case "igpCurrent": return self.igpCurrent
            case "igpCreateTime": return self.igpCreateTime
            case "igpActiveTime": return self.igpActiveTime
            case "igpIp": return self.igpIp
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpSessionId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpSessionId = newSubscriptValue
            case "igpAppName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAppName = newSubscriptValue
            case "igpAppId":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAppId = newSubscriptValue
            case "igpAppBuildVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpAppBuildVersion = newSubscriptValue
            case "igpAppVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAppVersion = newSubscriptValue
            case "igpPlatform":
                guard let newSubscriptValue = newSubscriptValue as? IGPPlatform else {
                    return
                }
                self.igpPlatform = newSubscriptValue
            case "igpPlatformVersion":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpPlatformVersion = newSubscriptValue
            case "igpDevice":
                guard let newSubscriptValue = newSubscriptValue as? IGPDevice else {
                    return
                }
                self.igpDevice = newSubscriptValue
            case "igpDeviceName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpDeviceName = newSubscriptValue
            case "igpLanguage":
                guard let newSubscriptValue = newSubscriptValue as? IGPLanguage else {
                    return
                }
                self.igpLanguage = newSubscriptValue
            case "igpCountry":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCountry = newSubscriptValue
            case "igpCurrent":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpCurrent = newSubscriptValue
            case "igpCreateTime":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpCreateTime = newSubscriptValue
            case "igpActiveTime":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpActiveTime = newSubscriptValue
            case "igpIp":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpIp = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
