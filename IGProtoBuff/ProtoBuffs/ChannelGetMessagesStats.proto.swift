/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "ChannelGetMessagesStats.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ChannelGetMessagesStatsRoot {
    public static let `default` = ChannelGetMessagesStatsRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPChannelGetMessagesStats : GeneratedMessage {

    public static func == (lhs: IGPChannelGetMessagesStats, rhs: IGPChannelGetMessagesStats) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.igpMessageId == rhs.igpMessageId)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpRoomId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpMessageId:Array<Int64> = Array<Int64>()
    private var igpMessageIdMemoizedSerializedSize:Int32 = -1
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if !igpMessageId.isEmpty {
            try codedOutputStream.writeRawVarint32(value: 26)
            try codedOutputStream.writeRawVarint32(value: igpMessageIdMemoizedSerializedSize)
            for oneValueigpMessageId in igpMessageId {
                try codedOutputStream.writeInt64NoTag(value: oneValueigpMessageId)
            }
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        var dataSizeIgpMessageId:Int32 = 0
        for oneValueigpMessageId in igpMessageId {
            dataSizeIgpMessageId += oneValueigpMessageId.computeInt64SizeNoTag()
        }
        serialize_size += dataSizeIgpMessageId
        if !igpMessageId.isEmpty {
            serialize_size += 1
            serialize_size += dataSizeIgpMessageId.computeInt32SizeNoTag()
        }
        igpMessageIdMemoizedSerializedSize = dataSizeIgpMessageId
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPChannelGetMessagesStats.Builder {
        return IGPChannelGetMessagesStats.classBuilder() as! IGPChannelGetMessagesStats.Builder
    }
    public func getBuilder() -> IGPChannelGetMessagesStats.Builder {
        return classBuilder() as! IGPChannelGetMessagesStats.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChannelGetMessagesStats.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChannelGetMessagesStats.Builder()
    }
    public func toBuilder() throws -> IGPChannelGetMessagesStats.Builder {
        return try IGPChannelGetMessagesStats.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPChannelGetMessagesStats) throws -> IGPChannelGetMessagesStats.Builder {
        return try IGPChannelGetMessagesStats.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId)"
        }
        if !igpMessageId.isEmpty {
            var jsonArrayIgpMessageId:Array<String> = []
            for oneValueIgpMessageId in igpMessageId {
                jsonArrayIgpMessageId.append("\(oneValueIgpMessageId)")
            }
            jsonMap["IGPMessageId"] = jsonArrayIgpMessageId
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        var igpMessageIdElementIndex:Int = 0
        for oneValueIgpMessageId in igpMessageId  {
            output += "\(indent) igpMessageId[\(igpMessageIdElementIndex)]: \(oneValueIgpMessageId)\n"
            igpMessageIdElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            for oneValueIgpMessageId in igpMessageId {
                hashCode = (hashCode &* 31) &+ oneValueIgpMessageId.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPChannelGetMessagesStats"
    }
    override public func className() -> String {
        return "IGPChannelGetMessagesStats"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPChannelGetMessagesStats = IGPChannelGetMessagesStats()
        public func getMessage() -> IGPChannelGetMessagesStats {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPChannelGetMessagesStats.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPChannelGetMessagesStats.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPChannelGetMessagesStats.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPChannelGetMessagesStats.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPChannelGetMessagesStats.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = Int64(0)
            return self
        }
        public var igpMessageId:Array<Int64> {
            get {
                return builderResult.igpMessageId
            }
            set (array) {
                builderResult.igpMessageId = array
            }
        }
        @discardableResult
        public func setIgpMessageId(_ value:Array<Int64>) -> IGPChannelGetMessagesStats.Builder {
            self.igpMessageId = value
            return self
        }
        @discardableResult
        public func clearIgpMessageId() -> IGPChannelGetMessagesStats.Builder {
            builderResult.igpMessageId.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPChannelGetMessagesStats.Builder {
            builderResult = IGPChannelGetMessagesStats()
            return self
        }
        override public func clone() throws -> IGPChannelGetMessagesStats.Builder {
            return try IGPChannelGetMessagesStats.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPChannelGetMessagesStats {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPChannelGetMessagesStats {
            let returnMe:IGPChannelGetMessagesStats = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPChannelGetMessagesStats) throws -> IGPChannelGetMessagesStats.Builder {
            if other == IGPChannelGetMessagesStats() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if !other.igpMessageId.isEmpty {
                builderResult.igpMessageId += other.igpMessageId
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChannelGetMessagesStats.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStats.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 26:
                    let length = Int(try codedInputStream.readRawVarint32())
                    let limit = try codedInputStream.pushLimit(byteLimit: length)
                    while (codedInputStream.bytesUntilLimit() > 0) {
                        builderResult.igpMessageId.append(try codedInputStream.readInt64())
                    }
                    codedInputStream.popLimit(oldLimit: limit)

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChannelGetMessagesStats.Builder {
            let resultDecodedBuilder = IGPChannelGetMessagesStats.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? Array<String> {
                var jsonArrayIgpMessageId:Array<Int64> = []
                for oneValueIgpMessageId in jsonValueIgpMessageId {
                    jsonArrayIgpMessageId.append(Int64(oneValueIgpMessageId)!)
                }
                resultDecodedBuilder.igpMessageId = jsonArrayIgpMessageId
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPChannelGetMessagesStats.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPChannelGetMessagesStats.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPChannelGetMessagesStatsResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPChannelGetMessagesStatsResponse, rhs: IGPChannelGetMessagesStatsResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.igpStats == rhs.igpStats)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPStats : GeneratedMessage {

        public static func == (lhs: IGPChannelGetMessagesStatsResponse.IGPStats, rhs: IGPChannelGetMessagesStatsResponse.IGPStats) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpMessageId == rhs.hasIgpMessageId) && (!lhs.hasIgpMessageId || lhs.igpMessageId == rhs.igpMessageId)
            fieldCheck = fieldCheck && (lhs.hasIgpViewsLabel == rhs.hasIgpViewsLabel) && (!lhs.hasIgpViewsLabel || lhs.igpViewsLabel == rhs.igpViewsLabel)
            fieldCheck = fieldCheck && (lhs.hasIgpThumbsUpLabel == rhs.hasIgpThumbsUpLabel) && (!lhs.hasIgpThumbsUpLabel || lhs.igpThumbsUpLabel == rhs.igpThumbsUpLabel)
            fieldCheck = fieldCheck && (lhs.hasIgpThumbsDownLabel == rhs.hasIgpThumbsDownLabel) && (!lhs.hasIgpThumbsDownLabel || lhs.igpThumbsDownLabel == rhs.igpThumbsDownLabel)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpMessageId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpMessageId:Bool = false

        public fileprivate(set) var igpViewsLabel:String = ""
        public fileprivate(set) var hasIgpViewsLabel:Bool = false

        public fileprivate(set) var igpThumbsUpLabel:String = ""
        public fileprivate(set) var hasIgpThumbsUpLabel:Bool = false

        public fileprivate(set) var igpThumbsDownLabel:String = ""
        public fileprivate(set) var hasIgpThumbsDownLabel:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpMessageId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:igpMessageId)
            }
            if hasIgpViewsLabel {
                try codedOutputStream.writeString(fieldNumber: 2, value:igpViewsLabel)
            }
            if hasIgpThumbsUpLabel {
                try codedOutputStream.writeString(fieldNumber: 3, value:igpThumbsUpLabel)
            }
            if hasIgpThumbsDownLabel {
                try codedOutputStream.writeString(fieldNumber: 4, value:igpThumbsDownLabel)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpMessageId {
                serialize_size += igpMessageId.computeInt64Size(fieldNumber: 1)
            }
            if hasIgpViewsLabel {
                serialize_size += igpViewsLabel.computeStringSize(fieldNumber: 2)
            }
            if hasIgpThumbsUpLabel {
                serialize_size += igpThumbsUpLabel.computeStringSize(fieldNumber: 3)
            }
            if hasIgpThumbsDownLabel {
                serialize_size += igpThumbsDownLabel.computeStringSize(fieldNumber: 4)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
            return IGPChannelGetMessagesStatsResponse.IGPStats.classBuilder() as! IGPChannelGetMessagesStatsResponse.IGPStats.Builder
        }
        public func getBuilder() -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
            return classBuilder() as! IGPChannelGetMessagesStatsResponse.IGPStats.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPChannelGetMessagesStatsResponse.IGPStats.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPChannelGetMessagesStatsResponse.IGPStats.Builder()
        }
        public func toBuilder() throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
            return try IGPChannelGetMessagesStatsResponse.IGPStats.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPChannelGetMessagesStatsResponse.IGPStats) throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
            return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpMessageId {
                jsonMap["IGPMessageId"] = "\(igpMessageId)"
            }
            if hasIgpViewsLabel {
                jsonMap["IGPViewsLabel"] = igpViewsLabel
            }
            if hasIgpThumbsUpLabel {
                jsonMap["IGPThumbsUpLabel"] = igpThumbsUpLabel
            }
            if hasIgpThumbsDownLabel {
                jsonMap["IGPThumbsDownLabel"] = igpThumbsDownLabel
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
            return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
            return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpMessageId {
                output += "\(indent) igpMessageId: \(igpMessageId) \n"
            }
            if hasIgpViewsLabel {
                output += "\(indent) igpViewsLabel: \(igpViewsLabel) \n"
            }
            if hasIgpThumbsUpLabel {
                output += "\(indent) igpThumbsUpLabel: \(igpThumbsUpLabel) \n"
            }
            if hasIgpThumbsDownLabel {
                output += "\(indent) igpThumbsDownLabel: \(igpThumbsDownLabel) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpMessageId {
                    hashCode = (hashCode &* 31) &+ igpMessageId.hashValue
                }
                if hasIgpViewsLabel {
                    hashCode = (hashCode &* 31) &+ igpViewsLabel.hashValue
                }
                if hasIgpThumbsUpLabel {
                    hashCode = (hashCode &* 31) &+ igpThumbsUpLabel.hashValue
                }
                if hasIgpThumbsDownLabel {
                    hashCode = (hashCode &* 31) &+ igpThumbsDownLabel.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPChannelGetMessagesStatsResponse.IGPStats"
        }
        override public func className() -> String {
            return "IGPChannelGetMessagesStatsResponse.IGPStats"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPChannelGetMessagesStatsResponse.IGPStats = IGPChannelGetMessagesStatsResponse.IGPStats()
            public func getMessage() -> IGPChannelGetMessagesStatsResponse.IGPStats {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpMessageId:Int64 {
                get {
                    return builderResult.igpMessageId
                }
                set (value) {
                    builderResult.hasIgpMessageId = true
                    builderResult.igpMessageId = value
                }
            }
            public var hasIgpMessageId:Bool {
                get {
                    return builderResult.hasIgpMessageId
                }
            }
            @discardableResult
            public func setIgpMessageId(_ value:Int64) -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                self.igpMessageId = value
                return self
            }
            @discardableResult
            public func clearIgpMessageId() -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder{
                builderResult.hasIgpMessageId = false
                builderResult.igpMessageId = Int64(0)
                return self
            }
            public var igpViewsLabel:String {
                get {
                    return builderResult.igpViewsLabel
                }
                set (value) {
                    builderResult.hasIgpViewsLabel = true
                    builderResult.igpViewsLabel = value
                }
            }
            public var hasIgpViewsLabel:Bool {
                get {
                    return builderResult.hasIgpViewsLabel
                }
            }
            @discardableResult
            public func setIgpViewsLabel(_ value:String) -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                self.igpViewsLabel = value
                return self
            }
            @discardableResult
            public func clearIgpViewsLabel() -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder{
                builderResult.hasIgpViewsLabel = false
                builderResult.igpViewsLabel = ""
                return self
            }
            public var igpThumbsUpLabel:String {
                get {
                    return builderResult.igpThumbsUpLabel
                }
                set (value) {
                    builderResult.hasIgpThumbsUpLabel = true
                    builderResult.igpThumbsUpLabel = value
                }
            }
            public var hasIgpThumbsUpLabel:Bool {
                get {
                    return builderResult.hasIgpThumbsUpLabel
                }
            }
            @discardableResult
            public func setIgpThumbsUpLabel(_ value:String) -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                self.igpThumbsUpLabel = value
                return self
            }
            @discardableResult
            public func clearIgpThumbsUpLabel() -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder{
                builderResult.hasIgpThumbsUpLabel = false
                builderResult.igpThumbsUpLabel = ""
                return self
            }
            public var igpThumbsDownLabel:String {
                get {
                    return builderResult.igpThumbsDownLabel
                }
                set (value) {
                    builderResult.hasIgpThumbsDownLabel = true
                    builderResult.igpThumbsDownLabel = value
                }
            }
            public var hasIgpThumbsDownLabel:Bool {
                get {
                    return builderResult.hasIgpThumbsDownLabel
                }
            }
            @discardableResult
            public func setIgpThumbsDownLabel(_ value:String) -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                self.igpThumbsDownLabel = value
                return self
            }
            @discardableResult
            public func clearIgpThumbsDownLabel() -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder{
                builderResult.hasIgpThumbsDownLabel = false
                builderResult.igpThumbsDownLabel = ""
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                builderResult = IGPChannelGetMessagesStatsResponse.IGPStats()
                return self
            }
            override public func clone() throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                return try IGPChannelGetMessagesStatsResponse.IGPStats.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPChannelGetMessagesStatsResponse.IGPStats {
                let returnMe:IGPChannelGetMessagesStatsResponse.IGPStats = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPChannelGetMessagesStatsResponse.IGPStats) throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                if other == IGPChannelGetMessagesStatsResponse.IGPStats() {
                    return self
                }
                if other.hasIgpMessageId {
                    igpMessageId = other.igpMessageId
                }
                if other.hasIgpViewsLabel {
                    igpViewsLabel = other.igpViewsLabel
                }
                if other.hasIgpThumbsUpLabel {
                    igpThumbsUpLabel = other.igpThumbsUpLabel
                }
                if other.hasIgpThumbsDownLabel {
                    igpThumbsDownLabel = other.igpThumbsDownLabel
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        igpMessageId = try codedInputStream.readInt64()

                    case 18:
                        igpViewsLabel = try codedInputStream.readString()

                    case 26:
                        igpThumbsUpLabel = try codedInputStream.readString()

                    case 34:
                        igpThumbsDownLabel = try codedInputStream.readString()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                let resultDecodedBuilder = IGPChannelGetMessagesStatsResponse.IGPStats.Builder()
                if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? String {
                    resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)!
                } else if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? Int {
                    resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)
                }
                if let jsonValueIgpViewsLabel = jsonMap["IGPViewsLabel"] as? String {
                    resultDecodedBuilder.igpViewsLabel = jsonValueIgpViewsLabel
                }
                if let jsonValueIgpThumbsUpLabel = jsonMap["IGPThumbsUpLabel"] as? String {
                    resultDecodedBuilder.igpThumbsUpLabel = jsonValueIgpThumbsUpLabel
                }
                if let jsonValueIgpThumbsDownLabel = jsonMap["IGPThumbsDownLabel"] as? String {
                    resultDecodedBuilder.igpThumbsDownLabel = jsonValueIgpThumbsDownLabel
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPChannelGetMessagesStatsResponse.IGPStats.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpStats:Array<IGPChannelGetMessagesStatsResponse.IGPStats>  = Array<IGPChannelGetMessagesStatsResponse.IGPStats>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        for oneElementIgpStats in igpStats {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpStats)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        for oneElementIgpStats in igpStats {
            serialize_size += oneElementIgpStats.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPChannelGetMessagesStatsResponse.Builder {
        return IGPChannelGetMessagesStatsResponse.classBuilder() as! IGPChannelGetMessagesStatsResponse.Builder
    }
    public func getBuilder() -> IGPChannelGetMessagesStatsResponse.Builder {
        return classBuilder() as! IGPChannelGetMessagesStatsResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChannelGetMessagesStatsResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPChannelGetMessagesStatsResponse.Builder()
    }
    public func toBuilder() throws -> IGPChannelGetMessagesStatsResponse.Builder {
        return try IGPChannelGetMessagesStatsResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPChannelGetMessagesStatsResponse) throws -> IGPChannelGetMessagesStatsResponse.Builder {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if !igpStats.isEmpty {
            var jsonArrayIgpStats:Array<Dictionary<String,Any>> = []
            for oneValueIgpStats in igpStats {
                let ecodedMessageIgpStats = try oneValueIgpStats.encode()
                jsonArrayIgpStats.append(ecodedMessageIgpStats)
            }
            jsonMap["IGPStats"] = jsonArrayIgpStats
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpStatsElementIndex:Int = 0
        for oneElementIgpStats in igpStats {
            output += "\(indent) igpStats[\(igpStatsElementIndex)] {\n"
            output += try oneElementIgpStats.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpStatsElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            for oneElementIgpStats in igpStats {
                hashCode = (hashCode &* 31) &+ oneElementIgpStats.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPChannelGetMessagesStatsResponse"
    }
    override public func className() -> String {
        return "IGPChannelGetMessagesStatsResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPChannelGetMessagesStatsResponse = IGPChannelGetMessagesStatsResponse()
        public func getMessage() -> IGPChannelGetMessagesStatsResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPChannelGetMessagesStatsResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPChannelGetMessagesStatsResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPChannelGetMessagesStatsResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpStats:Array<IGPChannelGetMessagesStatsResponse.IGPStats> {
            get {
                return builderResult.igpStats
            }
            set (value) {
                builderResult.igpStats = value
            }
        }
        @discardableResult
        public func setIgpStats(_ value:Array<IGPChannelGetMessagesStatsResponse.IGPStats>) -> IGPChannelGetMessagesStatsResponse.Builder {
            self.igpStats = value
            return self
        }
        @discardableResult
        public func clearIgpStats() -> IGPChannelGetMessagesStatsResponse.Builder {
            builderResult.igpStats.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPChannelGetMessagesStatsResponse.Builder {
            builderResult = IGPChannelGetMessagesStatsResponse()
            return self
        }
        override public func clone() throws -> IGPChannelGetMessagesStatsResponse.Builder {
            return try IGPChannelGetMessagesStatsResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPChannelGetMessagesStatsResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPChannelGetMessagesStatsResponse {
            let returnMe:IGPChannelGetMessagesStatsResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPChannelGetMessagesStatsResponse) throws -> IGPChannelGetMessagesStatsResponse.Builder {
            if other == IGPChannelGetMessagesStatsResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if !other.igpStats.isEmpty  {
                 builderResult.igpStats += other.igpStats
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPChannelGetMessagesStatsResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPChannelGetMessagesStatsResponse.IGPStats.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpStats.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPChannelGetMessagesStatsResponse.Builder {
            let resultDecodedBuilder = IGPChannelGetMessagesStatsResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpStats = jsonMap["IGPStats"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpStats:Array<IGPChannelGetMessagesStatsResponse.IGPStats> = []
                for oneValueIgpStats in jsonValueIgpStats {
                    let messageFromStringIgpStats = try IGPChannelGetMessagesStatsResponse.IGPStats.Builder.decodeToBuilder(jsonMap:oneValueIgpStats).build()

                    jsonArrayIgpStats.append(messageFromStringIgpStats)
                }
                resultDecodedBuilder.igpStats = jsonArrayIgpStats
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPChannelGetMessagesStatsResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPChannelGetMessagesStatsResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPChannelGetMessagesStats: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChannelGetMessagesStats> {
        var mergedArray = Array<IGPChannelGetMessagesStats>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChannelGetMessagesStats? {
        return try IGPChannelGetMessagesStats.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder().mergeFrom(data: data, extensionRegistry:ChannelGetMessagesStatsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStats {
        return try IGPChannelGetMessagesStats.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpRoomId": return self.igpRoomId
        case "igpMessageId": return self.igpMessageId
        default: return nil
        }
    }
}
extension IGPChannelGetMessagesStats.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpRoomId": return self.igpRoomId
            case "igpMessageId": return self.igpMessageId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int64> else {
                    return
                }
                self.igpMessageId = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPChannelGetMessagesStatsResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChannelGetMessagesStatsResponse> {
        var mergedArray = Array<IGPChannelGetMessagesStatsResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChannelGetMessagesStatsResponse? {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeFrom(data: data, extensionRegistry:ChannelGetMessagesStatsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse {
        return try IGPChannelGetMessagesStatsResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpStats": return self.igpStats
        default: return nil
        }
    }
}
extension IGPChannelGetMessagesStatsResponse.IGPStats: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPChannelGetMessagesStatsResponse.IGPStats> {
        var mergedArray = Array<IGPChannelGetMessagesStatsResponse.IGPStats>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPChannelGetMessagesStatsResponse.IGPStats? {
        return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
        return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeFrom(data: data, extensionRegistry:ChannelGetMessagesStatsRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
        return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
        return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
        return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
        return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPChannelGetMessagesStatsResponse.IGPStats {
        return try IGPChannelGetMessagesStatsResponse.IGPStats.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpMessageId": return self.igpMessageId
        case "igpViewsLabel": return self.igpViewsLabel
        case "igpThumbsUpLabel": return self.igpThumbsUpLabel
        case "igpThumbsDownLabel": return self.igpThumbsDownLabel
        default: return nil
        }
    }
}
extension IGPChannelGetMessagesStatsResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpStats": return self.igpStats
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpStats":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPChannelGetMessagesStatsResponse.IGPStats> else {
                    return
                }
                self.igpStats = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPChannelGetMessagesStatsResponse.IGPStats.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpMessageId": return self.igpMessageId
            case "igpViewsLabel": return self.igpViewsLabel
            case "igpThumbsUpLabel": return self.igpThumbsUpLabel
            case "igpThumbsDownLabel": return self.igpThumbsDownLabel
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageId = newSubscriptValue
            case "igpViewsLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpViewsLabel = newSubscriptValue
            case "igpThumbsUpLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpThumbsUpLabel = newSubscriptValue
            case "igpThumbsDownLabel":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpThumbsDownLabel = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
