/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "SignalingOffer.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct SignalingOfferRoot {
    public static let `default` = SignalingOfferRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPSignalingOffer : GeneratedMessage {

    public static func == (lhs: IGPSignalingOffer, rhs: IGPSignalingOffer) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpCalledUserId == rhs.hasIgpCalledUserId) && (!lhs.hasIgpCalledUserId || lhs.igpCalledUserId == rhs.igpCalledUserId)
        fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
        fieldCheck = fieldCheck && (lhs.hasIgpCallerSdp == rhs.hasIgpCallerSdp) && (!lhs.hasIgpCallerSdp || lhs.igpCallerSdp == rhs.igpCallerSdp)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end



        //Enum type declaration start 

        public enum IGPType:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
            case voiceCalling = 0
            case videoCalling = 1
            case screenSharing = 2
            case secretChat = 3
            public func toString() -> String {
                switch self {
                case .voiceCalling: return "VOICE_CALLING"
                case .videoCalling: return "VIDEO_CALLING"
                case .screenSharing: return "SCREEN_SHARING"
                case .secretChat: return "SECRET_CHAT"
                }
            }
            public static func fromString(str:String) throws -> IGPSignalingOffer.IGPType {
                switch str {
                case "VOICE_CALLING":    return .voiceCalling
                case "VIDEO_CALLING":    return .videoCalling
                case "SCREEN_SHARING":    return .screenSharing
                case "SECRET_CHAT":    return .secretChat
                default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                }
            }
            public var debugDescription:String { return getDescription() }
            public var description:String { return getDescription() }
            private func getDescription() -> String { 
                switch self {
                case .voiceCalling: return ".voiceCalling"
                case .videoCalling: return ".videoCalling"
                case .screenSharing: return ".screenSharing"
                case .secretChat: return ".secretChat"
                }
            }
            public var hashValue:Int {
                return self.rawValue.hashValue
            }
            public static func ==(lhs:IGPType, rhs:IGPType) -> Bool {
                return lhs.hashValue == rhs.hashValue
            }
        }

        //Enum type declaration end 

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpCalledUserId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpCalledUserId:Bool = false

    public fileprivate(set) var igpType:IGPSignalingOffer.IGPType = IGPSignalingOffer.IGPType.voiceCalling
    public fileprivate(set) var hasIgpType:Bool = false
    public fileprivate(set) var igpCallerSdp:String = ""
    public fileprivate(set) var hasIgpCallerSdp:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpCalledUserId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpCalledUserId)
        }
        if hasIgpType {
            try codedOutputStream.writeEnum(fieldNumber: 3, value:igpType.rawValue)
        }
        if hasIgpCallerSdp {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpCallerSdp)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpCalledUserId {
            serialize_size += igpCalledUserId.computeInt64Size(fieldNumber: 2)
        }
        if (hasIgpType) {
            serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 3)
        }
        if hasIgpCallerSdp {
            serialize_size += igpCallerSdp.computeStringSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingOffer.Builder {
        return IGPSignalingOffer.classBuilder() as! IGPSignalingOffer.Builder
    }
    public func getBuilder() -> IGPSignalingOffer.Builder {
        return classBuilder() as! IGPSignalingOffer.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingOffer.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingOffer.Builder()
    }
    public func toBuilder() throws -> IGPSignalingOffer.Builder {
        return try IGPSignalingOffer.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingOffer) throws -> IGPSignalingOffer.Builder {
        return try IGPSignalingOffer.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpCalledUserId {
            jsonMap["IGPCalledUserId"] = "\(igpCalledUserId)"
        }
        if hasIgpType {
            jsonMap["IGPType"] = igpType.toString()
        }
        if hasIgpCallerSdp {
            jsonMap["IGPCallerSdp"] = igpCallerSdp
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpCalledUserId {
            output += "\(indent) igpCalledUserId: \(igpCalledUserId) \n"
        }
        if (hasIgpType) {
            output += "\(indent) igpType: \(igpType.description)\n"
        }
        if hasIgpCallerSdp {
            output += "\(indent) igpCallerSdp: \(igpCallerSdp) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpCalledUserId {
                hashCode = (hashCode &* 31) &+ igpCalledUserId.hashValue
            }
            if hasIgpType {
                 hashCode = (hashCode &* 31) &+ igpType.hashValue
            }
            if hasIgpCallerSdp {
                hashCode = (hashCode &* 31) &+ igpCallerSdp.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingOffer"
    }
    override public func className() -> String {
        return "IGPSignalingOffer"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPSignalingOffer = IGPSignalingOffer()
        public func getMessage() -> IGPSignalingOffer {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPSignalingOffer.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPSignalingOffer.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPSignalingOffer.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpCalledUserId:Int64 {
            get {
                return builderResult.igpCalledUserId
            }
            set (value) {
                builderResult.hasIgpCalledUserId = true
                builderResult.igpCalledUserId = value
            }
        }
        public var hasIgpCalledUserId:Bool {
            get {
                return builderResult.hasIgpCalledUserId
            }
        }
        @discardableResult
        public func setIgpCalledUserId(_ value:Int64) -> IGPSignalingOffer.Builder {
            self.igpCalledUserId = value
            return self
        }
        @discardableResult
        public func clearIgpCalledUserId() -> IGPSignalingOffer.Builder{
            builderResult.hasIgpCalledUserId = false
            builderResult.igpCalledUserId = Int64(0)
            return self
        }
            public var igpType:IGPSignalingOffer.IGPType {
                get {
                    return builderResult.igpType
                }
                set (value) {
                    builderResult.hasIgpType = true
                    builderResult.igpType = value
                }
            }
            public var hasIgpType:Bool{
                get {
                    return builderResult.hasIgpType
                }
            }
        @discardableResult
            public func setIgpType(_ value:IGPSignalingOffer.IGPType) -> IGPSignalingOffer.Builder {
              self.igpType = value
              return self
            }
        @discardableResult
            public func clearIgpType() -> IGPSignalingOffer.Builder {
               builderResult.hasIgpType = false
               builderResult.igpType = .voiceCalling
               return self
            }
        public var igpCallerSdp:String {
            get {
                return builderResult.igpCallerSdp
            }
            set (value) {
                builderResult.hasIgpCallerSdp = true
                builderResult.igpCallerSdp = value
            }
        }
        public var hasIgpCallerSdp:Bool {
            get {
                return builderResult.hasIgpCallerSdp
            }
        }
        @discardableResult
        public func setIgpCallerSdp(_ value:String) -> IGPSignalingOffer.Builder {
            self.igpCallerSdp = value
            return self
        }
        @discardableResult
        public func clearIgpCallerSdp() -> IGPSignalingOffer.Builder{
            builderResult.hasIgpCallerSdp = false
            builderResult.igpCallerSdp = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingOffer.Builder {
            builderResult = IGPSignalingOffer()
            return self
        }
        override public func clone() throws -> IGPSignalingOffer.Builder {
            return try IGPSignalingOffer.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingOffer {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingOffer {
            let returnMe:IGPSignalingOffer = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingOffer) throws -> IGPSignalingOffer.Builder {
            if other == IGPSignalingOffer() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpCalledUserId {
                igpCalledUserId = other.igpCalledUserId
            }
            if other.hasIgpType {
                igpType = other.igpType
            }
            if other.hasIgpCallerSdp {
                igpCallerSdp = other.igpCallerSdp
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingOffer.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOffer.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    igpCalledUserId = try codedInputStream.readInt64()

                case 24:
                    let valueIntigpType = try codedInputStream.readEnum()
                    if let enumsigpType = IGPSignalingOffer.IGPType(rawValue:valueIntigpType){
                        igpType = enumsigpType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntigpType))
                    }

                case 34:
                    igpCallerSdp = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingOffer.Builder {
            let resultDecodedBuilder = IGPSignalingOffer.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpCalledUserId = jsonMap["IGPCalledUserId"] as? String {
                resultDecodedBuilder.igpCalledUserId = Int64(jsonValueIgpCalledUserId)!
            } else if let jsonValueIgpCalledUserId = jsonMap["IGPCalledUserId"] as? Int {
                resultDecodedBuilder.igpCalledUserId = Int64(jsonValueIgpCalledUserId)
            }
            if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                resultDecodedBuilder.igpType = try IGPSignalingOffer.IGPType.fromString(str: jsonValueIgpType)
            }
            if let jsonValueIgpCallerSdp = jsonMap["IGPCallerSdp"] as? String {
                resultDecodedBuilder.igpCallerSdp = jsonValueIgpCallerSdp
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingOffer.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingOffer.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPSignalingOfferResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPSignalingOfferResponse, rhs: IGPSignalingOfferResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpCallerUserId == rhs.hasIgpCallerUserId) && (!lhs.hasIgpCallerUserId || lhs.igpCallerUserId == rhs.igpCallerUserId)
        fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
        fieldCheck = fieldCheck && (lhs.hasIgpCallerSdp == rhs.hasIgpCallerSdp) && (!lhs.hasIgpCallerSdp || lhs.igpCallerSdp == rhs.igpCallerSdp)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpCallerUserId:Int64 = Int64(0)
    public fileprivate(set) var hasIgpCallerUserId:Bool = false

    public fileprivate(set) var igpType:IGPSignalingOffer.IGPType = IGPSignalingOffer.IGPType.voiceCalling
    public fileprivate(set) var hasIgpType:Bool = false
    public fileprivate(set) var igpCallerSdp:String = ""
    public fileprivate(set) var hasIgpCallerSdp:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpCallerUserId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpCallerUserId)
        }
        if hasIgpType {
            try codedOutputStream.writeEnum(fieldNumber: 3, value:igpType.rawValue)
        }
        if hasIgpCallerSdp {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpCallerSdp)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpCallerUserId {
            serialize_size += igpCallerUserId.computeInt64Size(fieldNumber: 2)
        }
        if (hasIgpType) {
            serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 3)
        }
        if hasIgpCallerSdp {
            serialize_size += igpCallerSdp.computeStringSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingOfferResponse.Builder {
        return IGPSignalingOfferResponse.classBuilder() as! IGPSignalingOfferResponse.Builder
    }
    public func getBuilder() -> IGPSignalingOfferResponse.Builder {
        return classBuilder() as! IGPSignalingOfferResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingOfferResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingOfferResponse.Builder()
    }
    public func toBuilder() throws -> IGPSignalingOfferResponse.Builder {
        return try IGPSignalingOfferResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingOfferResponse) throws -> IGPSignalingOfferResponse.Builder {
        return try IGPSignalingOfferResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpCallerUserId {
            jsonMap["IGPCallerUserId"] = "\(igpCallerUserId)"
        }
        if hasIgpType {
            jsonMap["IGPType"] = igpType.toString()
        }
        if hasIgpCallerSdp {
            jsonMap["IGPCallerSdp"] = igpCallerSdp
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpCallerUserId {
            output += "\(indent) igpCallerUserId: \(igpCallerUserId) \n"
        }
        if (hasIgpType) {
            output += "\(indent) igpType: \(igpType.description)\n"
        }
        if hasIgpCallerSdp {
            output += "\(indent) igpCallerSdp: \(igpCallerSdp) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpCallerUserId {
                hashCode = (hashCode &* 31) &+ igpCallerUserId.hashValue
            }
            if hasIgpType {
                 hashCode = (hashCode &* 31) &+ igpType.hashValue
            }
            if hasIgpCallerSdp {
                hashCode = (hashCode &* 31) &+ igpCallerSdp.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingOfferResponse"
    }
    override public func className() -> String {
        return "IGPSignalingOfferResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPSignalingOfferResponse = IGPSignalingOfferResponse()
        public func getMessage() -> IGPSignalingOfferResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPSignalingOfferResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPSignalingOfferResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPSignalingOfferResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpCallerUserId:Int64 {
            get {
                return builderResult.igpCallerUserId
            }
            set (value) {
                builderResult.hasIgpCallerUserId = true
                builderResult.igpCallerUserId = value
            }
        }
        public var hasIgpCallerUserId:Bool {
            get {
                return builderResult.hasIgpCallerUserId
            }
        }
        @discardableResult
        public func setIgpCallerUserId(_ value:Int64) -> IGPSignalingOfferResponse.Builder {
            self.igpCallerUserId = value
            return self
        }
        @discardableResult
        public func clearIgpCallerUserId() -> IGPSignalingOfferResponse.Builder{
            builderResult.hasIgpCallerUserId = false
            builderResult.igpCallerUserId = Int64(0)
            return self
        }
            public var igpType:IGPSignalingOffer.IGPType {
                get {
                    return builderResult.igpType
                }
                set (value) {
                    builderResult.hasIgpType = true
                    builderResult.igpType = value
                }
            }
            public var hasIgpType:Bool{
                get {
                    return builderResult.hasIgpType
                }
            }
        @discardableResult
            public func setIgpType(_ value:IGPSignalingOffer.IGPType) -> IGPSignalingOfferResponse.Builder {
              self.igpType = value
              return self
            }
        @discardableResult
            public func clearIgpType() -> IGPSignalingOfferResponse.Builder {
               builderResult.hasIgpType = false
               builderResult.igpType = .voiceCalling
               return self
            }
        public var igpCallerSdp:String {
            get {
                return builderResult.igpCallerSdp
            }
            set (value) {
                builderResult.hasIgpCallerSdp = true
                builderResult.igpCallerSdp = value
            }
        }
        public var hasIgpCallerSdp:Bool {
            get {
                return builderResult.hasIgpCallerSdp
            }
        }
        @discardableResult
        public func setIgpCallerSdp(_ value:String) -> IGPSignalingOfferResponse.Builder {
            self.igpCallerSdp = value
            return self
        }
        @discardableResult
        public func clearIgpCallerSdp() -> IGPSignalingOfferResponse.Builder{
            builderResult.hasIgpCallerSdp = false
            builderResult.igpCallerSdp = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingOfferResponse.Builder {
            builderResult = IGPSignalingOfferResponse()
            return self
        }
        override public func clone() throws -> IGPSignalingOfferResponse.Builder {
            return try IGPSignalingOfferResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingOfferResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingOfferResponse {
            let returnMe:IGPSignalingOfferResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingOfferResponse) throws -> IGPSignalingOfferResponse.Builder {
            if other == IGPSignalingOfferResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpCallerUserId {
                igpCallerUserId = other.igpCallerUserId
            }
            if other.hasIgpType {
                igpType = other.igpType
            }
            if other.hasIgpCallerSdp {
                igpCallerSdp = other.igpCallerSdp
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingOfferResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOfferResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpCallerUserId = try codedInputStream.readInt64()

                case 24:
                    let valueIntigpType = try codedInputStream.readEnum()
                    if let enumsigpType = IGPSignalingOffer.IGPType(rawValue:valueIntigpType){
                        igpType = enumsigpType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntigpType))
                    }

                case 34:
                    igpCallerSdp = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingOfferResponse.Builder {
            let resultDecodedBuilder = IGPSignalingOfferResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpCallerUserId = jsonMap["IGPCallerUserId"] as? String {
                resultDecodedBuilder.igpCallerUserId = Int64(jsonValueIgpCallerUserId)!
            } else if let jsonValueIgpCallerUserId = jsonMap["IGPCallerUserId"] as? Int {
                resultDecodedBuilder.igpCallerUserId = Int64(jsonValueIgpCallerUserId)
            }
            if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                resultDecodedBuilder.igpType = try IGPSignalingOffer.IGPType.fromString(str: jsonValueIgpType)
            }
            if let jsonValueIgpCallerSdp = jsonMap["IGPCallerSdp"] as? String {
                resultDecodedBuilder.igpCallerSdp = jsonValueIgpCallerSdp
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingOfferResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingOfferResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPSignalingOffer: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingOffer> {
        var mergedArray = Array<IGPSignalingOffer>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingOffer? {
        return try IGPSignalingOffer.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder().mergeFrom(data: data, extensionRegistry:SignalingOfferRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOffer {
        return try IGPSignalingOffer.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpCalledUserId": return self.igpCalledUserId
        case "igpType": return self.igpType
        case "igpCallerSdp": return self.igpCallerSdp
        default: return nil
        }
    }
}
extension IGPSignalingOffer.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpCalledUserId": return self.igpCalledUserId
            case "igpType": return self.igpType
            case "igpCallerSdp": return self.igpCallerSdp
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpCalledUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpCalledUserId = newSubscriptValue
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPSignalingOffer.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpCallerSdp":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCallerSdp = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPSignalingOfferResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingOfferResponse> {
        var mergedArray = Array<IGPSignalingOfferResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingOfferResponse? {
        return try IGPSignalingOfferResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder().mergeFrom(data: data, extensionRegistry:SignalingOfferRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingOfferResponse {
        return try IGPSignalingOfferResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpCallerUserId": return self.igpCallerUserId
        case "igpType": return self.igpType
        case "igpCallerSdp": return self.igpCallerSdp
        default: return nil
        }
    }
}
extension IGPSignalingOfferResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpCallerUserId": return self.igpCallerUserId
            case "igpType": return self.igpType
            case "igpCallerSdp": return self.igpCallerSdp
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpCallerUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpCallerUserId = newSubscriptValue
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPSignalingOffer.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpCallerSdp":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpCallerSdp = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
