/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "UserTwoStepVerificationSetPassword.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct UserTwoStepVerificationSetPasswordRoot {
    public static let `default` = UserTwoStepVerificationSetPasswordRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPUserTwoStepVerificationSetPassword : GeneratedMessage {
    public typealias BuilderType = IGPUserTwoStepVerificationSetPassword.Builder

    public static func == (lhs: IGPUserTwoStepVerificationSetPassword, rhs: IGPUserTwoStepVerificationSetPassword) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpOldPassword == rhs.hasIgpOldPassword) && (!lhs.hasIgpOldPassword || lhs.igpOldPassword == rhs.igpOldPassword)
        fieldCheck = fieldCheck && (lhs.hasIgpNewPassword == rhs.hasIgpNewPassword) && (!lhs.hasIgpNewPassword || lhs.igpNewPassword == rhs.igpNewPassword)
        fieldCheck = fieldCheck && (lhs.hasIgpRecoveryEmail == rhs.hasIgpRecoveryEmail) && (!lhs.hasIgpRecoveryEmail || lhs.igpRecoveryEmail == rhs.igpRecoveryEmail)
        fieldCheck = fieldCheck && (lhs.hasIgpQuestionOne == rhs.hasIgpQuestionOne) && (!lhs.hasIgpQuestionOne || lhs.igpQuestionOne == rhs.igpQuestionOne)
        fieldCheck = fieldCheck && (lhs.hasIgpAnswerOne == rhs.hasIgpAnswerOne) && (!lhs.hasIgpAnswerOne || lhs.igpAnswerOne == rhs.igpAnswerOne)
        fieldCheck = fieldCheck && (lhs.hasIgpQuestionTwo == rhs.hasIgpQuestionTwo) && (!lhs.hasIgpQuestionTwo || lhs.igpQuestionTwo == rhs.igpQuestionTwo)
        fieldCheck = fieldCheck && (lhs.hasIgpAnswerTwo == rhs.hasIgpAnswerTwo) && (!lhs.hasIgpAnswerTwo || lhs.igpAnswerTwo == rhs.igpAnswerTwo)
        fieldCheck = fieldCheck && (lhs.hasIgpHint == rhs.hasIgpHint) && (!lhs.hasIgpHint || lhs.igpHint == rhs.igpHint)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpOldPassword:String! = nil
    public fileprivate(set) var hasIgpOldPassword:Bool = false

    public fileprivate(set) var igpNewPassword:String! = nil
    public fileprivate(set) var hasIgpNewPassword:Bool = false

    public fileprivate(set) var igpRecoveryEmail:String! = nil
    public fileprivate(set) var hasIgpRecoveryEmail:Bool = false

    public fileprivate(set) var igpQuestionOne:String! = nil
    public fileprivate(set) var hasIgpQuestionOne:Bool = false

    public fileprivate(set) var igpAnswerOne:String! = nil
    public fileprivate(set) var hasIgpAnswerOne:Bool = false

    public fileprivate(set) var igpQuestionTwo:String! = nil
    public fileprivate(set) var hasIgpQuestionTwo:Bool = false

    public fileprivate(set) var igpAnswerTwo:String! = nil
    public fileprivate(set) var hasIgpAnswerTwo:Bool = false

    public fileprivate(set) var igpHint:String! = nil
    public fileprivate(set) var hasIgpHint:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpOldPassword {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpOldPassword)
        }
        if hasIgpNewPassword {
            try codedOutputStream.writeString(fieldNumber: 3, value:igpNewPassword)
        }
        if hasIgpRecoveryEmail {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpRecoveryEmail)
        }
        if hasIgpQuestionOne {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpQuestionOne)
        }
        if hasIgpAnswerOne {
            try codedOutputStream.writeString(fieldNumber: 6, value:igpAnswerOne)
        }
        if hasIgpQuestionTwo {
            try codedOutputStream.writeString(fieldNumber: 7, value:igpQuestionTwo)
        }
        if hasIgpAnswerTwo {
            try codedOutputStream.writeString(fieldNumber: 8, value:igpAnswerTwo)
        }
        if hasIgpHint {
            try codedOutputStream.writeString(fieldNumber: 9, value:igpHint)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpOldPassword {
            serialize_size += igpOldPassword.computeStringSize(fieldNumber: 2)
        }
        if hasIgpNewPassword {
            serialize_size += igpNewPassword.computeStringSize(fieldNumber: 3)
        }
        if hasIgpRecoveryEmail {
            serialize_size += igpRecoveryEmail.computeStringSize(fieldNumber: 4)
        }
        if hasIgpQuestionOne {
            serialize_size += igpQuestionOne.computeStringSize(fieldNumber: 5)
        }
        if hasIgpAnswerOne {
            serialize_size += igpAnswerOne.computeStringSize(fieldNumber: 6)
        }
        if hasIgpQuestionTwo {
            serialize_size += igpQuestionTwo.computeStringSize(fieldNumber: 7)
        }
        if hasIgpAnswerTwo {
            serialize_size += igpAnswerTwo.computeStringSize(fieldNumber: 8)
        }
        if hasIgpHint {
            serialize_size += igpHint.computeStringSize(fieldNumber: 9)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserTwoStepVerificationSetPassword.Builder {
        return IGPUserTwoStepVerificationSetPassword.classBuilder() as! IGPUserTwoStepVerificationSetPassword.Builder
    }
    public func getBuilder() -> IGPUserTwoStepVerificationSetPassword.Builder {
        return classBuilder() as! IGPUserTwoStepVerificationSetPassword.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserTwoStepVerificationSetPassword.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserTwoStepVerificationSetPassword.Builder()
    }
    public func toBuilder() throws -> IGPUserTwoStepVerificationSetPassword.Builder {
        return try IGPUserTwoStepVerificationSetPassword.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserTwoStepVerificationSetPassword) throws -> IGPUserTwoStepVerificationSetPassword.Builder {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpOldPassword {
            jsonMap["IGPOldPassword"] = igpOldPassword
        }
        if hasIgpNewPassword {
            jsonMap["IGPNewPassword"] = igpNewPassword
        }
        if hasIgpRecoveryEmail {
            jsonMap["IGPRecoveryEmail"] = igpRecoveryEmail
        }
        if hasIgpQuestionOne {
            jsonMap["IGPQuestionOne"] = igpQuestionOne
        }
        if hasIgpAnswerOne {
            jsonMap["IGPAnswerOne"] = igpAnswerOne
        }
        if hasIgpQuestionTwo {
            jsonMap["IGPQuestionTwo"] = igpQuestionTwo
        }
        if hasIgpAnswerTwo {
            jsonMap["IGPAnswerTwo"] = igpAnswerTwo
        }
        if hasIgpHint {
            jsonMap["IGPHint"] = igpHint
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpOldPassword {
            output += "\(indent) igpOldPassword: \(igpOldPassword) \n"
        }
        if hasIgpNewPassword {
            output += "\(indent) igpNewPassword: \(igpNewPassword) \n"
        }
        if hasIgpRecoveryEmail {
            output += "\(indent) igpRecoveryEmail: \(igpRecoveryEmail) \n"
        }
        if hasIgpQuestionOne {
            output += "\(indent) igpQuestionOne: \(igpQuestionOne) \n"
        }
        if hasIgpAnswerOne {
            output += "\(indent) igpAnswerOne: \(igpAnswerOne) \n"
        }
        if hasIgpQuestionTwo {
            output += "\(indent) igpQuestionTwo: \(igpQuestionTwo) \n"
        }
        if hasIgpAnswerTwo {
            output += "\(indent) igpAnswerTwo: \(igpAnswerTwo) \n"
        }
        if hasIgpHint {
            output += "\(indent) igpHint: \(igpHint) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpOldPassword {
                hashCode = (hashCode &* 31) &+ igpOldPassword.hashValue
            }
            if hasIgpNewPassword {
                hashCode = (hashCode &* 31) &+ igpNewPassword.hashValue
            }
            if hasIgpRecoveryEmail {
                hashCode = (hashCode &* 31) &+ igpRecoveryEmail.hashValue
            }
            if hasIgpQuestionOne {
                hashCode = (hashCode &* 31) &+ igpQuestionOne.hashValue
            }
            if hasIgpAnswerOne {
                hashCode = (hashCode &* 31) &+ igpAnswerOne.hashValue
            }
            if hasIgpQuestionTwo {
                hashCode = (hashCode &* 31) &+ igpQuestionTwo.hashValue
            }
            if hasIgpAnswerTwo {
                hashCode = (hashCode &* 31) &+ igpAnswerTwo.hashValue
            }
            if hasIgpHint {
                hashCode = (hashCode &* 31) &+ igpHint.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserTwoStepVerificationSetPassword"
    }
    override public func className() -> String {
        return "IGPUserTwoStepVerificationSetPassword"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPUserTwoStepVerificationSetPassword = IGPUserTwoStepVerificationSetPassword()
        public func getMessage() -> IGPUserTwoStepVerificationSetPassword {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPUserTwoStepVerificationSetPassword.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPUserTwoStepVerificationSetPassword.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpOldPassword:String {
            get {
                return builderResult.igpOldPassword
            }
            set (value) {
                builderResult.hasIgpOldPassword = true
                builderResult.igpOldPassword = value
            }
        }
        public var hasIgpOldPassword:Bool {
            get {
                return builderResult.hasIgpOldPassword
            }
        }
        @discardableResult
        public func setIgpOldPassword(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpOldPassword = value
            return self
        }
        @discardableResult
        public func clearIgpOldPassword() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpOldPassword = false
            builderResult.igpOldPassword = nil
            return self
        }
        public var igpNewPassword:String {
            get {
                return builderResult.igpNewPassword
            }
            set (value) {
                builderResult.hasIgpNewPassword = true
                builderResult.igpNewPassword = value
            }
        }
        public var hasIgpNewPassword:Bool {
            get {
                return builderResult.hasIgpNewPassword
            }
        }
        @discardableResult
        public func setIgpNewPassword(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpNewPassword = value
            return self
        }
        @discardableResult
        public func clearIgpNewPassword() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpNewPassword = false
            builderResult.igpNewPassword = nil
            return self
        }
        public var igpRecoveryEmail:String {
            get {
                return builderResult.igpRecoveryEmail
            }
            set (value) {
                builderResult.hasIgpRecoveryEmail = true
                builderResult.igpRecoveryEmail = value
            }
        }
        public var hasIgpRecoveryEmail:Bool {
            get {
                return builderResult.hasIgpRecoveryEmail
            }
        }
        @discardableResult
        public func setIgpRecoveryEmail(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpRecoveryEmail = value
            return self
        }
        @discardableResult
        public func clearIgpRecoveryEmail() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpRecoveryEmail = false
            builderResult.igpRecoveryEmail = nil
            return self
        }
        public var igpQuestionOne:String {
            get {
                return builderResult.igpQuestionOne
            }
            set (value) {
                builderResult.hasIgpQuestionOne = true
                builderResult.igpQuestionOne = value
            }
        }
        public var hasIgpQuestionOne:Bool {
            get {
                return builderResult.hasIgpQuestionOne
            }
        }
        @discardableResult
        public func setIgpQuestionOne(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpQuestionOne = value
            return self
        }
        @discardableResult
        public func clearIgpQuestionOne() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpQuestionOne = false
            builderResult.igpQuestionOne = nil
            return self
        }
        public var igpAnswerOne:String {
            get {
                return builderResult.igpAnswerOne
            }
            set (value) {
                builderResult.hasIgpAnswerOne = true
                builderResult.igpAnswerOne = value
            }
        }
        public var hasIgpAnswerOne:Bool {
            get {
                return builderResult.hasIgpAnswerOne
            }
        }
        @discardableResult
        public func setIgpAnswerOne(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpAnswerOne = value
            return self
        }
        @discardableResult
        public func clearIgpAnswerOne() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpAnswerOne = false
            builderResult.igpAnswerOne = nil
            return self
        }
        public var igpQuestionTwo:String {
            get {
                return builderResult.igpQuestionTwo
            }
            set (value) {
                builderResult.hasIgpQuestionTwo = true
                builderResult.igpQuestionTwo = value
            }
        }
        public var hasIgpQuestionTwo:Bool {
            get {
                return builderResult.hasIgpQuestionTwo
            }
        }
        @discardableResult
        public func setIgpQuestionTwo(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpQuestionTwo = value
            return self
        }
        @discardableResult
        public func clearIgpQuestionTwo() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpQuestionTwo = false
            builderResult.igpQuestionTwo = nil
            return self
        }
        public var igpAnswerTwo:String {
            get {
                return builderResult.igpAnswerTwo
            }
            set (value) {
                builderResult.hasIgpAnswerTwo = true
                builderResult.igpAnswerTwo = value
            }
        }
        public var hasIgpAnswerTwo:Bool {
            get {
                return builderResult.hasIgpAnswerTwo
            }
        }
        @discardableResult
        public func setIgpAnswerTwo(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpAnswerTwo = value
            return self
        }
        @discardableResult
        public func clearIgpAnswerTwo() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpAnswerTwo = false
            builderResult.igpAnswerTwo = nil
            return self
        }
        public var igpHint:String {
            get {
                return builderResult.igpHint
            }
            set (value) {
                builderResult.hasIgpHint = true
                builderResult.igpHint = value
            }
        }
        public var hasIgpHint:Bool {
            get {
                return builderResult.hasIgpHint
            }
        }
        @discardableResult
        public func setIgpHint(_ value:String) -> IGPUserTwoStepVerificationSetPassword.Builder {
            self.igpHint = value
            return self
        }
        @discardableResult
        public func clearIgpHint() -> IGPUserTwoStepVerificationSetPassword.Builder{
            builderResult.hasIgpHint = false
            builderResult.igpHint = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserTwoStepVerificationSetPassword.Builder {
            builderResult = IGPUserTwoStepVerificationSetPassword()
            return self
        }
        override public func clone() throws -> IGPUserTwoStepVerificationSetPassword.Builder {
            return try IGPUserTwoStepVerificationSetPassword.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserTwoStepVerificationSetPassword {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserTwoStepVerificationSetPassword {
            let returnMe:IGPUserTwoStepVerificationSetPassword = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserTwoStepVerificationSetPassword) throws -> IGPUserTwoStepVerificationSetPassword.Builder {
            if other == IGPUserTwoStepVerificationSetPassword() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpOldPassword {
                igpOldPassword = other.igpOldPassword
            }
            if other.hasIgpNewPassword {
                igpNewPassword = other.igpNewPassword
            }
            if other.hasIgpRecoveryEmail {
                igpRecoveryEmail = other.igpRecoveryEmail
            }
            if other.hasIgpQuestionOne {
                igpQuestionOne = other.igpQuestionOne
            }
            if other.hasIgpAnswerOne {
                igpAnswerOne = other.igpAnswerOne
            }
            if other.hasIgpQuestionTwo {
                igpQuestionTwo = other.igpQuestionTwo
            }
            if other.hasIgpAnswerTwo {
                igpAnswerTwo = other.igpAnswerTwo
            }
            if other.hasIgpHint {
                igpHint = other.igpHint
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserTwoStepVerificationSetPassword.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPassword.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    igpOldPassword = try codedInputStream.readString()

                case 26:
                    igpNewPassword = try codedInputStream.readString()

                case 34:
                    igpRecoveryEmail = try codedInputStream.readString()

                case 42:
                    igpQuestionOne = try codedInputStream.readString()

                case 50:
                    igpAnswerOne = try codedInputStream.readString()

                case 58:
                    igpQuestionTwo = try codedInputStream.readString()

                case 66:
                    igpAnswerTwo = try codedInputStream.readString()

                case 74:
                    igpHint = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserTwoStepVerificationSetPassword.Builder {
            let resultDecodedBuilder = IGPUserTwoStepVerificationSetPassword.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpOldPassword = jsonMap["IGPOldPassword"] as? String {
                resultDecodedBuilder.igpOldPassword = jsonValueIgpOldPassword
            }
            if let jsonValueIgpNewPassword = jsonMap["IGPNewPassword"] as? String {
                resultDecodedBuilder.igpNewPassword = jsonValueIgpNewPassword
            }
            if let jsonValueIgpRecoveryEmail = jsonMap["IGPRecoveryEmail"] as? String {
                resultDecodedBuilder.igpRecoveryEmail = jsonValueIgpRecoveryEmail
            }
            if let jsonValueIgpQuestionOne = jsonMap["IGPQuestionOne"] as? String {
                resultDecodedBuilder.igpQuestionOne = jsonValueIgpQuestionOne
            }
            if let jsonValueIgpAnswerOne = jsonMap["IGPAnswerOne"] as? String {
                resultDecodedBuilder.igpAnswerOne = jsonValueIgpAnswerOne
            }
            if let jsonValueIgpQuestionTwo = jsonMap["IGPQuestionTwo"] as? String {
                resultDecodedBuilder.igpQuestionTwo = jsonValueIgpQuestionTwo
            }
            if let jsonValueIgpAnswerTwo = jsonMap["IGPAnswerTwo"] as? String {
                resultDecodedBuilder.igpAnswerTwo = jsonValueIgpAnswerTwo
            }
            if let jsonValueIgpHint = jsonMap["IGPHint"] as? String {
                resultDecodedBuilder.igpHint = jsonValueIgpHint
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserTwoStepVerificationSetPassword.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserTwoStepVerificationSetPassword.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPUserTwoStepVerificationSetPasswordResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPUserTwoStepVerificationSetPasswordResponse.Builder

    public static func == (lhs: IGPUserTwoStepVerificationSetPasswordResponse, rhs: IGPUserTwoStepVerificationSetPasswordResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpUnconfirmedEmailPattern == rhs.hasIgpUnconfirmedEmailPattern) && (!lhs.hasIgpUnconfirmedEmailPattern || lhs.igpUnconfirmedEmailPattern == rhs.igpUnconfirmedEmailPattern)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpUnconfirmedEmailPattern:String! = nil
    public fileprivate(set) var hasIgpUnconfirmedEmailPattern:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpUnconfirmedEmailPattern {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpUnconfirmedEmailPattern)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpUnconfirmedEmailPattern {
            serialize_size += igpUnconfirmedEmailPattern.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
        return IGPUserTwoStepVerificationSetPasswordResponse.classBuilder() as! IGPUserTwoStepVerificationSetPasswordResponse.Builder
    }
    public func getBuilder() -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
        return classBuilder() as! IGPUserTwoStepVerificationSetPasswordResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserTwoStepVerificationSetPasswordResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserTwoStepVerificationSetPasswordResponse.Builder()
    }
    public func toBuilder() throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
        return try IGPUserTwoStepVerificationSetPasswordResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserTwoStepVerificationSetPasswordResponse) throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpUnconfirmedEmailPattern {
            jsonMap["IGPUnconfirmedEmailPattern"] = igpUnconfirmedEmailPattern
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpUnconfirmedEmailPattern {
            output += "\(indent) igpUnconfirmedEmailPattern: \(igpUnconfirmedEmailPattern) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpUnconfirmedEmailPattern {
                hashCode = (hashCode &* 31) &+ igpUnconfirmedEmailPattern.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserTwoStepVerificationSetPasswordResponse"
    }
    override public func className() -> String {
        return "IGPUserTwoStepVerificationSetPasswordResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPUserTwoStepVerificationSetPasswordResponse = IGPUserTwoStepVerificationSetPasswordResponse()
        public func getMessage() -> IGPUserTwoStepVerificationSetPasswordResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpUnconfirmedEmailPattern:String {
            get {
                return builderResult.igpUnconfirmedEmailPattern
            }
            set (value) {
                builderResult.hasIgpUnconfirmedEmailPattern = true
                builderResult.igpUnconfirmedEmailPattern = value
            }
        }
        public var hasIgpUnconfirmedEmailPattern:Bool {
            get {
                return builderResult.hasIgpUnconfirmedEmailPattern
            }
        }
        @discardableResult
        public func setIgpUnconfirmedEmailPattern(_ value:String) -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            self.igpUnconfirmedEmailPattern = value
            return self
        }
        @discardableResult
        public func clearIgpUnconfirmedEmailPattern() -> IGPUserTwoStepVerificationSetPasswordResponse.Builder{
            builderResult.hasIgpUnconfirmedEmailPattern = false
            builderResult.igpUnconfirmedEmailPattern = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            builderResult = IGPUserTwoStepVerificationSetPasswordResponse()
            return self
        }
        override public func clone() throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            return try IGPUserTwoStepVerificationSetPasswordResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserTwoStepVerificationSetPasswordResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserTwoStepVerificationSetPasswordResponse {
            let returnMe:IGPUserTwoStepVerificationSetPasswordResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserTwoStepVerificationSetPasswordResponse) throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            if other == IGPUserTwoStepVerificationSetPasswordResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpUnconfirmedEmailPattern {
                igpUnconfirmedEmailPattern = other.igpUnconfirmedEmailPattern
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    igpUnconfirmedEmailPattern = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            let resultDecodedBuilder = IGPUserTwoStepVerificationSetPasswordResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpUnconfirmedEmailPattern = jsonMap["IGPUnconfirmedEmailPattern"] as? String {
                resultDecodedBuilder.igpUnconfirmedEmailPattern = jsonValueIgpUnconfirmedEmailPattern
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserTwoStepVerificationSetPasswordResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserTwoStepVerificationSetPasswordResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPUserTwoStepVerificationSetPassword: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserTwoStepVerificationSetPassword> {
        var mergedArray = Array<IGPUserTwoStepVerificationSetPassword>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserTwoStepVerificationSetPassword? {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeFrom(data: data, extensionRegistry:UserTwoStepVerificationSetPasswordRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPassword {
        return try IGPUserTwoStepVerificationSetPassword.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpOldPassword": return self.igpOldPassword
        case "igpNewPassword": return self.igpNewPassword
        case "igpRecoveryEmail": return self.igpRecoveryEmail
        case "igpQuestionOne": return self.igpQuestionOne
        case "igpAnswerOne": return self.igpAnswerOne
        case "igpQuestionTwo": return self.igpQuestionTwo
        case "igpAnswerTwo": return self.igpAnswerTwo
        case "igpHint": return self.igpHint
        default: return nil
        }
    }
}
extension IGPUserTwoStepVerificationSetPassword.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserTwoStepVerificationSetPassword
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpOldPassword": return self.igpOldPassword
            case "igpNewPassword": return self.igpNewPassword
            case "igpRecoveryEmail": return self.igpRecoveryEmail
            case "igpQuestionOne": return self.igpQuestionOne
            case "igpAnswerOne": return self.igpAnswerOne
            case "igpQuestionTwo": return self.igpQuestionTwo
            case "igpAnswerTwo": return self.igpAnswerTwo
            case "igpHint": return self.igpHint
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpOldPassword":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpOldPassword = newSubscriptValue
            case "igpNewPassword":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpNewPassword = newSubscriptValue
            case "igpRecoveryEmail":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpRecoveryEmail = newSubscriptValue
            case "igpQuestionOne":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpQuestionOne = newSubscriptValue
            case "igpAnswerOne":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAnswerOne = newSubscriptValue
            case "igpQuestionTwo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpQuestionTwo = newSubscriptValue
            case "igpAnswerTwo":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAnswerTwo = newSubscriptValue
            case "igpHint":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpHint = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserTwoStepVerificationSetPasswordResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserTwoStepVerificationSetPasswordResponse> {
        var mergedArray = Array<IGPUserTwoStepVerificationSetPasswordResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserTwoStepVerificationSetPasswordResponse? {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeFrom(data: data, extensionRegistry:UserTwoStepVerificationSetPasswordRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserTwoStepVerificationSetPasswordResponse {
        return try IGPUserTwoStepVerificationSetPasswordResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpUnconfirmedEmailPattern": return self.igpUnconfirmedEmailPattern
        default: return nil
        }
    }
}
extension IGPUserTwoStepVerificationSetPasswordResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserTwoStepVerificationSetPasswordResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpUnconfirmedEmailPattern": return self.igpUnconfirmedEmailPattern
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpUnconfirmedEmailPattern":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpUnconfirmedEmailPattern = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
