/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "UserContactsGetBlockedList.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct UserContactsGetBlockedListRoot {
    public static let `default` = UserContactsGetBlockedListRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPUserContactsGetBlockedList : GeneratedMessage {
    public typealias BuilderType = IGPUserContactsGetBlockedList.Builder

    public static func == (lhs: IGPUserContactsGetBlockedList, rhs: IGPUserContactsGetBlockedList) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserContactsGetBlockedList.Builder {
        return IGPUserContactsGetBlockedList.classBuilder() as! IGPUserContactsGetBlockedList.Builder
    }
    public func getBuilder() -> IGPUserContactsGetBlockedList.Builder {
        return classBuilder() as! IGPUserContactsGetBlockedList.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsGetBlockedList.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsGetBlockedList.Builder()
    }
    public func toBuilder() throws -> IGPUserContactsGetBlockedList.Builder {
        return try IGPUserContactsGetBlockedList.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserContactsGetBlockedList) throws -> IGPUserContactsGetBlockedList.Builder {
        return try IGPUserContactsGetBlockedList.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserContactsGetBlockedList"
    }
    override public func className() -> String {
        return "IGPUserContactsGetBlockedList"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPUserContactsGetBlockedList = IGPUserContactsGetBlockedList()
        public func getMessage() -> IGPUserContactsGetBlockedList {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPUserContactsGetBlockedList.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPUserContactsGetBlockedList.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPUserContactsGetBlockedList.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserContactsGetBlockedList.Builder {
            builderResult = IGPUserContactsGetBlockedList()
            return self
        }
        override public func clone() throws -> IGPUserContactsGetBlockedList.Builder {
            return try IGPUserContactsGetBlockedList.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserContactsGetBlockedList {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserContactsGetBlockedList {
            let returnMe:IGPUserContactsGetBlockedList = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserContactsGetBlockedList) throws -> IGPUserContactsGetBlockedList.Builder {
            if other == IGPUserContactsGetBlockedList() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsGetBlockedList.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedList.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsGetBlockedList.Builder {
            let resultDecodedBuilder = IGPUserContactsGetBlockedList.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserContactsGetBlockedList.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserContactsGetBlockedList.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPUserContactsGetBlockedListResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPUserContactsGetBlockedListResponse.Builder

    public static func == (lhs: IGPUserContactsGetBlockedListResponse, rhs: IGPUserContactsGetBlockedListResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.igpUser == rhs.igpUser)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPUser : GeneratedMessage {
        public typealias BuilderType = IGPUserContactsGetBlockedListResponse.IGPUser.Builder

        public static func == (lhs: IGPUserContactsGetBlockedListResponse.IGPUser, rhs: IGPUserContactsGetBlockedListResponse.IGPUser) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpUserId == rhs.hasIgpUserId) && (!lhs.hasIgpUserId || lhs.igpUserId == rhs.igpUserId)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end

        public fileprivate(set) var igpUserId:Int64! = nil
        public fileprivate(set) var hasIgpUserId:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpUserId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:igpUserId)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpUserId {
                serialize_size += igpUserId.computeInt64Size(fieldNumber: 1)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
            return IGPUserContactsGetBlockedListResponse.IGPUser.classBuilder() as! IGPUserContactsGetBlockedListResponse.IGPUser.Builder
        }
        public func getBuilder() -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
            return classBuilder() as! IGPUserContactsGetBlockedListResponse.IGPUser.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserContactsGetBlockedListResponse.IGPUser.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPUserContactsGetBlockedListResponse.IGPUser.Builder()
        }
        public func toBuilder() throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
            return try IGPUserContactsGetBlockedListResponse.IGPUser.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPUserContactsGetBlockedListResponse.IGPUser) throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
            return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpUserId {
                jsonMap["IGPUserId"] = "\(igpUserId!)"
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
            return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
            return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpUserId {
                output += "\(indent) igpUserId: \(igpUserId) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpUserId {
                    hashCode = (hashCode &* 31) &+ igpUserId.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPUserContactsGetBlockedListResponse.IGPUser"
        }
        override public func className() -> String {
            return "IGPUserContactsGetBlockedListResponse.IGPUser"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPUserContactsGetBlockedListResponse.IGPUser = IGPUserContactsGetBlockedListResponse.IGPUser()
            public func getMessage() -> IGPUserContactsGetBlockedListResponse.IGPUser {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpUserId:Int64 {
                get {
                    return builderResult.igpUserId
                }
                set (value) {
                    builderResult.hasIgpUserId = true
                    builderResult.igpUserId = value
                }
            }
            public var hasIgpUserId:Bool {
                get {
                    return builderResult.hasIgpUserId
                }
            }
            @discardableResult
            public func setIgpUserId(_ value:Int64) -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                self.igpUserId = value
                return self
            }
            @discardableResult
            public func clearIgpUserId() -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder{
                builderResult.hasIgpUserId = false
                builderResult.igpUserId = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                builderResult = IGPUserContactsGetBlockedListResponse.IGPUser()
                return self
            }
            override public func clone() throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                return try IGPUserContactsGetBlockedListResponse.IGPUser.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPUserContactsGetBlockedListResponse.IGPUser {
                let returnMe:IGPUserContactsGetBlockedListResponse.IGPUser = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPUserContactsGetBlockedListResponse.IGPUser) throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                if other == IGPUserContactsGetBlockedListResponse.IGPUser() {
                    return self
                }
                if other.hasIgpUserId {
                    igpUserId = other.igpUserId
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        igpUserId = try codedInputStream.readInt64()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                let resultDecodedBuilder = IGPUserContactsGetBlockedListResponse.IGPUser.Builder()
                if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? String {
                    resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)!
                } else if let jsonValueIgpUserId = jsonMap["IGPUserId"] as? Int {
                    resultDecodedBuilder.igpUserId = Int64(jsonValueIgpUserId)
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPUserContactsGetBlockedListResponse.IGPUser.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpUser:Array<IGPUserContactsGetBlockedListResponse.IGPUser>  = Array<IGPUserContactsGetBlockedListResponse.IGPUser>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        for oneElementIgpUser in igpUser {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpUser)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        for oneElementIgpUser in igpUser {
            serialize_size += oneElementIgpUser.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPUserContactsGetBlockedListResponse.Builder {
        return IGPUserContactsGetBlockedListResponse.classBuilder() as! IGPUserContactsGetBlockedListResponse.Builder
    }
    public func getBuilder() -> IGPUserContactsGetBlockedListResponse.Builder {
        return classBuilder() as! IGPUserContactsGetBlockedListResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsGetBlockedListResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPUserContactsGetBlockedListResponse.Builder()
    }
    public func toBuilder() throws -> IGPUserContactsGetBlockedListResponse.Builder {
        return try IGPUserContactsGetBlockedListResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPUserContactsGetBlockedListResponse) throws -> IGPUserContactsGetBlockedListResponse.Builder {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if !igpUser.isEmpty {
            var jsonArrayIgpUser:Array<Dictionary<String,Any>> = []
            for oneValueIgpUser in igpUser {
                let ecodedMessageIgpUser = try oneValueIgpUser.encode()
                jsonArrayIgpUser.append(ecodedMessageIgpUser)
            }
            jsonMap["IGPUser"] = jsonArrayIgpUser
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpUserElementIndex:Int = 0
        for oneElementIgpUser in igpUser {
            output += "\(indent) igpUser[\(igpUserElementIndex)] {\n"
            output += try oneElementIgpUser.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpUserElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            for oneElementIgpUser in igpUser {
                hashCode = (hashCode &* 31) &+ oneElementIgpUser.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPUserContactsGetBlockedListResponse"
    }
    override public func className() -> String {
        return "IGPUserContactsGetBlockedListResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPUserContactsGetBlockedListResponse = IGPUserContactsGetBlockedListResponse()
        public func getMessage() -> IGPUserContactsGetBlockedListResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPUserContactsGetBlockedListResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPUserContactsGetBlockedListResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPUserContactsGetBlockedListResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpUser:Array<IGPUserContactsGetBlockedListResponse.IGPUser> {
            get {
                return builderResult.igpUser
            }
            set (value) {
                builderResult.igpUser = value
            }
        }
        @discardableResult
        public func setIgpUser(_ value:Array<IGPUserContactsGetBlockedListResponse.IGPUser>) -> IGPUserContactsGetBlockedListResponse.Builder {
            self.igpUser = value
            return self
        }
        @discardableResult
        public func clearIgpUser() -> IGPUserContactsGetBlockedListResponse.Builder {
            builderResult.igpUser.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPUserContactsGetBlockedListResponse.Builder {
            builderResult = IGPUserContactsGetBlockedListResponse()
            return self
        }
        override public func clone() throws -> IGPUserContactsGetBlockedListResponse.Builder {
            return try IGPUserContactsGetBlockedListResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPUserContactsGetBlockedListResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPUserContactsGetBlockedListResponse {
            let returnMe:IGPUserContactsGetBlockedListResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPUserContactsGetBlockedListResponse) throws -> IGPUserContactsGetBlockedListResponse.Builder {
            if other == IGPUserContactsGetBlockedListResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if !other.igpUser.isEmpty  {
                 builderResult.igpUser += other.igpUser
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsGetBlockedListResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPUserContactsGetBlockedListResponse.IGPUser.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpUser.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPUserContactsGetBlockedListResponse.Builder {
            let resultDecodedBuilder = IGPUserContactsGetBlockedListResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpUser = jsonMap["IGPUser"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpUser:Array<IGPUserContactsGetBlockedListResponse.IGPUser> = []
                for oneValueIgpUser in jsonValueIgpUser {
                    let messageFromStringIgpUser = try IGPUserContactsGetBlockedListResponse.IGPUser.Builder.decodeToBuilder(jsonMap:oneValueIgpUser).build()

                    jsonArrayIgpUser.append(messageFromStringIgpUser)
                }
                resultDecodedBuilder.igpUser = jsonArrayIgpUser
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPUserContactsGetBlockedListResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPUserContactsGetBlockedListResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPUserContactsGetBlockedList: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserContactsGetBlockedList> {
        var mergedArray = Array<IGPUserContactsGetBlockedList>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserContactsGetBlockedList? {
        return try IGPUserContactsGetBlockedList.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder().mergeFrom(data: data, extensionRegistry:UserContactsGetBlockedListRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedList {
        return try IGPUserContactsGetBlockedList.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        default: return nil
        }
    }
}
extension IGPUserContactsGetBlockedList.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserContactsGetBlockedList
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserContactsGetBlockedListResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserContactsGetBlockedListResponse> {
        var mergedArray = Array<IGPUserContactsGetBlockedListResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserContactsGetBlockedListResponse? {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeFrom(data: data, extensionRegistry:UserContactsGetBlockedListRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse {
        return try IGPUserContactsGetBlockedListResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpUser": return self.igpUser
        default: return nil
        }
    }
}
extension IGPUserContactsGetBlockedListResponse.IGPUser: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPUserContactsGetBlockedListResponse.IGPUser> {
        var mergedArray = Array<IGPUserContactsGetBlockedListResponse.IGPUser>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPUserContactsGetBlockedListResponse.IGPUser? {
        return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
        return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeFrom(data: data, extensionRegistry:UserContactsGetBlockedListRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
        return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
        return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
        return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
        return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPUserContactsGetBlockedListResponse.IGPUser {
        return try IGPUserContactsGetBlockedListResponse.IGPUser.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpUserId": return self.igpUserId
        default: return nil
        }
    }
}
extension IGPUserContactsGetBlockedListResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserContactsGetBlockedListResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpUser": return self.igpUser
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpUser":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPUserContactsGetBlockedListResponse.IGPUser> else {
                    return
                }
                self.igpUser = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPUserContactsGetBlockedListResponse.IGPUser.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPUserContactsGetBlockedListResponse.IGPUser
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpUserId": return self.igpUserId
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpUserId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpUserId = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
