/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "GroupSendMessage.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct GroupSendMessageRoot {
    public static let `default` = GroupSendMessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPGroupSendMessage : GeneratedMessage {
    public typealias BuilderType = IGPGroupSendMessage.Builder

    public static func == (lhs: IGPGroupSendMessage, rhs: IGPGroupSendMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpMessageType == rhs.hasIgpMessageType) && (!lhs.hasIgpMessageType || lhs.igpMessageType == rhs.igpMessageType)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpMessage == rhs.hasIgpMessage) && (!lhs.hasIgpMessage || lhs.igpMessage == rhs.igpMessage)
        fieldCheck = fieldCheck && (lhs.hasIgpAttachment == rhs.hasIgpAttachment) && (!lhs.hasIgpAttachment || lhs.igpAttachment == rhs.igpAttachment)
        fieldCheck = fieldCheck && (lhs.hasIgpLocation == rhs.hasIgpLocation) && (!lhs.hasIgpLocation || lhs.igpLocation == rhs.igpLocation)
        fieldCheck = fieldCheck && (lhs.hasIgpContact == rhs.hasIgpContact) && (!lhs.hasIgpContact || lhs.igpContact == rhs.igpContact)
        fieldCheck = fieldCheck && (lhs.hasIgpReplyTo == rhs.hasIgpReplyTo) && (!lhs.hasIgpReplyTo || lhs.igpReplyTo == rhs.igpReplyTo)
        fieldCheck = fieldCheck && (lhs.hasIgpForwardFrom == rhs.hasIgpForwardFrom) && (!lhs.hasIgpForwardFrom || lhs.igpForwardFrom == rhs.igpForwardFrom)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpMessageType:IGPRoomMessageType = IGPRoomMessageType.text
    public fileprivate(set) var hasIgpMessageType:Bool = false
    public fileprivate(set) var igpRoomId:Int64! = nil
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpMessage:String! = nil
    public fileprivate(set) var hasIgpMessage:Bool = false

    public fileprivate(set) var igpAttachment:String! = nil
    public fileprivate(set) var hasIgpAttachment:Bool = false

    public fileprivate(set) var igpLocation:IGPRoomMessageLocation!
    public fileprivate(set) var hasIgpLocation:Bool = false
    public fileprivate(set) var igpContact:IGPRoomMessageContact!
    public fileprivate(set) var hasIgpContact:Bool = false
    public fileprivate(set) var igpReplyTo:Int64! = nil
    public fileprivate(set) var hasIgpReplyTo:Bool = false

    public fileprivate(set) var igpForwardFrom:IGPRoomMessageForwardFrom!
    public fileprivate(set) var hasIgpForwardFrom:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpMessageType {
            try codedOutputStream.writeEnum(fieldNumber: 2, value:igpMessageType.rawValue)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 3, value:igpRoomId)
        }
        if hasIgpMessage {
            try codedOutputStream.writeString(fieldNumber: 4, value:igpMessage)
        }
        if hasIgpAttachment {
            try codedOutputStream.writeString(fieldNumber: 5, value:igpAttachment)
        }
        if hasIgpLocation {
            try codedOutputStream.writeMessage(fieldNumber: 6, value:igpLocation)
        }
        if hasIgpContact {
            try codedOutputStream.writeMessage(fieldNumber: 7, value:igpContact)
        }
        if hasIgpReplyTo {
            try codedOutputStream.writeInt64(fieldNumber: 8, value:igpReplyTo)
        }
        if hasIgpForwardFrom {
            try codedOutputStream.writeMessage(fieldNumber: 9, value:igpForwardFrom)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if (hasIgpMessageType) {
            serialize_size += igpMessageType.rawValue.computeEnumSize(fieldNumber: 2)
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 3)
        }
        if hasIgpMessage {
            serialize_size += igpMessage.computeStringSize(fieldNumber: 4)
        }
        if hasIgpAttachment {
            serialize_size += igpAttachment.computeStringSize(fieldNumber: 5)
        }
        if hasIgpLocation {
            if let varSizeigpLocation = igpLocation?.computeMessageSize(fieldNumber: 6) {
                serialize_size += varSizeigpLocation
            }
        }
        if hasIgpContact {
            if let varSizeigpContact = igpContact?.computeMessageSize(fieldNumber: 7) {
                serialize_size += varSizeigpContact
            }
        }
        if hasIgpReplyTo {
            serialize_size += igpReplyTo.computeInt64Size(fieldNumber: 8)
        }
        if hasIgpForwardFrom {
            if let varSizeigpForwardFrom = igpForwardFrom?.computeMessageSize(fieldNumber: 9) {
                serialize_size += varSizeigpForwardFrom
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPGroupSendMessage.Builder {
        return IGPGroupSendMessage.classBuilder() as! IGPGroupSendMessage.Builder
    }
    public func getBuilder() -> IGPGroupSendMessage.Builder {
        return classBuilder() as! IGPGroupSendMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSendMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSendMessage.Builder()
    }
    public func toBuilder() throws -> IGPGroupSendMessage.Builder {
        return try IGPGroupSendMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPGroupSendMessage) throws -> IGPGroupSendMessage.Builder {
        return try IGPGroupSendMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpMessageType {
            jsonMap["IGPMessageType"] = igpMessageType.toString()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId!)"
        }
        if hasIgpMessage {
            jsonMap["IGPMessage"] = igpMessage
        }
        if hasIgpAttachment {
            jsonMap["IGPAttachment"] = igpAttachment
        }
        if hasIgpLocation {
            jsonMap["IGPLocation"] = try igpLocation.encode()
        }
        if hasIgpContact {
            jsonMap["IGPContact"] = try igpContact.encode()
        }
        if hasIgpReplyTo {
            jsonMap["IGPReplyTo"] = "\(igpReplyTo!)"
        }
        if hasIgpForwardFrom {
            jsonMap["IGPForwardFrom"] = try igpForwardFrom.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if (hasIgpMessageType) {
            output += "\(indent) igpMessageType: \(igpMessageType.description)\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpMessage {
            output += "\(indent) igpMessage: \(igpMessage) \n"
        }
        if hasIgpAttachment {
            output += "\(indent) igpAttachment: \(igpAttachment) \n"
        }
        if hasIgpLocation {
            output += "\(indent) igpLocation {\n"
            if let outDescIgpLocation = igpLocation {
                output += try outDescIgpLocation.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpContact {
            output += "\(indent) igpContact {\n"
            if let outDescIgpContact = igpContact {
                output += try outDescIgpContact.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpReplyTo {
            output += "\(indent) igpReplyTo: \(igpReplyTo) \n"
        }
        if hasIgpForwardFrom {
            output += "\(indent) igpForwardFrom {\n"
            if let outDescIgpForwardFrom = igpForwardFrom {
                output += try outDescIgpForwardFrom.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpMessageType {
                 hashCode = (hashCode &* 31) &+ igpMessageType.hashValue
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpMessage {
                hashCode = (hashCode &* 31) &+ igpMessage.hashValue
            }
            if hasIgpAttachment {
                hashCode = (hashCode &* 31) &+ igpAttachment.hashValue
            }
            if hasIgpLocation {
                if let hashValueigpLocation = igpLocation?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpLocation
                }
            }
            if hasIgpContact {
                if let hashValueigpContact = igpContact?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpContact
                }
            }
            if hasIgpReplyTo {
                hashCode = (hashCode &* 31) &+ igpReplyTo.hashValue
            }
            if hasIgpForwardFrom {
                if let hashValueigpForwardFrom = igpForwardFrom?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpForwardFrom
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPGroupSendMessage"
    }
    override public func className() -> String {
        return "IGPGroupSendMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPGroupSendMessage = IGPGroupSendMessage()
        public func getMessage() -> IGPGroupSendMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPGroupSendMessage.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPGroupSendMessage.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPGroupSendMessage.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
            public var igpMessageType:IGPRoomMessageType {
                get {
                    return builderResult.igpMessageType
                }
                set (value) {
                    builderResult.hasIgpMessageType = true
                    builderResult.igpMessageType = value
                }
            }
            public var hasIgpMessageType:Bool{
                get {
                    return builderResult.hasIgpMessageType
                }
            }
        @discardableResult
            public func setIgpMessageType(_ value:IGPRoomMessageType) -> IGPGroupSendMessage.Builder {
              self.igpMessageType = value
              return self
            }
        @discardableResult
            public func clearIgpMessageType() -> IGPGroupSendMessage.Builder {
               builderResult.hasIgpMessageType = false
               builderResult.igpMessageType = .text
               return self
            }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPGroupSendMessage.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPGroupSendMessage.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = nil
            return self
        }
        public var igpMessage:String {
            get {
                return builderResult.igpMessage
            }
            set (value) {
                builderResult.hasIgpMessage = true
                builderResult.igpMessage = value
            }
        }
        public var hasIgpMessage:Bool {
            get {
                return builderResult.hasIgpMessage
            }
        }
        @discardableResult
        public func setIgpMessage(_ value:String) -> IGPGroupSendMessage.Builder {
            self.igpMessage = value
            return self
        }
        @discardableResult
        public func clearIgpMessage() -> IGPGroupSendMessage.Builder{
            builderResult.hasIgpMessage = false
            builderResult.igpMessage = nil
            return self
        }
        public var igpAttachment:String {
            get {
                return builderResult.igpAttachment
            }
            set (value) {
                builderResult.hasIgpAttachment = true
                builderResult.igpAttachment = value
            }
        }
        public var hasIgpAttachment:Bool {
            get {
                return builderResult.hasIgpAttachment
            }
        }
        @discardableResult
        public func setIgpAttachment(_ value:String) -> IGPGroupSendMessage.Builder {
            self.igpAttachment = value
            return self
        }
        @discardableResult
        public func clearIgpAttachment() -> IGPGroupSendMessage.Builder{
            builderResult.hasIgpAttachment = false
            builderResult.igpAttachment = nil
            return self
        }
        public var igpLocation:IGPRoomMessageLocation! {
            get {
                if igpLocationBuilder_ != nil {
                    builderResult.igpLocation = igpLocationBuilder_.getMessage()
                }
                return builderResult.igpLocation
            }
            set (value) {
                builderResult.hasIgpLocation = true
                builderResult.igpLocation = value
            }
        }
        public var hasIgpLocation:Bool {
            get {
                return builderResult.hasIgpLocation
            }
        }
        fileprivate var igpLocationBuilder_:IGPRoomMessageLocation.Builder! {
            didSet {
                builderResult.hasIgpLocation = true
            }
        }
        public func getIgpLocationBuilder() -> IGPRoomMessageLocation.Builder {
            if igpLocationBuilder_ == nil {
                igpLocationBuilder_ = IGPRoomMessageLocation.Builder()
                builderResult.igpLocation = igpLocationBuilder_.getMessage()
                if igpLocation != nil {
                    try! igpLocationBuilder_.mergeFrom(other: igpLocation)
                }
            }
            return igpLocationBuilder_
        }
        @discardableResult
        public func setIgpLocation(_ value:IGPRoomMessageLocation!) -> IGPGroupSendMessage.Builder {
            self.igpLocation = value
            return self
        }
        @discardableResult
        public func mergeIgpLocation(value:IGPRoomMessageLocation) throws -> IGPGroupSendMessage.Builder {
            if builderResult.hasIgpLocation {
                builderResult.igpLocation = try IGPRoomMessageLocation.builderWithPrototype(prototype:builderResult.igpLocation).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpLocation = value
            }
            builderResult.hasIgpLocation = true
            return self
        }
        @discardableResult
        public func clearIgpLocation() -> IGPGroupSendMessage.Builder {
            igpLocationBuilder_ = nil
            builderResult.hasIgpLocation = false
            builderResult.igpLocation = nil
            return self
        }
        public var igpContact:IGPRoomMessageContact! {
            get {
                if igpContactBuilder_ != nil {
                    builderResult.igpContact = igpContactBuilder_.getMessage()
                }
                return builderResult.igpContact
            }
            set (value) {
                builderResult.hasIgpContact = true
                builderResult.igpContact = value
            }
        }
        public var hasIgpContact:Bool {
            get {
                return builderResult.hasIgpContact
            }
        }
        fileprivate var igpContactBuilder_:IGPRoomMessageContact.Builder! {
            didSet {
                builderResult.hasIgpContact = true
            }
        }
        public func getIgpContactBuilder() -> IGPRoomMessageContact.Builder {
            if igpContactBuilder_ == nil {
                igpContactBuilder_ = IGPRoomMessageContact.Builder()
                builderResult.igpContact = igpContactBuilder_.getMessage()
                if igpContact != nil {
                    try! igpContactBuilder_.mergeFrom(other: igpContact)
                }
            }
            return igpContactBuilder_
        }
        @discardableResult
        public func setIgpContact(_ value:IGPRoomMessageContact!) -> IGPGroupSendMessage.Builder {
            self.igpContact = value
            return self
        }
        @discardableResult
        public func mergeIgpContact(value:IGPRoomMessageContact) throws -> IGPGroupSendMessage.Builder {
            if builderResult.hasIgpContact {
                builderResult.igpContact = try IGPRoomMessageContact.builderWithPrototype(prototype:builderResult.igpContact).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpContact = value
            }
            builderResult.hasIgpContact = true
            return self
        }
        @discardableResult
        public func clearIgpContact() -> IGPGroupSendMessage.Builder {
            igpContactBuilder_ = nil
            builderResult.hasIgpContact = false
            builderResult.igpContact = nil
            return self
        }
        public var igpReplyTo:Int64 {
            get {
                return builderResult.igpReplyTo
            }
            set (value) {
                builderResult.hasIgpReplyTo = true
                builderResult.igpReplyTo = value
            }
        }
        public var hasIgpReplyTo:Bool {
            get {
                return builderResult.hasIgpReplyTo
            }
        }
        @discardableResult
        public func setIgpReplyTo(_ value:Int64) -> IGPGroupSendMessage.Builder {
            self.igpReplyTo = value
            return self
        }
        @discardableResult
        public func clearIgpReplyTo() -> IGPGroupSendMessage.Builder{
            builderResult.hasIgpReplyTo = false
            builderResult.igpReplyTo = nil
            return self
        }
        public var igpForwardFrom:IGPRoomMessageForwardFrom! {
            get {
                if igpForwardFromBuilder_ != nil {
                    builderResult.igpForwardFrom = igpForwardFromBuilder_.getMessage()
                }
                return builderResult.igpForwardFrom
            }
            set (value) {
                builderResult.hasIgpForwardFrom = true
                builderResult.igpForwardFrom = value
            }
        }
        public var hasIgpForwardFrom:Bool {
            get {
                return builderResult.hasIgpForwardFrom
            }
        }
        fileprivate var igpForwardFromBuilder_:IGPRoomMessageForwardFrom.Builder! {
            didSet {
                builderResult.hasIgpForwardFrom = true
            }
        }
        public func getIgpForwardFromBuilder() -> IGPRoomMessageForwardFrom.Builder {
            if igpForwardFromBuilder_ == nil {
                igpForwardFromBuilder_ = IGPRoomMessageForwardFrom.Builder()
                builderResult.igpForwardFrom = igpForwardFromBuilder_.getMessage()
                if igpForwardFrom != nil {
                    try! igpForwardFromBuilder_.mergeFrom(other: igpForwardFrom)
                }
            }
            return igpForwardFromBuilder_
        }
        @discardableResult
        public func setIgpForwardFrom(_ value:IGPRoomMessageForwardFrom!) -> IGPGroupSendMessage.Builder {
            self.igpForwardFrom = value
            return self
        }
        @discardableResult
        public func mergeIgpForwardFrom(value:IGPRoomMessageForwardFrom) throws -> IGPGroupSendMessage.Builder {
            if builderResult.hasIgpForwardFrom {
                builderResult.igpForwardFrom = try IGPRoomMessageForwardFrom.builderWithPrototype(prototype:builderResult.igpForwardFrom).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpForwardFrom = value
            }
            builderResult.hasIgpForwardFrom = true
            return self
        }
        @discardableResult
        public func clearIgpForwardFrom() -> IGPGroupSendMessage.Builder {
            igpForwardFromBuilder_ = nil
            builderResult.hasIgpForwardFrom = false
            builderResult.igpForwardFrom = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPGroupSendMessage.Builder {
            builderResult = IGPGroupSendMessage()
            return self
        }
        override public func clone() throws -> IGPGroupSendMessage.Builder {
            return try IGPGroupSendMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPGroupSendMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPGroupSendMessage {
            let returnMe:IGPGroupSendMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPGroupSendMessage) throws -> IGPGroupSendMessage.Builder {
            if other == IGPGroupSendMessage() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpMessageType {
                igpMessageType = other.igpMessageType
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if other.hasIgpMessage {
                igpMessage = other.igpMessage
            }
            if other.hasIgpAttachment {
                igpAttachment = other.igpAttachment
            }
            if (other.hasIgpLocation) {
                try mergeIgpLocation(value: other.igpLocation)
            }
            if (other.hasIgpContact) {
                try mergeIgpContact(value: other.igpContact)
            }
            if other.hasIgpReplyTo {
                igpReplyTo = other.igpReplyTo
            }
            if (other.hasIgpForwardFrom) {
                try mergeIgpForwardFrom(value: other.igpForwardFrom)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSendMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 16:
                    let valueIntigpMessageType = try codedInputStream.readEnum()
                    if let enumsigpMessageType = IGPRoomMessageType(rawValue:valueIntigpMessageType){
                        igpMessageType = enumsigpMessageType
                    } else {
                        try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntigpMessageType))
                    }

                case 24:
                    igpRoomId = try codedInputStream.readInt64()

                case 34:
                    igpMessage = try codedInputStream.readString()

                case 42:
                    igpAttachment = try codedInputStream.readString()

                case 50:
                    let subBuilder:IGPRoomMessageLocation.Builder = IGPRoomMessageLocation.Builder()
                    if hasIgpLocation {
                        try subBuilder.mergeFrom(other: igpLocation)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpLocation = subBuilder.buildPartial()

                case 58:
                    let subBuilder:IGPRoomMessageContact.Builder = IGPRoomMessageContact.Builder()
                    if hasIgpContact {
                        try subBuilder.mergeFrom(other: igpContact)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpContact = subBuilder.buildPartial()

                case 64:
                    igpReplyTo = try codedInputStream.readInt64()

                case 74:
                    let subBuilder:IGPRoomMessageForwardFrom.Builder = IGPRoomMessageForwardFrom.Builder()
                    if hasIgpForwardFrom {
                        try subBuilder.mergeFrom(other: igpForwardFrom)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpForwardFrom = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSendMessage.Builder {
            let resultDecodedBuilder = IGPGroupSendMessage.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpMessageType = jsonMap["IGPMessageType"] as? String {
                resultDecodedBuilder.igpMessageType = try IGPRoomMessageType.fromString(jsonValueIgpMessageType)
            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpMessage = jsonMap["IGPMessage"] as? String {
                resultDecodedBuilder.igpMessage = jsonValueIgpMessage
            }
            if let jsonValueIgpAttachment = jsonMap["IGPAttachment"] as? String {
                resultDecodedBuilder.igpAttachment = jsonValueIgpAttachment
            }
            if let jsonValueIgpLocation = jsonMap["IGPLocation"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpLocation = try IGPRoomMessageLocation.Builder.decodeToBuilder(jsonMap:jsonValueIgpLocation).build()

            }
            if let jsonValueIgpContact = jsonMap["IGPContact"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpContact = try IGPRoomMessageContact.Builder.decodeToBuilder(jsonMap:jsonValueIgpContact).build()

            }
            if let jsonValueIgpReplyTo = jsonMap["IGPReplyTo"] as? String {
                resultDecodedBuilder.igpReplyTo = Int64(jsonValueIgpReplyTo)!
            } else if let jsonValueIgpReplyTo = jsonMap["IGPReplyTo"] as? Int {
                resultDecodedBuilder.igpReplyTo = Int64(jsonValueIgpReplyTo)
            }
            if let jsonValueIgpForwardFrom = jsonMap["IGPForwardFrom"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpForwardFrom = try IGPRoomMessageForwardFrom.Builder.decodeToBuilder(jsonMap:jsonValueIgpForwardFrom).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupSendMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPGroupSendMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPGroupSendMessageResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPGroupSendMessageResponse.Builder

    public static func == (lhs: IGPGroupSendMessageResponse, rhs: IGPGroupSendMessageResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
        fieldCheck = fieldCheck && (lhs.hasIgpRoomMessage == rhs.hasIgpRoomMessage) && (!lhs.hasIgpRoomMessage || lhs.igpRoomMessage == rhs.igpRoomMessage)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRoomId:Int64! = nil
    public fileprivate(set) var hasIgpRoomId:Bool = false

    public fileprivate(set) var igpRoomMessage:IGPRoomMessage!
    public fileprivate(set) var hasIgpRoomMessage:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpRoomId {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
        }
        if hasIgpRoomMessage {
            try codedOutputStream.writeMessage(fieldNumber: 3, value:igpRoomMessage)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpRoomId {
            serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
        }
        if hasIgpRoomMessage {
            if let varSizeigpRoomMessage = igpRoomMessage?.computeMessageSize(fieldNumber: 3) {
                serialize_size += varSizeigpRoomMessage
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPGroupSendMessageResponse.Builder {
        return IGPGroupSendMessageResponse.classBuilder() as! IGPGroupSendMessageResponse.Builder
    }
    public func getBuilder() -> IGPGroupSendMessageResponse.Builder {
        return classBuilder() as! IGPGroupSendMessageResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSendMessageResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPGroupSendMessageResponse.Builder()
    }
    public func toBuilder() throws -> IGPGroupSendMessageResponse.Builder {
        return try IGPGroupSendMessageResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPGroupSendMessageResponse) throws -> IGPGroupSendMessageResponse.Builder {
        return try IGPGroupSendMessageResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpRoomId {
            jsonMap["IGPRoomId"] = "\(igpRoomId!)"
        }
        if hasIgpRoomMessage {
            jsonMap["IGPRoomMessage"] = try igpRoomMessage.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpRoomId {
            output += "\(indent) igpRoomId: \(igpRoomId) \n"
        }
        if hasIgpRoomMessage {
            output += "\(indent) igpRoomMessage {\n"
            if let outDescIgpRoomMessage = igpRoomMessage {
                output += try outDescIgpRoomMessage.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpRoomId {
                hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
            }
            if hasIgpRoomMessage {
                if let hashValueigpRoomMessage = igpRoomMessage?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRoomMessage
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPGroupSendMessageResponse"
    }
    override public func className() -> String {
        return "IGPGroupSendMessageResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPGroupSendMessageResponse = IGPGroupSendMessageResponse()
        public func getMessage() -> IGPGroupSendMessageResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPGroupSendMessageResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPGroupSendMessageResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPGroupSendMessageResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpRoomId:Int64 {
            get {
                return builderResult.igpRoomId
            }
            set (value) {
                builderResult.hasIgpRoomId = true
                builderResult.igpRoomId = value
            }
        }
        public var hasIgpRoomId:Bool {
            get {
                return builderResult.hasIgpRoomId
            }
        }
        @discardableResult
        public func setIgpRoomId(_ value:Int64) -> IGPGroupSendMessageResponse.Builder {
            self.igpRoomId = value
            return self
        }
        @discardableResult
        public func clearIgpRoomId() -> IGPGroupSendMessageResponse.Builder{
            builderResult.hasIgpRoomId = false
            builderResult.igpRoomId = nil
            return self
        }
        public var igpRoomMessage:IGPRoomMessage! {
            get {
                if igpRoomMessageBuilder_ != nil {
                    builderResult.igpRoomMessage = igpRoomMessageBuilder_.getMessage()
                }
                return builderResult.igpRoomMessage
            }
            set (value) {
                builderResult.hasIgpRoomMessage = true
                builderResult.igpRoomMessage = value
            }
        }
        public var hasIgpRoomMessage:Bool {
            get {
                return builderResult.hasIgpRoomMessage
            }
        }
        fileprivate var igpRoomMessageBuilder_:IGPRoomMessage.Builder! {
            didSet {
                builderResult.hasIgpRoomMessage = true
            }
        }
        public func getIgpRoomMessageBuilder() -> IGPRoomMessage.Builder {
            if igpRoomMessageBuilder_ == nil {
                igpRoomMessageBuilder_ = IGPRoomMessage.Builder()
                builderResult.igpRoomMessage = igpRoomMessageBuilder_.getMessage()
                if igpRoomMessage != nil {
                    try! igpRoomMessageBuilder_.mergeFrom(other: igpRoomMessage)
                }
            }
            return igpRoomMessageBuilder_
        }
        @discardableResult
        public func setIgpRoomMessage(_ value:IGPRoomMessage!) -> IGPGroupSendMessageResponse.Builder {
            self.igpRoomMessage = value
            return self
        }
        @discardableResult
        public func mergeIgpRoomMessage(value:IGPRoomMessage) throws -> IGPGroupSendMessageResponse.Builder {
            if builderResult.hasIgpRoomMessage {
                builderResult.igpRoomMessage = try IGPRoomMessage.builderWithPrototype(prototype:builderResult.igpRoomMessage).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRoomMessage = value
            }
            builderResult.hasIgpRoomMessage = true
            return self
        }
        @discardableResult
        public func clearIgpRoomMessage() -> IGPGroupSendMessageResponse.Builder {
            igpRoomMessageBuilder_ = nil
            builderResult.hasIgpRoomMessage = false
            builderResult.igpRoomMessage = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPGroupSendMessageResponse.Builder {
            builderResult = IGPGroupSendMessageResponse()
            return self
        }
        override public func clone() throws -> IGPGroupSendMessageResponse.Builder {
            return try IGPGroupSendMessageResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPGroupSendMessageResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPGroupSendMessageResponse {
            let returnMe:IGPGroupSendMessageResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPGroupSendMessageResponse) throws -> IGPGroupSendMessageResponse.Builder {
            if other == IGPGroupSendMessageResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpRoomId {
                igpRoomId = other.igpRoomId
            }
            if (other.hasIgpRoomMessage) {
                try mergeIgpRoomMessage(value: other.igpRoomMessage)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSendMessageResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessageResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 16:
                    igpRoomId = try codedInputStream.readInt64()

                case 26:
                    let subBuilder:IGPRoomMessage.Builder = IGPRoomMessage.Builder()
                    if hasIgpRoomMessage {
                        try subBuilder.mergeFrom(other: igpRoomMessage)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRoomMessage = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPGroupSendMessageResponse.Builder {
            let resultDecodedBuilder = IGPGroupSendMessageResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
            } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
            }
            if let jsonValueIgpRoomMessage = jsonMap["IGPRoomMessage"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRoomMessage = try IGPRoomMessage.Builder.decodeToBuilder(jsonMap:jsonValueIgpRoomMessage).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPGroupSendMessageResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPGroupSendMessageResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPGroupSendMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupSendMessage> {
        var mergedArray = Array<IGPGroupSendMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupSendMessage? {
        return try IGPGroupSendMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder().mergeFrom(data: data, extensionRegistry:GroupSendMessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessage {
        return try IGPGroupSendMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpMessageType": return self.igpMessageType
        case "igpRoomId": return self.igpRoomId
        case "igpMessage": return self.igpMessage
        case "igpAttachment": return self.igpAttachment
        case "igpLocation": return self.igpLocation
        case "igpContact": return self.igpContact
        case "igpReplyTo": return self.igpReplyTo
        case "igpForwardFrom": return self.igpForwardFrom
        default: return nil
        }
    }
}
extension IGPGroupSendMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPGroupSendMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpMessageType": return self.igpMessageType
            case "igpRoomId": return self.igpRoomId
            case "igpMessage": return self.igpMessage
            case "igpAttachment": return self.igpAttachment
            case "igpLocation": return self.igpLocation
            case "igpContact": return self.igpContact
            case "igpReplyTo": return self.igpReplyTo
            case "igpForwardFrom": return self.igpForwardFrom
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpMessageType":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageType else {
                    return
                }
                self.igpMessageType = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpMessage":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpMessage = newSubscriptValue
            case "igpAttachment":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpAttachment = newSubscriptValue
            case "igpLocation":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageLocation else {
                    return
                }
                self.igpLocation = newSubscriptValue
            case "igpContact":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageContact else {
                    return
                }
                self.igpContact = newSubscriptValue
            case "igpReplyTo":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpReplyTo = newSubscriptValue
            case "igpForwardFrom":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessageForwardFrom else {
                    return
                }
                self.igpForwardFrom = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPGroupSendMessageResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPGroupSendMessageResponse> {
        var mergedArray = Array<IGPGroupSendMessageResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPGroupSendMessageResponse? {
        return try IGPGroupSendMessageResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder().mergeFrom(data: data, extensionRegistry:GroupSendMessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPGroupSendMessageResponse {
        return try IGPGroupSendMessageResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpRoomId": return self.igpRoomId
        case "igpRoomMessage": return self.igpRoomMessage
        default: return nil
        }
    }
}
extension IGPGroupSendMessageResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPGroupSendMessageResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpRoomId": return self.igpRoomId
            case "igpRoomMessage": return self.igpRoomMessage
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpRoomMessage":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoomMessage else {
                    return
                }
                self.igpRoomMessage = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
