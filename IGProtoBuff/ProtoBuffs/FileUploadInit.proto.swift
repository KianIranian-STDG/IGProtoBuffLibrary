/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "FileUploadInit.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct FileUploadInitRoot {
    public static let `default` = FileUploadInitRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPFileUploadInit : GeneratedMessage {

    public static func == (lhs: IGPFileUploadInit, rhs: IGPFileUploadInit) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpFirstBytes == rhs.hasIgpFirstBytes) && (!lhs.hasIgpFirstBytes || lhs.igpFirstBytes == rhs.igpFirstBytes)
        fieldCheck = fieldCheck && (lhs.hasIgpLastBytes == rhs.hasIgpLastBytes) && (!lhs.hasIgpLastBytes || lhs.igpLastBytes == rhs.igpLastBytes)
        fieldCheck = fieldCheck && (lhs.hasIgpSize == rhs.hasIgpSize) && (!lhs.hasIgpSize || lhs.igpSize == rhs.igpSize)
        fieldCheck = fieldCheck && (lhs.hasIgpFileHash == rhs.hasIgpFileHash) && (!lhs.hasIgpFileHash || lhs.igpFileHash == rhs.igpFileHash)
        fieldCheck = fieldCheck && (lhs.hasIgpFileName == rhs.hasIgpFileName) && (!lhs.hasIgpFileName || lhs.igpFileName == rhs.igpFileName)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpFirstBytes:Data = Data()
    public fileprivate(set) var hasIgpFirstBytes:Bool = false

    public fileprivate(set) var igpLastBytes:Data = Data()
    public fileprivate(set) var hasIgpLastBytes:Bool = false

    public fileprivate(set) var igpSize:Int64 = Int64(0)
    public fileprivate(set) var hasIgpSize:Bool = false

    public fileprivate(set) var igpFileHash:Data = Data()
    public fileprivate(set) var hasIgpFileHash:Bool = false

    public fileprivate(set) var igpFileName:String = ""
    public fileprivate(set) var hasIgpFileName:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpFirstBytes {
            try codedOutputStream.writeData(fieldNumber: 2, value:igpFirstBytes)
        }
        if hasIgpLastBytes {
            try codedOutputStream.writeData(fieldNumber: 3, value:igpLastBytes)
        }
        if hasIgpSize {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:igpSize)
        }
        if hasIgpFileHash {
            try codedOutputStream.writeData(fieldNumber: 5, value:igpFileHash)
        }
        if hasIgpFileName {
            try codedOutputStream.writeString(fieldNumber: 6, value:igpFileName)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpFirstBytes {
            serialize_size += igpFirstBytes.computeDataSize(fieldNumber: 2)
        }
        if hasIgpLastBytes {
            serialize_size += igpLastBytes.computeDataSize(fieldNumber: 3)
        }
        if hasIgpSize {
            serialize_size += igpSize.computeInt64Size(fieldNumber: 4)
        }
        if hasIgpFileHash {
            serialize_size += igpFileHash.computeDataSize(fieldNumber: 5)
        }
        if hasIgpFileName {
            serialize_size += igpFileName.computeStringSize(fieldNumber: 6)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPFileUploadInit.Builder {
        return IGPFileUploadInit.classBuilder() as! IGPFileUploadInit.Builder
    }
    public func getBuilder() -> IGPFileUploadInit.Builder {
        return classBuilder() as! IGPFileUploadInit.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPFileUploadInit.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPFileUploadInit.Builder()
    }
    public func toBuilder() throws -> IGPFileUploadInit.Builder {
        return try IGPFileUploadInit.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPFileUploadInit) throws -> IGPFileUploadInit.Builder {
        return try IGPFileUploadInit.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpFirstBytes {
            jsonMap["IGPFirstBytes"] = igpFirstBytes.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasIgpLastBytes {
            jsonMap["IGPLastBytes"] = igpLastBytes.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasIgpSize {
            jsonMap["IGPSize"] = "\(igpSize)"
        }
        if hasIgpFileHash {
            jsonMap["IGPFileHash"] = igpFileHash.base64EncodedString(options: Data.Base64EncodingOptions(rawValue: 0))
        }
        if hasIgpFileName {
            jsonMap["IGPFileName"] = igpFileName
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpFirstBytes {
            output += "\(indent) igpFirstBytes: \(igpFirstBytes) \n"
        }
        if hasIgpLastBytes {
            output += "\(indent) igpLastBytes: \(igpLastBytes) \n"
        }
        if hasIgpSize {
            output += "\(indent) igpSize: \(igpSize) \n"
        }
        if hasIgpFileHash {
            output += "\(indent) igpFileHash: \(igpFileHash) \n"
        }
        if hasIgpFileName {
            output += "\(indent) igpFileName: \(igpFileName) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpFirstBytes {
                hashCode = (hashCode &* 31) &+ igpFirstBytes.hashValue
            }
            if hasIgpLastBytes {
                hashCode = (hashCode &* 31) &+ igpLastBytes.hashValue
            }
            if hasIgpSize {
                hashCode = (hashCode &* 31) &+ igpSize.hashValue
            }
            if hasIgpFileHash {
                hashCode = (hashCode &* 31) &+ igpFileHash.hashValue
            }
            if hasIgpFileName {
                hashCode = (hashCode &* 31) &+ igpFileName.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPFileUploadInit"
    }
    override public func className() -> String {
        return "IGPFileUploadInit"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPFileUploadInit = IGPFileUploadInit()
        public func getMessage() -> IGPFileUploadInit {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPFileUploadInit.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPFileUploadInit.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPFileUploadInit.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpFirstBytes:Data {
            get {
                return builderResult.igpFirstBytes
            }
            set (value) {
                builderResult.hasIgpFirstBytes = true
                builderResult.igpFirstBytes = value
            }
        }
        public var hasIgpFirstBytes:Bool {
            get {
                return builderResult.hasIgpFirstBytes
            }
        }
        @discardableResult
        public func setIgpFirstBytes(_ value:Data) -> IGPFileUploadInit.Builder {
            self.igpFirstBytes = value
            return self
        }
        @discardableResult
        public func clearIgpFirstBytes() -> IGPFileUploadInit.Builder{
            builderResult.hasIgpFirstBytes = false
            builderResult.igpFirstBytes = Data()
            return self
        }
        public var igpLastBytes:Data {
            get {
                return builderResult.igpLastBytes
            }
            set (value) {
                builderResult.hasIgpLastBytes = true
                builderResult.igpLastBytes = value
            }
        }
        public var hasIgpLastBytes:Bool {
            get {
                return builderResult.hasIgpLastBytes
            }
        }
        @discardableResult
        public func setIgpLastBytes(_ value:Data) -> IGPFileUploadInit.Builder {
            self.igpLastBytes = value
            return self
        }
        @discardableResult
        public func clearIgpLastBytes() -> IGPFileUploadInit.Builder{
            builderResult.hasIgpLastBytes = false
            builderResult.igpLastBytes = Data()
            return self
        }
        public var igpSize:Int64 {
            get {
                return builderResult.igpSize
            }
            set (value) {
                builderResult.hasIgpSize = true
                builderResult.igpSize = value
            }
        }
        public var hasIgpSize:Bool {
            get {
                return builderResult.hasIgpSize
            }
        }
        @discardableResult
        public func setIgpSize(_ value:Int64) -> IGPFileUploadInit.Builder {
            self.igpSize = value
            return self
        }
        @discardableResult
        public func clearIgpSize() -> IGPFileUploadInit.Builder{
            builderResult.hasIgpSize = false
            builderResult.igpSize = Int64(0)
            return self
        }
        public var igpFileHash:Data {
            get {
                return builderResult.igpFileHash
            }
            set (value) {
                builderResult.hasIgpFileHash = true
                builderResult.igpFileHash = value
            }
        }
        public var hasIgpFileHash:Bool {
            get {
                return builderResult.hasIgpFileHash
            }
        }
        @discardableResult
        public func setIgpFileHash(_ value:Data) -> IGPFileUploadInit.Builder {
            self.igpFileHash = value
            return self
        }
        @discardableResult
        public func clearIgpFileHash() -> IGPFileUploadInit.Builder{
            builderResult.hasIgpFileHash = false
            builderResult.igpFileHash = Data()
            return self
        }
        public var igpFileName:String {
            get {
                return builderResult.igpFileName
            }
            set (value) {
                builderResult.hasIgpFileName = true
                builderResult.igpFileName = value
            }
        }
        public var hasIgpFileName:Bool {
            get {
                return builderResult.hasIgpFileName
            }
        }
        @discardableResult
        public func setIgpFileName(_ value:String) -> IGPFileUploadInit.Builder {
            self.igpFileName = value
            return self
        }
        @discardableResult
        public func clearIgpFileName() -> IGPFileUploadInit.Builder{
            builderResult.hasIgpFileName = false
            builderResult.igpFileName = ""
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPFileUploadInit.Builder {
            builderResult = IGPFileUploadInit()
            return self
        }
        override public func clone() throws -> IGPFileUploadInit.Builder {
            return try IGPFileUploadInit.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPFileUploadInit {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPFileUploadInit {
            let returnMe:IGPFileUploadInit = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPFileUploadInit) throws -> IGPFileUploadInit.Builder {
            if other == IGPFileUploadInit() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpFirstBytes {
                igpFirstBytes = other.igpFirstBytes
            }
            if other.hasIgpLastBytes {
                igpLastBytes = other.igpLastBytes
            }
            if other.hasIgpSize {
                igpSize = other.igpSize
            }
            if other.hasIgpFileHash {
                igpFileHash = other.igpFileHash
            }
            if other.hasIgpFileName {
                igpFileName = other.igpFileName
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPFileUploadInit.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInit.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    igpFirstBytes = try codedInputStream.readData()

                case 26:
                    igpLastBytes = try codedInputStream.readData()

                case 32:
                    igpSize = try codedInputStream.readInt64()

                case 42:
                    igpFileHash = try codedInputStream.readData()

                case 50:
                    igpFileName = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPFileUploadInit.Builder {
            let resultDecodedBuilder = IGPFileUploadInit.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpFirstBytes = jsonMap["IGPFirstBytes"] as? String {
                resultDecodedBuilder.igpFirstBytes = Data(base64Encoded:jsonValueIgpFirstBytes, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueIgpLastBytes = jsonMap["IGPLastBytes"] as? String {
                resultDecodedBuilder.igpLastBytes = Data(base64Encoded:jsonValueIgpLastBytes, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueIgpSize = jsonMap["IGPSize"] as? String {
                resultDecodedBuilder.igpSize = Int64(jsonValueIgpSize)!
            } else if let jsonValueIgpSize = jsonMap["IGPSize"] as? Int {
                resultDecodedBuilder.igpSize = Int64(jsonValueIgpSize)
            }
            if let jsonValueIgpFileHash = jsonMap["IGPFileHash"] as? String {
                resultDecodedBuilder.igpFileHash = Data(base64Encoded:jsonValueIgpFileHash, options: Data.Base64DecodingOptions(rawValue:0))!
            }
            if let jsonValueIgpFileName = jsonMap["IGPFileName"] as? String {
                resultDecodedBuilder.igpFileName = jsonValueIgpFileName
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPFileUploadInit.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPFileUploadInit.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPFileUploadInitResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPFileUploadInitResponse, rhs: IGPFileUploadInitResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.hasIgpToken == rhs.hasIgpToken) && (!lhs.hasIgpToken || lhs.igpToken == rhs.igpToken)
        fieldCheck = fieldCheck && (lhs.hasIgpProgress == rhs.hasIgpProgress) && (!lhs.hasIgpProgress || lhs.igpProgress == rhs.igpProgress)
        fieldCheck = fieldCheck && (lhs.hasIgpOffset == rhs.hasIgpOffset) && (!lhs.hasIgpOffset || lhs.igpOffset == rhs.igpOffset)
        fieldCheck = fieldCheck && (lhs.hasIgpLimit == rhs.hasIgpLimit) && (!lhs.hasIgpLimit || lhs.igpLimit == rhs.igpLimit)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpToken:String = ""
    public fileprivate(set) var hasIgpToken:Bool = false

    public fileprivate(set) var igpProgress:Double = Double(0)
    public fileprivate(set) var hasIgpProgress:Bool = false

    public fileprivate(set) var igpOffset:Int64 = Int64(0)
    public fileprivate(set) var hasIgpOffset:Bool = false

    public fileprivate(set) var igpLimit:Int32 = Int32(0)
    public fileprivate(set) var hasIgpLimit:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        if hasIgpToken {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpToken)
        }
        if hasIgpProgress {
            try codedOutputStream.writeDouble(fieldNumber: 3, value:igpProgress)
        }
        if hasIgpOffset {
            try codedOutputStream.writeInt64(fieldNumber: 4, value:igpOffset)
        }
        if hasIgpLimit {
            try codedOutputStream.writeInt32(fieldNumber: 5, value:igpLimit)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        if hasIgpToken {
            serialize_size += igpToken.computeStringSize(fieldNumber: 2)
        }
        if hasIgpProgress {
            serialize_size += igpProgress.computeDoubleSize(fieldNumber: 3)
        }
        if hasIgpOffset {
            serialize_size += igpOffset.computeInt64Size(fieldNumber: 4)
        }
        if hasIgpLimit {
            serialize_size += igpLimit.computeInt32Size(fieldNumber: 5)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPFileUploadInitResponse.Builder {
        return IGPFileUploadInitResponse.classBuilder() as! IGPFileUploadInitResponse.Builder
    }
    public func getBuilder() -> IGPFileUploadInitResponse.Builder {
        return classBuilder() as! IGPFileUploadInitResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPFileUploadInitResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPFileUploadInitResponse.Builder()
    }
    public func toBuilder() throws -> IGPFileUploadInitResponse.Builder {
        return try IGPFileUploadInitResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPFileUploadInitResponse) throws -> IGPFileUploadInitResponse.Builder {
        return try IGPFileUploadInitResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if hasIgpToken {
            jsonMap["IGPToken"] = igpToken
        }
        if hasIgpProgress {
            jsonMap["IGPProgress"] = Double(igpProgress)
        }
        if hasIgpOffset {
            jsonMap["IGPOffset"] = "\(igpOffset)"
        }
        if hasIgpLimit {
            jsonMap["IGPLimit"] = Int(igpLimit)
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpToken {
            output += "\(indent) igpToken: \(igpToken) \n"
        }
        if hasIgpProgress {
            output += "\(indent) igpProgress: \(igpProgress) \n"
        }
        if hasIgpOffset {
            output += "\(indent) igpOffset: \(igpOffset) \n"
        }
        if hasIgpLimit {
            output += "\(indent) igpLimit: \(igpLimit) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            if hasIgpToken {
                hashCode = (hashCode &* 31) &+ igpToken.hashValue
            }
            if hasIgpProgress {
                hashCode = (hashCode &* 31) &+ igpProgress.hashValue
            }
            if hasIgpOffset {
                hashCode = (hashCode &* 31) &+ igpOffset.hashValue
            }
            if hasIgpLimit {
                hashCode = (hashCode &* 31) &+ igpLimit.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPFileUploadInitResponse"
    }
    override public func className() -> String {
        return "IGPFileUploadInitResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPFileUploadInitResponse = IGPFileUploadInitResponse()
        public func getMessage() -> IGPFileUploadInitResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPFileUploadInitResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPFileUploadInitResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPFileUploadInitResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpToken:String {
            get {
                return builderResult.igpToken
            }
            set (value) {
                builderResult.hasIgpToken = true
                builderResult.igpToken = value
            }
        }
        public var hasIgpToken:Bool {
            get {
                return builderResult.hasIgpToken
            }
        }
        @discardableResult
        public func setIgpToken(_ value:String) -> IGPFileUploadInitResponse.Builder {
            self.igpToken = value
            return self
        }
        @discardableResult
        public func clearIgpToken() -> IGPFileUploadInitResponse.Builder{
            builderResult.hasIgpToken = false
            builderResult.igpToken = ""
            return self
        }
        public var igpProgress:Double {
            get {
                return builderResult.igpProgress
            }
            set (value) {
                builderResult.hasIgpProgress = true
                builderResult.igpProgress = value
            }
        }
        public var hasIgpProgress:Bool {
            get {
                return builderResult.hasIgpProgress
            }
        }
        @discardableResult
        public func setIgpProgress(_ value:Double) -> IGPFileUploadInitResponse.Builder {
            self.igpProgress = value
            return self
        }
        @discardableResult
        public func clearIgpProgress() -> IGPFileUploadInitResponse.Builder{
            builderResult.hasIgpProgress = false
            builderResult.igpProgress = Double(0)
            return self
        }
        public var igpOffset:Int64 {
            get {
                return builderResult.igpOffset
            }
            set (value) {
                builderResult.hasIgpOffset = true
                builderResult.igpOffset = value
            }
        }
        public var hasIgpOffset:Bool {
            get {
                return builderResult.hasIgpOffset
            }
        }
        @discardableResult
        public func setIgpOffset(_ value:Int64) -> IGPFileUploadInitResponse.Builder {
            self.igpOffset = value
            return self
        }
        @discardableResult
        public func clearIgpOffset() -> IGPFileUploadInitResponse.Builder{
            builderResult.hasIgpOffset = false
            builderResult.igpOffset = Int64(0)
            return self
        }
        public var igpLimit:Int32 {
            get {
                return builderResult.igpLimit
            }
            set (value) {
                builderResult.hasIgpLimit = true
                builderResult.igpLimit = value
            }
        }
        public var hasIgpLimit:Bool {
            get {
                return builderResult.hasIgpLimit
            }
        }
        @discardableResult
        public func setIgpLimit(_ value:Int32) -> IGPFileUploadInitResponse.Builder {
            self.igpLimit = value
            return self
        }
        @discardableResult
        public func clearIgpLimit() -> IGPFileUploadInitResponse.Builder{
            builderResult.hasIgpLimit = false
            builderResult.igpLimit = Int32(0)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPFileUploadInitResponse.Builder {
            builderResult = IGPFileUploadInitResponse()
            return self
        }
        override public func clone() throws -> IGPFileUploadInitResponse.Builder {
            return try IGPFileUploadInitResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPFileUploadInitResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPFileUploadInitResponse {
            let returnMe:IGPFileUploadInitResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPFileUploadInitResponse) throws -> IGPFileUploadInitResponse.Builder {
            if other == IGPFileUploadInitResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if other.hasIgpToken {
                igpToken = other.igpToken
            }
            if other.hasIgpProgress {
                igpProgress = other.igpProgress
            }
            if other.hasIgpOffset {
                igpOffset = other.igpOffset
            }
            if other.hasIgpLimit {
                igpLimit = other.igpLimit
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPFileUploadInitResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInitResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    igpToken = try codedInputStream.readString()

                case 25:
                    igpProgress = try codedInputStream.readDouble()

                case 32:
                    igpOffset = try codedInputStream.readInt64()

                case 40:
                    igpLimit = try codedInputStream.readInt32()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPFileUploadInitResponse.Builder {
            let resultDecodedBuilder = IGPFileUploadInitResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpToken = jsonMap["IGPToken"] as? String {
                resultDecodedBuilder.igpToken = jsonValueIgpToken
            }
            if let jsonValueIgpProgress = jsonMap["IGPProgress"] as? Double {
                resultDecodedBuilder.igpProgress = Double(jsonValueIgpProgress)
            } else if let jsonValueIgpProgress = jsonMap["IGPProgress"] as? String {
                resultDecodedBuilder.igpProgress = Double(jsonValueIgpProgress)!
            }
            if let jsonValueIgpOffset = jsonMap["IGPOffset"] as? String {
                resultDecodedBuilder.igpOffset = Int64(jsonValueIgpOffset)!
            } else if let jsonValueIgpOffset = jsonMap["IGPOffset"] as? Int {
                resultDecodedBuilder.igpOffset = Int64(jsonValueIgpOffset)
            }
            if let jsonValueIgpLimit = jsonMap["IGPLimit"] as? Int {
                resultDecodedBuilder.igpLimit = Int32(jsonValueIgpLimit)
            } else if let jsonValueIgpLimit = jsonMap["IGPLimit"] as? String {
                resultDecodedBuilder.igpLimit = Int32(jsonValueIgpLimit)!
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPFileUploadInitResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPFileUploadInitResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPFileUploadInit: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPFileUploadInit> {
        var mergedArray = Array<IGPFileUploadInit>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPFileUploadInit? {
        return try IGPFileUploadInit.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder().mergeFrom(data: data, extensionRegistry:FileUploadInitRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInit {
        return try IGPFileUploadInit.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpFirstBytes": return self.igpFirstBytes
        case "igpLastBytes": return self.igpLastBytes
        case "igpSize": return self.igpSize
        case "igpFileHash": return self.igpFileHash
        case "igpFileName": return self.igpFileName
        default: return nil
        }
    }
}
extension IGPFileUploadInit.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpFirstBytes": return self.igpFirstBytes
            case "igpLastBytes": return self.igpLastBytes
            case "igpSize": return self.igpSize
            case "igpFileHash": return self.igpFileHash
            case "igpFileName": return self.igpFileName
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpFirstBytes":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.igpFirstBytes = newSubscriptValue
            case "igpLastBytes":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.igpLastBytes = newSubscriptValue
            case "igpSize":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpSize = newSubscriptValue
            case "igpFileHash":
                guard let newSubscriptValue = newSubscriptValue as? Data else {
                    return
                }
                self.igpFileHash = newSubscriptValue
            case "igpFileName":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpFileName = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPFileUploadInitResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPFileUploadInitResponse> {
        var mergedArray = Array<IGPFileUploadInitResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPFileUploadInitResponse? {
        return try IGPFileUploadInitResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder().mergeFrom(data: data, extensionRegistry:FileUploadInitRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPFileUploadInitResponse {
        return try IGPFileUploadInitResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpToken": return self.igpToken
        case "igpProgress": return self.igpProgress
        case "igpOffset": return self.igpOffset
        case "igpLimit": return self.igpLimit
        default: return nil
        }
    }
}
extension IGPFileUploadInitResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpToken": return self.igpToken
            case "igpProgress": return self.igpProgress
            case "igpOffset": return self.igpOffset
            case "igpLimit": return self.igpLimit
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpToken":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpToken = newSubscriptValue
            case "igpProgress":
                guard let newSubscriptValue = newSubscriptValue as? Double else {
                    return
                }
                self.igpProgress = newSubscriptValue
            case "igpOffset":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpOffset = newSubscriptValue
            case "igpLimit":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpLimit = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
