/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "SignalingGetLog.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct SignalingGetLogRoot {
    public static let `default` = SignalingGetLogRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
        SignalingOfferRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPSignalingGetLog : GeneratedMessage {
    public typealias BuilderType = IGPSignalingGetLog.Builder

    public static func == (lhs: IGPSignalingGetLog, rhs: IGPSignalingGetLog) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpPagination == rhs.hasIgpPagination) && (!lhs.hasIgpPagination || lhs.igpPagination == rhs.igpPagination)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpPagination:IGPPagination!
    public fileprivate(set) var hasIgpPagination:Bool = false
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpPagination {
            try codedOutputStream.writeMessage(fieldNumber: 2, value:igpPagination)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpPagination {
            if let varSizeigpPagination = igpPagination?.computeMessageSize(fieldNumber: 2) {
                serialize_size += varSizeigpPagination
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingGetLog.Builder {
        return IGPSignalingGetLog.classBuilder() as! IGPSignalingGetLog.Builder
    }
    public func getBuilder() -> IGPSignalingGetLog.Builder {
        return classBuilder() as! IGPSignalingGetLog.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetLog.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetLog.Builder()
    }
    public func toBuilder() throws -> IGPSignalingGetLog.Builder {
        return try IGPSignalingGetLog.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingGetLog) throws -> IGPSignalingGetLog.Builder {
        return try IGPSignalingGetLog.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpPagination {
            jsonMap["IGPPagination"] = try igpPagination.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpPagination {
            output += "\(indent) igpPagination {\n"
            if let outDescIgpPagination = igpPagination {
                output += try outDescIgpPagination.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpPagination {
                if let hashValueigpPagination = igpPagination?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpPagination
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingGetLog"
    }
    override public func className() -> String {
        return "IGPSignalingGetLog"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPSignalingGetLog = IGPSignalingGetLog()
        public func getMessage() -> IGPSignalingGetLog {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPSignalingGetLog.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPSignalingGetLog.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPSignalingGetLog.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpPagination:IGPPagination! {
            get {
                if igpPaginationBuilder_ != nil {
                    builderResult.igpPagination = igpPaginationBuilder_.getMessage()
                }
                return builderResult.igpPagination
            }
            set (value) {
                builderResult.hasIgpPagination = true
                builderResult.igpPagination = value
            }
        }
        public var hasIgpPagination:Bool {
            get {
                return builderResult.hasIgpPagination
            }
        }
        fileprivate var igpPaginationBuilder_:IGPPagination.Builder! {
            didSet {
                builderResult.hasIgpPagination = true
            }
        }
        public func getIgpPaginationBuilder() -> IGPPagination.Builder {
            if igpPaginationBuilder_ == nil {
                igpPaginationBuilder_ = IGPPagination.Builder()
                builderResult.igpPagination = igpPaginationBuilder_.getMessage()
                if igpPagination != nil {
                    try! igpPaginationBuilder_.mergeFrom(other: igpPagination)
                }
            }
            return igpPaginationBuilder_
        }
        @discardableResult
        public func setIgpPagination(_ value:IGPPagination!) -> IGPSignalingGetLog.Builder {
            self.igpPagination = value
            return self
        }
        @discardableResult
        public func mergeIgpPagination(value:IGPPagination) throws -> IGPSignalingGetLog.Builder {
            if builderResult.hasIgpPagination {
                builderResult.igpPagination = try IGPPagination.builderWithPrototype(prototype:builderResult.igpPagination).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpPagination = value
            }
            builderResult.hasIgpPagination = true
            return self
        }
        @discardableResult
        public func clearIgpPagination() -> IGPSignalingGetLog.Builder {
            igpPaginationBuilder_ = nil
            builderResult.hasIgpPagination = false
            builderResult.igpPagination = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingGetLog.Builder {
            builderResult = IGPSignalingGetLog()
            return self
        }
        override public func clone() throws -> IGPSignalingGetLog.Builder {
            return try IGPSignalingGetLog.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingGetLog {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingGetLog {
            let returnMe:IGPSignalingGetLog = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingGetLog) throws -> IGPSignalingGetLog.Builder {
            if other == IGPSignalingGetLog() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if (other.hasIgpPagination) {
                try mergeIgpPagination(value: other.igpPagination)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetLog.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLog.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    let subBuilder:IGPPagination.Builder = IGPPagination.Builder()
                    if hasIgpPagination {
                        try subBuilder.mergeFrom(other: igpPagination)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpPagination = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetLog.Builder {
            let resultDecodedBuilder = IGPSignalingGetLog.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpPagination = jsonMap["IGPPagination"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpPagination = try IGPPagination.Builder.decodeToBuilder(jsonMap:jsonValueIgpPagination).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingGetLog.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingGetLog.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPSignalingGetLogResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPSignalingGetLogResponse.Builder

    public static func == (lhs: IGPSignalingGetLogResponse, rhs: IGPSignalingGetLogResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.igpSignalingLog == rhs.igpSignalingLog)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPSignalingLog : GeneratedMessage {
        public typealias BuilderType = IGPSignalingGetLogResponse.IGPSignalingLog.Builder

        public static func == (lhs: IGPSignalingGetLogResponse.IGPSignalingLog, rhs: IGPSignalingGetLogResponse.IGPSignalingLog) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpId == rhs.hasIgpId) && (!lhs.hasIgpId || lhs.igpId == rhs.igpId)
            fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
            fieldCheck = fieldCheck && (lhs.hasIgpStatus == rhs.hasIgpStatus) && (!lhs.hasIgpStatus || lhs.igpStatus == rhs.igpStatus)
            fieldCheck = fieldCheck && (lhs.hasIgpPeer == rhs.hasIgpPeer) && (!lhs.hasIgpPeer || lhs.igpPeer == rhs.igpPeer)
            fieldCheck = fieldCheck && (lhs.hasIgpOfferTime == rhs.hasIgpOfferTime) && (!lhs.hasIgpOfferTime || lhs.igpOfferTime == rhs.igpOfferTime)
            fieldCheck = fieldCheck && (lhs.hasIgpDuration == rhs.hasIgpDuration) && (!lhs.hasIgpDuration || lhs.igpDuration == rhs.igpDuration)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end



            //Enum type declaration start 

            public enum IGPStatus:Int32, GeneratedEnum {
                case missed = 0
                case canceled = 1
                case incoming = 2
                case outgoing = 3
                public func toString() -> String {
                    switch self {
                    case .missed: return "MISSED"
                    case .canceled: return "CANCELED"
                    case .incoming: return "INCOMING"
                    case .outgoing: return "OUTGOING"
                    }
                }
                public static func fromString(_ str:String) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus {
                    switch str {
                    case "MISSED":    return .missed
                    case "CANCELED":    return .canceled
                    case "INCOMING":    return .incoming
                    case "OUTGOING":    return .outgoing
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .missed: return ".missed"
                    case .canceled: return ".canceled"
                    case .incoming: return ".incoming"
                    case .outgoing: return ".outgoing"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:IGPStatus, rhs:IGPStatus) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var igpId:Int64! = nil
        public fileprivate(set) var hasIgpId:Bool = false

        public fileprivate(set) var igpType:IGPSignalingOffer.IGPType = IGPSignalingOffer.IGPType.voiceCalling
        public fileprivate(set) var hasIgpType:Bool = false
        public fileprivate(set) var igpStatus:IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus = IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus.missed
        public fileprivate(set) var hasIgpStatus:Bool = false
        public fileprivate(set) var igpPeer:IGPRegisteredUser!
        public fileprivate(set) var hasIgpPeer:Bool = false
        public fileprivate(set) var igpOfferTime:Int32! = nil
        public fileprivate(set) var hasIgpOfferTime:Bool = false

        public fileprivate(set) var igpDuration:Int32! = nil
        public fileprivate(set) var hasIgpDuration:Bool = false

        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpId {
                try codedOutputStream.writeInt64(fieldNumber: 1, value:igpId)
            }
            if hasIgpType {
                try codedOutputStream.writeEnum(fieldNumber: 2, value:igpType.rawValue)
            }
            if hasIgpStatus {
                try codedOutputStream.writeEnum(fieldNumber: 3, value:igpStatus.rawValue)
            }
            if hasIgpPeer {
                try codedOutputStream.writeMessage(fieldNumber: 4, value:igpPeer)
            }
            if hasIgpOfferTime {
                try codedOutputStream.writeInt32(fieldNumber: 5, value:igpOfferTime)
            }
            if hasIgpDuration {
                try codedOutputStream.writeInt32(fieldNumber: 6, value:igpDuration)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpId {
                serialize_size += igpId.computeInt64Size(fieldNumber: 1)
            }
            if (hasIgpType) {
                serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 2)
            }
            if (hasIgpStatus) {
                serialize_size += igpStatus.rawValue.computeEnumSize(fieldNumber: 3)
            }
            if hasIgpPeer {
                if let varSizeigpPeer = igpPeer?.computeMessageSize(fieldNumber: 4) {
                    serialize_size += varSizeigpPeer
                }
            }
            if hasIgpOfferTime {
                serialize_size += igpOfferTime.computeInt32Size(fieldNumber: 5)
            }
            if hasIgpDuration {
                serialize_size += igpDuration.computeInt32Size(fieldNumber: 6)
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
            return IGPSignalingGetLogResponse.IGPSignalingLog.classBuilder() as! IGPSignalingGetLogResponse.IGPSignalingLog.Builder
        }
        public func getBuilder() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
            return classBuilder() as! IGPSignalingGetLogResponse.IGPSignalingLog.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPSignalingGetLogResponse.IGPSignalingLog.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPSignalingGetLogResponse.IGPSignalingLog.Builder()
        }
        public func toBuilder() throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
            return try IGPSignalingGetLogResponse.IGPSignalingLog.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPSignalingGetLogResponse.IGPSignalingLog) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
            return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpId {
                jsonMap["IGPId"] = "\(igpId!)"
            }
            if hasIgpType {
                jsonMap["IGPType"] = igpType.toString()
            }
            if hasIgpStatus {
                jsonMap["IGPStatus"] = igpStatus.toString()
            }
            if hasIgpPeer {
                jsonMap["IGPPeer"] = try igpPeer.encode()
            }
            if hasIgpOfferTime {
                jsonMap["IGPOfferTime"] = Int(igpOfferTime)
            }
            if hasIgpDuration {
                jsonMap["IGPDuration"] = Int(igpDuration)
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
            return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
            return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpId {
                output += "\(indent) igpId: \(igpId) \n"
            }
            if (hasIgpType) {
                output += "\(indent) igpType: \(igpType.description)\n"
            }
            if (hasIgpStatus) {
                output += "\(indent) igpStatus: \(igpStatus.description)\n"
            }
            if hasIgpPeer {
                output += "\(indent) igpPeer {\n"
                if let outDescIgpPeer = igpPeer {
                    output += try outDescIgpPeer.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasIgpOfferTime {
                output += "\(indent) igpOfferTime: \(igpOfferTime) \n"
            }
            if hasIgpDuration {
                output += "\(indent) igpDuration: \(igpDuration) \n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpId {
                    hashCode = (hashCode &* 31) &+ igpId.hashValue
                }
                if hasIgpType {
                     hashCode = (hashCode &* 31) &+ igpType.hashValue
                }
                if hasIgpStatus {
                     hashCode = (hashCode &* 31) &+ igpStatus.hashValue
                }
                if hasIgpPeer {
                    if let hashValueigpPeer = igpPeer?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueigpPeer
                    }
                }
                if hasIgpOfferTime {
                    hashCode = (hashCode &* 31) &+ igpOfferTime.hashValue
                }
                if hasIgpDuration {
                    hashCode = (hashCode &* 31) &+ igpDuration.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPSignalingGetLogResponse.IGPSignalingLog"
        }
        override public func className() -> String {
            return "IGPSignalingGetLogResponse.IGPSignalingLog"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPSignalingGetLogResponse.IGPSignalingLog = IGPSignalingGetLogResponse.IGPSignalingLog()
            public func getMessage() -> IGPSignalingGetLogResponse.IGPSignalingLog {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpId:Int64 {
                get {
                    return builderResult.igpId
                }
                set (value) {
                    builderResult.hasIgpId = true
                    builderResult.igpId = value
                }
            }
            public var hasIgpId:Bool {
                get {
                    return builderResult.hasIgpId
                }
            }
            @discardableResult
            public func setIgpId(_ value:Int64) -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                self.igpId = value
                return self
            }
            @discardableResult
            public func clearIgpId() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder{
                builderResult.hasIgpId = false
                builderResult.igpId = nil
                return self
            }
                public var igpType:IGPSignalingOffer.IGPType {
                    get {
                        return builderResult.igpType
                    }
                    set (value) {
                        builderResult.hasIgpType = true
                        builderResult.igpType = value
                    }
                }
                public var hasIgpType:Bool{
                    get {
                        return builderResult.hasIgpType
                    }
                }
            @discardableResult
                public func setIgpType(_ value:IGPSignalingOffer.IGPType) -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                  self.igpType = value
                  return self
                }
            @discardableResult
                public func clearIgpType() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                   builderResult.hasIgpType = false
                   builderResult.igpType = .voiceCalling
                   return self
                }
                public var igpStatus:IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus {
                    get {
                        return builderResult.igpStatus
                    }
                    set (value) {
                        builderResult.hasIgpStatus = true
                        builderResult.igpStatus = value
                    }
                }
                public var hasIgpStatus:Bool{
                    get {
                        return builderResult.hasIgpStatus
                    }
                }
            @discardableResult
                public func setIgpStatus(_ value:IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus) -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                  self.igpStatus = value
                  return self
                }
            @discardableResult
                public func clearIgpStatus() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                   builderResult.hasIgpStatus = false
                   builderResult.igpStatus = .missed
                   return self
                }
            public var igpPeer:IGPRegisteredUser! {
                get {
                    if igpPeerBuilder_ != nil {
                        builderResult.igpPeer = igpPeerBuilder_.getMessage()
                    }
                    return builderResult.igpPeer
                }
                set (value) {
                    builderResult.hasIgpPeer = true
                    builderResult.igpPeer = value
                }
            }
            public var hasIgpPeer:Bool {
                get {
                    return builderResult.hasIgpPeer
                }
            }
            fileprivate var igpPeerBuilder_:IGPRegisteredUser.Builder! {
                didSet {
                    builderResult.hasIgpPeer = true
                }
            }
            public func getIgpPeerBuilder() -> IGPRegisteredUser.Builder {
                if igpPeerBuilder_ == nil {
                    igpPeerBuilder_ = IGPRegisteredUser.Builder()
                    builderResult.igpPeer = igpPeerBuilder_.getMessage()
                    if igpPeer != nil {
                        try! igpPeerBuilder_.mergeFrom(other: igpPeer)
                    }
                }
                return igpPeerBuilder_
            }
            @discardableResult
            public func setIgpPeer(_ value:IGPRegisteredUser!) -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                self.igpPeer = value
                return self
            }
            @discardableResult
            public func mergeIgpPeer(value:IGPRegisteredUser) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                if builderResult.hasIgpPeer {
                    builderResult.igpPeer = try IGPRegisteredUser.builderWithPrototype(prototype:builderResult.igpPeer).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.igpPeer = value
                }
                builderResult.hasIgpPeer = true
                return self
            }
            @discardableResult
            public func clearIgpPeer() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                igpPeerBuilder_ = nil
                builderResult.hasIgpPeer = false
                builderResult.igpPeer = nil
                return self
            }
            public var igpOfferTime:Int32 {
                get {
                    return builderResult.igpOfferTime
                }
                set (value) {
                    builderResult.hasIgpOfferTime = true
                    builderResult.igpOfferTime = value
                }
            }
            public var hasIgpOfferTime:Bool {
                get {
                    return builderResult.hasIgpOfferTime
                }
            }
            @discardableResult
            public func setIgpOfferTime(_ value:Int32) -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                self.igpOfferTime = value
                return self
            }
            @discardableResult
            public func clearIgpOfferTime() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder{
                builderResult.hasIgpOfferTime = false
                builderResult.igpOfferTime = nil
                return self
            }
            public var igpDuration:Int32 {
                get {
                    return builderResult.igpDuration
                }
                set (value) {
                    builderResult.hasIgpDuration = true
                    builderResult.igpDuration = value
                }
            }
            public var hasIgpDuration:Bool {
                get {
                    return builderResult.hasIgpDuration
                }
            }
            @discardableResult
            public func setIgpDuration(_ value:Int32) -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                self.igpDuration = value
                return self
            }
            @discardableResult
            public func clearIgpDuration() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder{
                builderResult.hasIgpDuration = false
                builderResult.igpDuration = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                builderResult = IGPSignalingGetLogResponse.IGPSignalingLog()
                return self
            }
            override public func clone() throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                return try IGPSignalingGetLogResponse.IGPSignalingLog.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPSignalingGetLogResponse.IGPSignalingLog {
                let returnMe:IGPSignalingGetLogResponse.IGPSignalingLog = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPSignalingGetLogResponse.IGPSignalingLog) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                if other == IGPSignalingGetLogResponse.IGPSignalingLog() {
                    return self
                }
                if other.hasIgpId {
                    igpId = other.igpId
                }
                if other.hasIgpType {
                    igpType = other.igpType
                }
                if other.hasIgpStatus {
                    igpStatus = other.igpStatus
                }
                if (other.hasIgpPeer) {
                    try mergeIgpPeer(value: other.igpPeer)
                }
                if other.hasIgpOfferTime {
                    igpOfferTime = other.igpOfferTime
                }
                if other.hasIgpDuration {
                    igpDuration = other.igpDuration
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        igpId = try codedInputStream.readInt64()

                    case 16:
                        let valueIntigpType = try codedInputStream.readEnum()
                        if let enumsigpType = IGPSignalingOffer.IGPType(rawValue:valueIntigpType){
                            igpType = enumsigpType
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 2, value:Int64(valueIntigpType))
                        }

                    case 24:
                        let valueIntigpStatus = try codedInputStream.readEnum()
                        if let enumsigpStatus = IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus(rawValue:valueIntigpStatus){
                            igpStatus = enumsigpStatus
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 3, value:Int64(valueIntigpStatus))
                        }

                    case 34:
                        let subBuilder:IGPRegisteredUser.Builder = IGPRegisteredUser.Builder()
                        if hasIgpPeer {
                            try subBuilder.mergeFrom(other: igpPeer)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        igpPeer = subBuilder.buildPartial()

                    case 40:
                        igpOfferTime = try codedInputStream.readInt32()

                    case 48:
                        igpDuration = try codedInputStream.readInt32()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                let resultDecodedBuilder = IGPSignalingGetLogResponse.IGPSignalingLog.Builder()
                if let jsonValueIgpId = jsonMap["IGPId"] as? String {
                    resultDecodedBuilder.igpId = Int64(jsonValueIgpId)!
                } else if let jsonValueIgpId = jsonMap["IGPId"] as? Int {
                    resultDecodedBuilder.igpId = Int64(jsonValueIgpId)
                }
                if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                    resultDecodedBuilder.igpType = try IGPSignalingOffer.IGPType.fromString(jsonValueIgpType)
                }
                if let jsonValueIgpStatus = jsonMap["IGPStatus"] as? String {
                    resultDecodedBuilder.igpStatus = try IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus.fromString(jsonValueIgpStatus)
                }
                if let jsonValueIgpPeer = jsonMap["IGPPeer"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.igpPeer = try IGPRegisteredUser.Builder.decodeToBuilder(jsonMap:jsonValueIgpPeer).build()

                }
                if let jsonValueIgpOfferTime = jsonMap["IGPOfferTime"] as? Int {
                    resultDecodedBuilder.igpOfferTime = Int32(jsonValueIgpOfferTime)
                } else if let jsonValueIgpOfferTime = jsonMap["IGPOfferTime"] as? String {
                    resultDecodedBuilder.igpOfferTime = Int32(jsonValueIgpOfferTime)!
                }
                if let jsonValueIgpDuration = jsonMap["IGPDuration"] as? Int {
                    resultDecodedBuilder.igpDuration = Int32(jsonValueIgpDuration)
                } else if let jsonValueIgpDuration = jsonMap["IGPDuration"] as? String {
                    resultDecodedBuilder.igpDuration = Int32(jsonValueIgpDuration)!
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingGetLogResponse.IGPSignalingLog.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpSignalingLog:Array<IGPSignalingGetLogResponse.IGPSignalingLog>  = Array<IGPSignalingGetLogResponse.IGPSignalingLog>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        for oneElementIgpSignalingLog in igpSignalingLog {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpSignalingLog)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        for oneElementIgpSignalingLog in igpSignalingLog {
            serialize_size += oneElementIgpSignalingLog.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPSignalingGetLogResponse.Builder {
        return IGPSignalingGetLogResponse.classBuilder() as! IGPSignalingGetLogResponse.Builder
    }
    public func getBuilder() -> IGPSignalingGetLogResponse.Builder {
        return classBuilder() as! IGPSignalingGetLogResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetLogResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPSignalingGetLogResponse.Builder()
    }
    public func toBuilder() throws -> IGPSignalingGetLogResponse.Builder {
        return try IGPSignalingGetLogResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPSignalingGetLogResponse) throws -> IGPSignalingGetLogResponse.Builder {
        return try IGPSignalingGetLogResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if !igpSignalingLog.isEmpty {
            var jsonArrayIgpSignalingLog:Array<Dictionary<String,Any>> = []
            for oneValueIgpSignalingLog in igpSignalingLog {
                let ecodedMessageIgpSignalingLog = try oneValueIgpSignalingLog.encode()
                jsonArrayIgpSignalingLog.append(ecodedMessageIgpSignalingLog)
            }
            jsonMap["IGPSignalingLog"] = jsonArrayIgpSignalingLog
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpSignalingLogElementIndex:Int = 0
        for oneElementIgpSignalingLog in igpSignalingLog {
            output += "\(indent) igpSignalingLog[\(igpSignalingLogElementIndex)] {\n"
            output += try oneElementIgpSignalingLog.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpSignalingLogElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            for oneElementIgpSignalingLog in igpSignalingLog {
                hashCode = (hashCode &* 31) &+ oneElementIgpSignalingLog.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPSignalingGetLogResponse"
    }
    override public func className() -> String {
        return "IGPSignalingGetLogResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPSignalingGetLogResponse = IGPSignalingGetLogResponse()
        public func getMessage() -> IGPSignalingGetLogResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPSignalingGetLogResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPSignalingGetLogResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPSignalingGetLogResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpSignalingLog:Array<IGPSignalingGetLogResponse.IGPSignalingLog> {
            get {
                return builderResult.igpSignalingLog
            }
            set (value) {
                builderResult.igpSignalingLog = value
            }
        }
        @discardableResult
        public func setIgpSignalingLog(_ value:Array<IGPSignalingGetLogResponse.IGPSignalingLog>) -> IGPSignalingGetLogResponse.Builder {
            self.igpSignalingLog = value
            return self
        }
        @discardableResult
        public func clearIgpSignalingLog() -> IGPSignalingGetLogResponse.Builder {
            builderResult.igpSignalingLog.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPSignalingGetLogResponse.Builder {
            builderResult = IGPSignalingGetLogResponse()
            return self
        }
        override public func clone() throws -> IGPSignalingGetLogResponse.Builder {
            return try IGPSignalingGetLogResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPSignalingGetLogResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPSignalingGetLogResponse {
            let returnMe:IGPSignalingGetLogResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPSignalingGetLogResponse) throws -> IGPSignalingGetLogResponse.Builder {
            if other == IGPSignalingGetLogResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if !other.igpSignalingLog.isEmpty  {
                 builderResult.igpSignalingLog += other.igpSignalingLog
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetLogResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPSignalingGetLogResponse.IGPSignalingLog.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpSignalingLog.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPSignalingGetLogResponse.Builder {
            let resultDecodedBuilder = IGPSignalingGetLogResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpSignalingLog = jsonMap["IGPSignalingLog"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpSignalingLog:Array<IGPSignalingGetLogResponse.IGPSignalingLog> = []
                for oneValueIgpSignalingLog in jsonValueIgpSignalingLog {
                    let messageFromStringIgpSignalingLog = try IGPSignalingGetLogResponse.IGPSignalingLog.Builder.decodeToBuilder(jsonMap:oneValueIgpSignalingLog).build()

                    jsonArrayIgpSignalingLog.append(messageFromStringIgpSignalingLog)
                }
                resultDecodedBuilder.igpSignalingLog = jsonArrayIgpSignalingLog
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPSignalingGetLogResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPSignalingGetLogResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPSignalingGetLog: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingGetLog> {
        var mergedArray = Array<IGPSignalingGetLog>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingGetLog? {
        return try IGPSignalingGetLog.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder().mergeFrom(data: data, extensionRegistry:SignalingGetLogRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLog {
        return try IGPSignalingGetLog.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpPagination": return self.igpPagination
        default: return nil
        }
    }
}
extension IGPSignalingGetLog.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPSignalingGetLog
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpPagination": return self.igpPagination
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpPagination":
                guard let newSubscriptValue = newSubscriptValue as? IGPPagination else {
                    return
                }
                self.igpPagination = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPSignalingGetLogResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingGetLogResponse> {
        var mergedArray = Array<IGPSignalingGetLogResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingGetLogResponse? {
        return try IGPSignalingGetLogResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder().mergeFrom(data: data, extensionRegistry:SignalingGetLogRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse {
        return try IGPSignalingGetLogResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpSignalingLog": return self.igpSignalingLog
        default: return nil
        }
    }
}
extension IGPSignalingGetLogResponse.IGPSignalingLog: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPSignalingGetLogResponse.IGPSignalingLog> {
        var mergedArray = Array<IGPSignalingGetLogResponse.IGPSignalingLog>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPSignalingGetLogResponse.IGPSignalingLog? {
        return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
        return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeFrom(data: data, extensionRegistry:SignalingGetLogRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
        return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
        return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
        return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
        return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPSignalingGetLogResponse.IGPSignalingLog {
        return try IGPSignalingGetLogResponse.IGPSignalingLog.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpId": return self.igpId
        case "igpType": return self.igpType
        case "igpStatus": return self.igpStatus
        case "igpPeer": return self.igpPeer
        case "igpOfferTime": return self.igpOfferTime
        case "igpDuration": return self.igpDuration
        default: return nil
        }
    }
}
extension IGPSignalingGetLogResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPSignalingGetLogResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpSignalingLog": return self.igpSignalingLog
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpSignalingLog":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPSignalingGetLogResponse.IGPSignalingLog> else {
                    return
                }
                self.igpSignalingLog = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPSignalingGetLogResponse.IGPSignalingLog.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPSignalingGetLogResponse.IGPSignalingLog
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpId": return self.igpId
            case "igpType": return self.igpType
            case "igpStatus": return self.igpStatus
            case "igpPeer": return self.igpPeer
            case "igpOfferTime": return self.igpOfferTime
            case "igpDuration": return self.igpDuration
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpId = newSubscriptValue
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPSignalingOffer.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpStatus":
                guard let newSubscriptValue = newSubscriptValue as? IGPSignalingGetLogResponse.IGPSignalingLog.IGPStatus else {
                    return
                }
                self.igpStatus = newSubscriptValue
            case "igpPeer":
                guard let newSubscriptValue = newSubscriptValue as? IGPRegisteredUser else {
                    return
                }
                self.igpPeer = newSubscriptValue
            case "igpOfferTime":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpOfferTime = newSubscriptValue
            case "igpDuration":
                guard let newSubscriptValue = newSubscriptValue as? Int32 else {
                    return
                }
                self.igpDuration = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
