/// Generated by the Protocol Buffers 3.2.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.13
/// Source file "ClientCondition.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ClientConditionRoot {
    public static let `default` = ClientConditionRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPClientCondition : GeneratedMessage {

    public static func == (lhs: IGPClientCondition, rhs: IGPClientCondition) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.igpRooms == rhs.igpRooms)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPRoom : GeneratedMessage {

        public static func == (lhs: IGPClientCondition.IGPRoom, rhs: IGPClientCondition.IGPRoom) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpRoomId == rhs.hasIgpRoomId) && (!lhs.hasIgpRoomId || lhs.igpRoomId == rhs.igpRoomId)
            fieldCheck = fieldCheck && (lhs.hasIgpMessageVersion == rhs.hasIgpMessageVersion) && (!lhs.hasIgpMessageVersion || lhs.igpMessageVersion == rhs.igpMessageVersion)
            fieldCheck = fieldCheck && (lhs.hasIgpStatusVersion == rhs.hasIgpStatusVersion) && (!lhs.hasIgpStatusVersion || lhs.igpStatusVersion == rhs.igpStatusVersion)
            fieldCheck = fieldCheck && (lhs.hasIgpDeleteVersion == rhs.hasIgpDeleteVersion) && (!lhs.hasIgpDeleteVersion || lhs.igpDeleteVersion == rhs.igpDeleteVersion)
            fieldCheck = fieldCheck && (lhs.igpOfflineDeleted == rhs.igpOfflineDeleted)
            fieldCheck = fieldCheck && (lhs.igpOfflineEdited == rhs.igpOfflineEdited)
            fieldCheck = fieldCheck && (lhs.igpOfflineSeen == rhs.igpOfflineSeen)
            fieldCheck = fieldCheck && (lhs.hasIgpClearId == rhs.hasIgpClearId) && (!lhs.hasIgpClearId || lhs.igpClearId == rhs.igpClearId)
            fieldCheck = fieldCheck && (lhs.hasIgpCacheStartId == rhs.hasIgpCacheStartId) && (!lhs.hasIgpCacheStartId || lhs.igpCacheStartId == rhs.igpCacheStartId)
            fieldCheck = fieldCheck && (lhs.hasIgpCacheEndId == rhs.hasIgpCacheEndId) && (!lhs.hasIgpCacheEndId || lhs.igpCacheEndId == rhs.igpCacheEndId)
            fieldCheck = fieldCheck && (lhs.hasIgpOfflineMute == rhs.hasIgpOfflineMute) && (!lhs.hasIgpOfflineMute || lhs.igpOfflineMute == rhs.igpOfflineMute)
            fieldCheck = fieldCheck && (lhs.igpOfflineListened == rhs.igpOfflineListened)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //Nested type declaration start

        final public class IGPOfflineEdited : GeneratedMessage {

            public static func == (lhs: IGPClientCondition.IGPRoom.IGPOfflineEdited, rhs: IGPClientCondition.IGPRoom.IGPOfflineEdited) -> Bool {
                if lhs === rhs {
                    return true
                }
                var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
                fieldCheck = fieldCheck && (lhs.hasIgpMessageId == rhs.hasIgpMessageId) && (!lhs.hasIgpMessageId || lhs.igpMessageId == rhs.igpMessageId)
                fieldCheck = fieldCheck && (lhs.hasIgpMessage == rhs.hasIgpMessage) && (!lhs.hasIgpMessage || lhs.igpMessage == rhs.igpMessage)
                fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
                return fieldCheck
            }



            //iGap Properties declaration start



            //iGap Properties declaration end

            public fileprivate(set) var igpMessageId:Int64 = Int64(0)
            public fileprivate(set) var hasIgpMessageId:Bool = false

            public fileprivate(set) var igpMessage:String = ""
            public fileprivate(set) var hasIgpMessage:Bool = false

            required public init() {
                super.init()
            }
            override public func isInitialized() -> Bool {
                return true
            }
            override public func writeTo(codedOutputStream: CodedOutputStream) throws {
                if hasIgpMessageId {
                    try codedOutputStream.writeInt64(fieldNumber: 1, value:igpMessageId)
                }
                if hasIgpMessage {
                    try codedOutputStream.writeString(fieldNumber: 2, value:igpMessage)
                }
                try unknownFields.writeTo(codedOutputStream: codedOutputStream)
            }
            override public func serializedSize() -> Int32 {
                var serialize_size:Int32 = memoizedSerializedSize
                if serialize_size != -1 {
                 return serialize_size
                }

                serialize_size = 0
                if hasIgpMessageId {
                    serialize_size += igpMessageId.computeInt64Size(fieldNumber: 1)
                }
                if hasIgpMessage {
                    serialize_size += igpMessage.computeStringSize(fieldNumber: 2)
                }
                serialize_size += unknownFields.serializedSize()
                memoizedSerializedSize = serialize_size
                return serialize_size
            }
            public class func getBuilder() -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                return IGPClientCondition.IGPRoom.IGPOfflineEdited.classBuilder() as! IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder
            }
            public func getBuilder() -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                return classBuilder() as! IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder
            }
            override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
                return IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder()
            }
            override public func classBuilder() -> ProtocolBuffersMessageBuilder {
                return IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder()
            }
            public func toBuilder() throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                return try IGPClientCondition.IGPRoom.IGPOfflineEdited.builderWithPrototype(prototype:self)
            }
            public class func builderWithPrototype(prototype:IGPClientCondition.IGPRoom.IGPOfflineEdited) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeFrom(other:prototype)
            }
            override public func encode() throws -> Dictionary<String,Any> {
                guard isInitialized() else {
                    throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
                }

                var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
                if hasIgpMessageId {
                    jsonMap["IGPMessageId"] = "\(igpMessageId)"
                }
                if hasIgpMessage {
                    jsonMap["IGPMessage"] = igpMessage
                }
                return jsonMap
            }
            override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
                return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder.decodeToBuilder(jsonMap:jsonMap).build()
            }
            override class public func fromJSON(data:Data) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
                return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder.fromJSONToBuilder(data:data).build()
            }
            override public func getDescription(indent:String) throws -> String {
                var output = ""
                if hasIgpMessageId {
                    output += "\(indent) igpMessageId: \(igpMessageId) \n"
                }
                if hasIgpMessage {
                    output += "\(indent) igpMessage: \(igpMessage) \n"
                }
                output += unknownFields.getDescription(indent: indent)
                return output
            }
            override public var hashValue:Int {
                get {
                    var hashCode:Int = 7
                    if hasIgpMessageId {
                        hashCode = (hashCode &* 31) &+ igpMessageId.hashValue
                    }
                    if hasIgpMessage {
                        hashCode = (hashCode &* 31) &+ igpMessage.hashValue
                    }
                    hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                    return hashCode
                }
            }


            //Meta information declaration start

            override public class func className() -> String {
                return "IGPClientCondition.IGPRoom.IGPOfflineEdited"
            }
            override public func className() -> String {
                return "IGPClientCondition.IGPRoom.IGPOfflineEdited"
            }
            //Meta information declaration end

            final public class Builder : GeneratedMessageBuilder {
                fileprivate var builderResult:IGPClientCondition.IGPRoom.IGPOfflineEdited = IGPClientCondition.IGPRoom.IGPOfflineEdited()
                public func getMessage() -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
                    return builderResult
                }

                required override public init () {
                    super.init()
                }
                public var igpMessageId:Int64 {
                    get {
                        return builderResult.igpMessageId
                    }
                    set (value) {
                        builderResult.hasIgpMessageId = true
                        builderResult.igpMessageId = value
                    }
                }
                public var hasIgpMessageId:Bool {
                    get {
                        return builderResult.hasIgpMessageId
                    }
                }
                @discardableResult
                public func setIgpMessageId(_ value:Int64) -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    self.igpMessageId = value
                    return self
                }
                @discardableResult
                public func clearIgpMessageId() -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder{
                    builderResult.hasIgpMessageId = false
                    builderResult.igpMessageId = Int64(0)
                    return self
                }
                public var igpMessage:String {
                    get {
                        return builderResult.igpMessage
                    }
                    set (value) {
                        builderResult.hasIgpMessage = true
                        builderResult.igpMessage = value
                    }
                }
                public var hasIgpMessage:Bool {
                    get {
                        return builderResult.hasIgpMessage
                    }
                }
                @discardableResult
                public func setIgpMessage(_ value:String) -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    self.igpMessage = value
                    return self
                }
                @discardableResult
                public func clearIgpMessage() -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder{
                    builderResult.hasIgpMessage = false
                    builderResult.igpMessage = ""
                    return self
                }
                override public var internalGetResult:GeneratedMessage {
                    get {
                        return builderResult
                    }
                }
                @discardableResult
                override public func clear() -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    builderResult = IGPClientCondition.IGPRoom.IGPOfflineEdited()
                    return self
                }
                override public func clone() throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    return try IGPClientCondition.IGPRoom.IGPOfflineEdited.builderWithPrototype(prototype:builderResult)
                }
                override public func build() throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
                    try checkInitialized()
                    return buildPartial()
                }
                public func buildPartial() -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
                    let returnMe:IGPClientCondition.IGPRoom.IGPOfflineEdited = builderResult
                    return returnMe
                }
                @discardableResult
                public func mergeFrom(other:IGPClientCondition.IGPRoom.IGPOfflineEdited) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    if other == IGPClientCondition.IGPRoom.IGPOfflineEdited() {
                        return self
                    }
                    if other.hasIgpMessageId {
                        igpMessageId = other.igpMessageId
                    }
                    if other.hasIgpMessage {
                        igpMessage = other.igpMessage
                    }
                    try merge(unknownField: other.unknownFields)
                    return self
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
                }
                @discardableResult
                override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                    while (true) {
                        let protobufTag = try codedInputStream.readTag()
                        switch protobufTag {
                        case 0: 
                            self.unknownFields = try unknownFieldsBuilder.build()
                            return self

                        case 8:
                            igpMessageId = try codedInputStream.readInt64()

                        case 18:
                            igpMessage = try codedInputStream.readString()

                        default:
                            if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                                unknownFields = try unknownFieldsBuilder.build()
                                return self
                            }
                        }
                    }
                }
                class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    let resultDecodedBuilder = IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder()
                    if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? String {
                        resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)!
                    } else if let jsonValueIgpMessageId = jsonMap["IGPMessageId"] as? Int {
                        resultDecodedBuilder.igpMessageId = Int64(jsonValueIgpMessageId)
                    }
                    if let jsonValueIgpMessage = jsonMap["IGPMessage"] as? String {
                        resultDecodedBuilder.igpMessage = jsonValueIgpMessage
                    }
                    return resultDecodedBuilder
                }
                override class public func fromJSONToBuilder(data:Data) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder {
                    let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                    guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                      throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                    }
                    return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder.decodeToBuilder(jsonMap:jsDataCast)
                }
            }

        }

        //Nested type declaration end



        //iGap Properties declaration start



        //iGap Properties declaration end



            //Enum type declaration start 

            public enum IGPOfflineMute:Int32, CustomDebugStringConvertible, CustomStringConvertible, Hashable {
                case unchanged = 0
                case muted = 1
                case unmuted = 2
                public func toString() -> String {
                    switch self {
                    case .unchanged: return "UNCHANGED"
                    case .muted: return "MUTED"
                    case .unmuted: return "UNMUTED"
                    }
                }
                public static func fromString(str:String) throws -> IGPClientCondition.IGPRoom.IGPOfflineMute {
                    switch str {
                    case "UNCHANGED":    return .unchanged
                    case "MUTED":    return .muted
                    case "UNMUTED":    return .unmuted
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion String to Enum has failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .unchanged: return ".unchanged"
                    case .muted: return ".muted"
                    case .unmuted: return ".unmuted"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:IGPOfflineMute, rhs:IGPOfflineMute) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var igpRoomId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpRoomId:Bool = false

        public fileprivate(set) var igpMessageVersion:Int64 = Int64(0)
        public fileprivate(set) var hasIgpMessageVersion:Bool = false

        public fileprivate(set) var igpStatusVersion:Int64 = Int64(0)
        public fileprivate(set) var hasIgpStatusVersion:Bool = false

        public fileprivate(set) var igpDeleteVersion:Int64 = Int64(0)
        public fileprivate(set) var hasIgpDeleteVersion:Bool = false

        public fileprivate(set) var igpOfflineDeleted:Array<Int64> = Array<Int64>()
        private var igpOfflineDeletedMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var igpOfflineEdited:Array<IGPClientCondition.IGPRoom.IGPOfflineEdited>  = Array<IGPClientCondition.IGPRoom.IGPOfflineEdited>()
        public fileprivate(set) var igpOfflineSeen:Array<Int64> = Array<Int64>()
        private var igpOfflineSeenMemoizedSerializedSize:Int32 = -1
        public fileprivate(set) var igpClearId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpClearId:Bool = false

        public fileprivate(set) var igpCacheStartId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpCacheStartId:Bool = false

        public fileprivate(set) var igpCacheEndId:Int64 = Int64(0)
        public fileprivate(set) var hasIgpCacheEndId:Bool = false

        public fileprivate(set) var igpOfflineMute:IGPClientCondition.IGPRoom.IGPOfflineMute = IGPClientCondition.IGPRoom.IGPOfflineMute.unchanged
        public fileprivate(set) var hasIgpOfflineMute:Bool = false
        public fileprivate(set) var igpOfflineListened:Array<Int64> = Array<Int64>()
        private var igpOfflineListenedMemoizedSerializedSize:Int32 = -1
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpRoomId {
                try codedOutputStream.writeInt64(fieldNumber: 2, value:igpRoomId)
            }
            if hasIgpMessageVersion {
                try codedOutputStream.writeInt64(fieldNumber: 3, value:igpMessageVersion)
            }
            if hasIgpStatusVersion {
                try codedOutputStream.writeInt64(fieldNumber: 4, value:igpStatusVersion)
            }
            if hasIgpDeleteVersion {
                try codedOutputStream.writeInt64(fieldNumber: 5, value:igpDeleteVersion)
            }
            if !igpOfflineDeleted.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 50)
                try codedOutputStream.writeRawVarint32(value: igpOfflineDeletedMemoizedSerializedSize)
                for oneValueigpOfflineDeleted in igpOfflineDeleted {
                    try codedOutputStream.writeInt64NoTag(value: oneValueigpOfflineDeleted)
                }
            }
            for oneElementIgpOfflineEdited in igpOfflineEdited {
                  try codedOutputStream.writeMessage(fieldNumber: 7, value:oneElementIgpOfflineEdited)
            }
            if !igpOfflineSeen.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 66)
                try codedOutputStream.writeRawVarint32(value: igpOfflineSeenMemoizedSerializedSize)
                for oneValueigpOfflineSeen in igpOfflineSeen {
                    try codedOutputStream.writeInt64NoTag(value: oneValueigpOfflineSeen)
                }
            }
            if hasIgpClearId {
                try codedOutputStream.writeInt64(fieldNumber: 9, value:igpClearId)
            }
            if hasIgpCacheStartId {
                try codedOutputStream.writeInt64(fieldNumber: 10, value:igpCacheStartId)
            }
            if hasIgpCacheEndId {
                try codedOutputStream.writeInt64(fieldNumber: 11, value:igpCacheEndId)
            }
            if hasIgpOfflineMute {
                try codedOutputStream.writeEnum(fieldNumber: 12, value:igpOfflineMute.rawValue)
            }
            if !igpOfflineListened.isEmpty {
                try codedOutputStream.writeRawVarint32(value: 106)
                try codedOutputStream.writeRawVarint32(value: igpOfflineListenedMemoizedSerializedSize)
                for oneValueigpOfflineListened in igpOfflineListened {
                    try codedOutputStream.writeInt64NoTag(value: oneValueigpOfflineListened)
                }
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if hasIgpRoomId {
                serialize_size += igpRoomId.computeInt64Size(fieldNumber: 2)
            }
            if hasIgpMessageVersion {
                serialize_size += igpMessageVersion.computeInt64Size(fieldNumber: 3)
            }
            if hasIgpStatusVersion {
                serialize_size += igpStatusVersion.computeInt64Size(fieldNumber: 4)
            }
            if hasIgpDeleteVersion {
                serialize_size += igpDeleteVersion.computeInt64Size(fieldNumber: 5)
            }
            var dataSizeIgpOfflineDeleted:Int32 = 0
            for oneValueigpOfflineDeleted in igpOfflineDeleted {
                dataSizeIgpOfflineDeleted += oneValueigpOfflineDeleted.computeInt64SizeNoTag()
            }
            serialize_size += dataSizeIgpOfflineDeleted
            if !igpOfflineDeleted.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeIgpOfflineDeleted.computeInt32SizeNoTag()
            }
            igpOfflineDeletedMemoizedSerializedSize = dataSizeIgpOfflineDeleted
            for oneElementIgpOfflineEdited in igpOfflineEdited {
                serialize_size += oneElementIgpOfflineEdited.computeMessageSize(fieldNumber: 7)
            }
            var dataSizeIgpOfflineSeen:Int32 = 0
            for oneValueigpOfflineSeen in igpOfflineSeen {
                dataSizeIgpOfflineSeen += oneValueigpOfflineSeen.computeInt64SizeNoTag()
            }
            serialize_size += dataSizeIgpOfflineSeen
            if !igpOfflineSeen.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeIgpOfflineSeen.computeInt32SizeNoTag()
            }
            igpOfflineSeenMemoizedSerializedSize = dataSizeIgpOfflineSeen
            if hasIgpClearId {
                serialize_size += igpClearId.computeInt64Size(fieldNumber: 9)
            }
            if hasIgpCacheStartId {
                serialize_size += igpCacheStartId.computeInt64Size(fieldNumber: 10)
            }
            if hasIgpCacheEndId {
                serialize_size += igpCacheEndId.computeInt64Size(fieldNumber: 11)
            }
            if (hasIgpOfflineMute) {
                serialize_size += igpOfflineMute.rawValue.computeEnumSize(fieldNumber: 12)
            }
            var dataSizeIgpOfflineListened:Int32 = 0
            for oneValueigpOfflineListened in igpOfflineListened {
                dataSizeIgpOfflineListened += oneValueigpOfflineListened.computeInt64SizeNoTag()
            }
            serialize_size += dataSizeIgpOfflineListened
            if !igpOfflineListened.isEmpty {
                serialize_size += 1
                serialize_size += dataSizeIgpOfflineListened.computeInt32SizeNoTag()
            }
            igpOfflineListenedMemoizedSerializedSize = dataSizeIgpOfflineListened
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPClientCondition.IGPRoom.Builder {
            return IGPClientCondition.IGPRoom.classBuilder() as! IGPClientCondition.IGPRoom.Builder
        }
        public func getBuilder() -> IGPClientCondition.IGPRoom.Builder {
            return classBuilder() as! IGPClientCondition.IGPRoom.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPClientCondition.IGPRoom.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPClientCondition.IGPRoom.Builder()
        }
        public func toBuilder() throws -> IGPClientCondition.IGPRoom.Builder {
            return try IGPClientCondition.IGPRoom.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPClientCondition.IGPRoom) throws -> IGPClientCondition.IGPRoom.Builder {
            return try IGPClientCondition.IGPRoom.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpRoomId {
                jsonMap["IGPRoomId"] = "\(igpRoomId)"
            }
            if hasIgpMessageVersion {
                jsonMap["IGPMessageVersion"] = "\(igpMessageVersion)"
            }
            if hasIgpStatusVersion {
                jsonMap["IGPStatusVersion"] = "\(igpStatusVersion)"
            }
            if hasIgpDeleteVersion {
                jsonMap["IGPDeleteVersion"] = "\(igpDeleteVersion)"
            }
            if !igpOfflineDeleted.isEmpty {
                var jsonArrayIgpOfflineDeleted:Array<String> = []
                for oneValueIgpOfflineDeleted in igpOfflineDeleted {
                    jsonArrayIgpOfflineDeleted.append("\(oneValueIgpOfflineDeleted)")
                }
                jsonMap["IGPOfflineDeleted"] = jsonArrayIgpOfflineDeleted
            }
            if !igpOfflineEdited.isEmpty {
                var jsonArrayIgpOfflineEdited:Array<Dictionary<String,Any>> = []
                for oneValueIgpOfflineEdited in igpOfflineEdited {
                    let ecodedMessageIgpOfflineEdited = try oneValueIgpOfflineEdited.encode()
                    jsonArrayIgpOfflineEdited.append(ecodedMessageIgpOfflineEdited)
                }
                jsonMap["IGPOfflineEdited"] = jsonArrayIgpOfflineEdited
            }
            if !igpOfflineSeen.isEmpty {
                var jsonArrayIgpOfflineSeen:Array<String> = []
                for oneValueIgpOfflineSeen in igpOfflineSeen {
                    jsonArrayIgpOfflineSeen.append("\(oneValueIgpOfflineSeen)")
                }
                jsonMap["IGPOfflineSeen"] = jsonArrayIgpOfflineSeen
            }
            if hasIgpClearId {
                jsonMap["IGPClearId"] = "\(igpClearId)"
            }
            if hasIgpCacheStartId {
                jsonMap["IGPCacheStartId"] = "\(igpCacheStartId)"
            }
            if hasIgpCacheEndId {
                jsonMap["IGPCacheEndId"] = "\(igpCacheEndId)"
            }
            if hasIgpOfflineMute {
                jsonMap["IGPOfflineMute"] = igpOfflineMute.toString()
            }
            if !igpOfflineListened.isEmpty {
                var jsonArrayIgpOfflineListened:Array<String> = []
                for oneValueIgpOfflineListened in igpOfflineListened {
                    jsonArrayIgpOfflineListened.append("\(oneValueIgpOfflineListened)")
                }
                jsonMap["IGPOfflineListened"] = jsonArrayIgpOfflineListened
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientCondition.IGPRoom {
            return try IGPClientCondition.IGPRoom.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPClientCondition.IGPRoom {
            return try IGPClientCondition.IGPRoom.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if hasIgpRoomId {
                output += "\(indent) igpRoomId: \(igpRoomId) \n"
            }
            if hasIgpMessageVersion {
                output += "\(indent) igpMessageVersion: \(igpMessageVersion) \n"
            }
            if hasIgpStatusVersion {
                output += "\(indent) igpStatusVersion: \(igpStatusVersion) \n"
            }
            if hasIgpDeleteVersion {
                output += "\(indent) igpDeleteVersion: \(igpDeleteVersion) \n"
            }
            var igpOfflineDeletedElementIndex:Int = 0
            for oneValueIgpOfflineDeleted in igpOfflineDeleted  {
                output += "\(indent) igpOfflineDeleted[\(igpOfflineDeletedElementIndex)]: \(oneValueIgpOfflineDeleted)\n"
                igpOfflineDeletedElementIndex += 1
            }
            var igpOfflineEditedElementIndex:Int = 0
            for oneElementIgpOfflineEdited in igpOfflineEdited {
                output += "\(indent) igpOfflineEdited[\(igpOfflineEditedElementIndex)] {\n"
                output += try oneElementIgpOfflineEdited.getDescription(indent: "\(indent)  ")
                output += "\(indent)}\n"
                igpOfflineEditedElementIndex += 1
            }
            var igpOfflineSeenElementIndex:Int = 0
            for oneValueIgpOfflineSeen in igpOfflineSeen  {
                output += "\(indent) igpOfflineSeen[\(igpOfflineSeenElementIndex)]: \(oneValueIgpOfflineSeen)\n"
                igpOfflineSeenElementIndex += 1
            }
            if hasIgpClearId {
                output += "\(indent) igpClearId: \(igpClearId) \n"
            }
            if hasIgpCacheStartId {
                output += "\(indent) igpCacheStartId: \(igpCacheStartId) \n"
            }
            if hasIgpCacheEndId {
                output += "\(indent) igpCacheEndId: \(igpCacheEndId) \n"
            }
            if (hasIgpOfflineMute) {
                output += "\(indent) igpOfflineMute: \(igpOfflineMute.description)\n"
            }
            var igpOfflineListenedElementIndex:Int = 0
            for oneValueIgpOfflineListened in igpOfflineListened  {
                output += "\(indent) igpOfflineListened[\(igpOfflineListenedElementIndex)]: \(oneValueIgpOfflineListened)\n"
                igpOfflineListenedElementIndex += 1
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpRoomId {
                    hashCode = (hashCode &* 31) &+ igpRoomId.hashValue
                }
                if hasIgpMessageVersion {
                    hashCode = (hashCode &* 31) &+ igpMessageVersion.hashValue
                }
                if hasIgpStatusVersion {
                    hashCode = (hashCode &* 31) &+ igpStatusVersion.hashValue
                }
                if hasIgpDeleteVersion {
                    hashCode = (hashCode &* 31) &+ igpDeleteVersion.hashValue
                }
                for oneValueIgpOfflineDeleted in igpOfflineDeleted {
                    hashCode = (hashCode &* 31) &+ oneValueIgpOfflineDeleted.hashValue
                }
                for oneElementIgpOfflineEdited in igpOfflineEdited {
                    hashCode = (hashCode &* 31) &+ oneElementIgpOfflineEdited.hashValue
                }
                for oneValueIgpOfflineSeen in igpOfflineSeen {
                    hashCode = (hashCode &* 31) &+ oneValueIgpOfflineSeen.hashValue
                }
                if hasIgpClearId {
                    hashCode = (hashCode &* 31) &+ igpClearId.hashValue
                }
                if hasIgpCacheStartId {
                    hashCode = (hashCode &* 31) &+ igpCacheStartId.hashValue
                }
                if hasIgpCacheEndId {
                    hashCode = (hashCode &* 31) &+ igpCacheEndId.hashValue
                }
                if hasIgpOfflineMute {
                     hashCode = (hashCode &* 31) &+ igpOfflineMute.hashValue
                }
                for oneValueIgpOfflineListened in igpOfflineListened {
                    hashCode = (hashCode &* 31) &+ oneValueIgpOfflineListened.hashValue
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPClientCondition.IGPRoom"
        }
        override public func className() -> String {
            return "IGPClientCondition.IGPRoom"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPClientCondition.IGPRoom = IGPClientCondition.IGPRoom()
            public func getMessage() -> IGPClientCondition.IGPRoom {
                return builderResult
            }

            required override public init () {
                super.init()
            }
            public var igpRoomId:Int64 {
                get {
                    return builderResult.igpRoomId
                }
                set (value) {
                    builderResult.hasIgpRoomId = true
                    builderResult.igpRoomId = value
                }
            }
            public var hasIgpRoomId:Bool {
                get {
                    return builderResult.hasIgpRoomId
                }
            }
            @discardableResult
            public func setIgpRoomId(_ value:Int64) -> IGPClientCondition.IGPRoom.Builder {
                self.igpRoomId = value
                return self
            }
            @discardableResult
            public func clearIgpRoomId() -> IGPClientCondition.IGPRoom.Builder{
                builderResult.hasIgpRoomId = false
                builderResult.igpRoomId = Int64(0)
                return self
            }
            public var igpMessageVersion:Int64 {
                get {
                    return builderResult.igpMessageVersion
                }
                set (value) {
                    builderResult.hasIgpMessageVersion = true
                    builderResult.igpMessageVersion = value
                }
            }
            public var hasIgpMessageVersion:Bool {
                get {
                    return builderResult.hasIgpMessageVersion
                }
            }
            @discardableResult
            public func setIgpMessageVersion(_ value:Int64) -> IGPClientCondition.IGPRoom.Builder {
                self.igpMessageVersion = value
                return self
            }
            @discardableResult
            public func clearIgpMessageVersion() -> IGPClientCondition.IGPRoom.Builder{
                builderResult.hasIgpMessageVersion = false
                builderResult.igpMessageVersion = Int64(0)
                return self
            }
            public var igpStatusVersion:Int64 {
                get {
                    return builderResult.igpStatusVersion
                }
                set (value) {
                    builderResult.hasIgpStatusVersion = true
                    builderResult.igpStatusVersion = value
                }
            }
            public var hasIgpStatusVersion:Bool {
                get {
                    return builderResult.hasIgpStatusVersion
                }
            }
            @discardableResult
            public func setIgpStatusVersion(_ value:Int64) -> IGPClientCondition.IGPRoom.Builder {
                self.igpStatusVersion = value
                return self
            }
            @discardableResult
            public func clearIgpStatusVersion() -> IGPClientCondition.IGPRoom.Builder{
                builderResult.hasIgpStatusVersion = false
                builderResult.igpStatusVersion = Int64(0)
                return self
            }
            public var igpDeleteVersion:Int64 {
                get {
                    return builderResult.igpDeleteVersion
                }
                set (value) {
                    builderResult.hasIgpDeleteVersion = true
                    builderResult.igpDeleteVersion = value
                }
            }
            public var hasIgpDeleteVersion:Bool {
                get {
                    return builderResult.hasIgpDeleteVersion
                }
            }
            @discardableResult
            public func setIgpDeleteVersion(_ value:Int64) -> IGPClientCondition.IGPRoom.Builder {
                self.igpDeleteVersion = value
                return self
            }
            @discardableResult
            public func clearIgpDeleteVersion() -> IGPClientCondition.IGPRoom.Builder{
                builderResult.hasIgpDeleteVersion = false
                builderResult.igpDeleteVersion = Int64(0)
                return self
            }
            public var igpOfflineDeleted:Array<Int64> {
                get {
                    return builderResult.igpOfflineDeleted
                }
                set (array) {
                    builderResult.igpOfflineDeleted = array
                }
            }
            @discardableResult
            public func setIgpOfflineDeleted(_ value:Array<Int64>) -> IGPClientCondition.IGPRoom.Builder {
                self.igpOfflineDeleted = value
                return self
            }
            @discardableResult
            public func clearIgpOfflineDeleted() -> IGPClientCondition.IGPRoom.Builder {
                builderResult.igpOfflineDeleted.removeAll(keepingCapacity: false)
                return self
            }
            public var igpOfflineEdited:Array<IGPClientCondition.IGPRoom.IGPOfflineEdited> {
                get {
                    return builderResult.igpOfflineEdited
                }
                set (value) {
                    builderResult.igpOfflineEdited = value
                }
            }
            @discardableResult
            public func setIgpOfflineEdited(_ value:Array<IGPClientCondition.IGPRoom.IGPOfflineEdited>) -> IGPClientCondition.IGPRoom.Builder {
                self.igpOfflineEdited = value
                return self
            }
            @discardableResult
            public func clearIgpOfflineEdited() -> IGPClientCondition.IGPRoom.Builder {
                builderResult.igpOfflineEdited.removeAll(keepingCapacity: false)
                return self
            }
            public var igpOfflineSeen:Array<Int64> {
                get {
                    return builderResult.igpOfflineSeen
                }
                set (array) {
                    builderResult.igpOfflineSeen = array
                }
            }
            @discardableResult
            public func setIgpOfflineSeen(_ value:Array<Int64>) -> IGPClientCondition.IGPRoom.Builder {
                self.igpOfflineSeen = value
                return self
            }
            @discardableResult
            public func clearIgpOfflineSeen() -> IGPClientCondition.IGPRoom.Builder {
                builderResult.igpOfflineSeen.removeAll(keepingCapacity: false)
                return self
            }
            public var igpClearId:Int64 {
                get {
                    return builderResult.igpClearId
                }
                set (value) {
                    builderResult.hasIgpClearId = true
                    builderResult.igpClearId = value
                }
            }
            public var hasIgpClearId:Bool {
                get {
                    return builderResult.hasIgpClearId
                }
            }
            @discardableResult
            public func setIgpClearId(_ value:Int64) -> IGPClientCondition.IGPRoom.Builder {
                self.igpClearId = value
                return self
            }
            @discardableResult
            public func clearIgpClearId() -> IGPClientCondition.IGPRoom.Builder{
                builderResult.hasIgpClearId = false
                builderResult.igpClearId = Int64(0)
                return self
            }
            public var igpCacheStartId:Int64 {
                get {
                    return builderResult.igpCacheStartId
                }
                set (value) {
                    builderResult.hasIgpCacheStartId = true
                    builderResult.igpCacheStartId = value
                }
            }
            public var hasIgpCacheStartId:Bool {
                get {
                    return builderResult.hasIgpCacheStartId
                }
            }
            @discardableResult
            public func setIgpCacheStartId(_ value:Int64) -> IGPClientCondition.IGPRoom.Builder {
                self.igpCacheStartId = value
                return self
            }
            @discardableResult
            public func clearIgpCacheStartId() -> IGPClientCondition.IGPRoom.Builder{
                builderResult.hasIgpCacheStartId = false
                builderResult.igpCacheStartId = Int64(0)
                return self
            }
            public var igpCacheEndId:Int64 {
                get {
                    return builderResult.igpCacheEndId
                }
                set (value) {
                    builderResult.hasIgpCacheEndId = true
                    builderResult.igpCacheEndId = value
                }
            }
            public var hasIgpCacheEndId:Bool {
                get {
                    return builderResult.hasIgpCacheEndId
                }
            }
            @discardableResult
            public func setIgpCacheEndId(_ value:Int64) -> IGPClientCondition.IGPRoom.Builder {
                self.igpCacheEndId = value
                return self
            }
            @discardableResult
            public func clearIgpCacheEndId() -> IGPClientCondition.IGPRoom.Builder{
                builderResult.hasIgpCacheEndId = false
                builderResult.igpCacheEndId = Int64(0)
                return self
            }
                public var igpOfflineMute:IGPClientCondition.IGPRoom.IGPOfflineMute {
                    get {
                        return builderResult.igpOfflineMute
                    }
                    set (value) {
                        builderResult.hasIgpOfflineMute = true
                        builderResult.igpOfflineMute = value
                    }
                }
                public var hasIgpOfflineMute:Bool{
                    get {
                        return builderResult.hasIgpOfflineMute
                    }
                }
            @discardableResult
                public func setIgpOfflineMute(_ value:IGPClientCondition.IGPRoom.IGPOfflineMute) -> IGPClientCondition.IGPRoom.Builder {
                  self.igpOfflineMute = value
                  return self
                }
            @discardableResult
                public func clearIgpOfflineMute() -> IGPClientCondition.IGPRoom.Builder {
                   builderResult.hasIgpOfflineMute = false
                   builderResult.igpOfflineMute = .unchanged
                   return self
                }
            public var igpOfflineListened:Array<Int64> {
                get {
                    return builderResult.igpOfflineListened
                }
                set (array) {
                    builderResult.igpOfflineListened = array
                }
            }
            @discardableResult
            public func setIgpOfflineListened(_ value:Array<Int64>) -> IGPClientCondition.IGPRoom.Builder {
                self.igpOfflineListened = value
                return self
            }
            @discardableResult
            public func clearIgpOfflineListened() -> IGPClientCondition.IGPRoom.Builder {
                builderResult.igpOfflineListened.removeAll(keepingCapacity: false)
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPClientCondition.IGPRoom.Builder {
                builderResult = IGPClientCondition.IGPRoom()
                return self
            }
            override public func clone() throws -> IGPClientCondition.IGPRoom.Builder {
                return try IGPClientCondition.IGPRoom.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPClientCondition.IGPRoom {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPClientCondition.IGPRoom {
                let returnMe:IGPClientCondition.IGPRoom = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPClientCondition.IGPRoom) throws -> IGPClientCondition.IGPRoom.Builder {
                if other == IGPClientCondition.IGPRoom() {
                    return self
                }
                if other.hasIgpRoomId {
                    igpRoomId = other.igpRoomId
                }
                if other.hasIgpMessageVersion {
                    igpMessageVersion = other.igpMessageVersion
                }
                if other.hasIgpStatusVersion {
                    igpStatusVersion = other.igpStatusVersion
                }
                if other.hasIgpDeleteVersion {
                    igpDeleteVersion = other.igpDeleteVersion
                }
                if !other.igpOfflineDeleted.isEmpty {
                    builderResult.igpOfflineDeleted += other.igpOfflineDeleted
                }
                if !other.igpOfflineEdited.isEmpty  {
                     builderResult.igpOfflineEdited += other.igpOfflineEdited
                }
                if !other.igpOfflineSeen.isEmpty {
                    builderResult.igpOfflineSeen += other.igpOfflineSeen
                }
                if other.hasIgpClearId {
                    igpClearId = other.igpClearId
                }
                if other.hasIgpCacheStartId {
                    igpCacheStartId = other.igpCacheStartId
                }
                if other.hasIgpCacheEndId {
                    igpCacheEndId = other.igpCacheEndId
                }
                if other.hasIgpOfflineMute {
                    igpOfflineMute = other.igpOfflineMute
                }
                if !other.igpOfflineListened.isEmpty {
                    builderResult.igpOfflineListened += other.igpOfflineListened
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientCondition.IGPRoom.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 16:
                        igpRoomId = try codedInputStream.readInt64()

                    case 24:
                        igpMessageVersion = try codedInputStream.readInt64()

                    case 32:
                        igpStatusVersion = try codedInputStream.readInt64()

                    case 40:
                        igpDeleteVersion = try codedInputStream.readInt64()

                    case 50:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.igpOfflineDeleted.append(try codedInputStream.readInt64())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 58:
                        let subBuilder = IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder()
                        try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                        igpOfflineEdited.append(subBuilder.buildPartial())

                    case 66:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.igpOfflineSeen.append(try codedInputStream.readInt64())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    case 72:
                        igpClearId = try codedInputStream.readInt64()

                    case 80:
                        igpCacheStartId = try codedInputStream.readInt64()

                    case 88:
                        igpCacheEndId = try codedInputStream.readInt64()

                    case 96:
                        let valueIntigpOfflineMute = try codedInputStream.readEnum()
                        if let enumsigpOfflineMute = IGPClientCondition.IGPRoom.IGPOfflineMute(rawValue:valueIntigpOfflineMute){
                            igpOfflineMute = enumsigpOfflineMute
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 12, value:Int64(valueIntigpOfflineMute))
                        }

                    case 106:
                        let length = Int(try codedInputStream.readRawVarint32())
                        let limit = try codedInputStream.pushLimit(byteLimit: length)
                        while (codedInputStream.bytesUntilLimit() > 0) {
                            builderResult.igpOfflineListened.append(try codedInputStream.readInt64())
                        }
                        codedInputStream.popLimit(oldLimit: limit)

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientCondition.IGPRoom.Builder {
                let resultDecodedBuilder = IGPClientCondition.IGPRoom.Builder()
                if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? String {
                    resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)!
                } else if let jsonValueIgpRoomId = jsonMap["IGPRoomId"] as? Int {
                    resultDecodedBuilder.igpRoomId = Int64(jsonValueIgpRoomId)
                }
                if let jsonValueIgpMessageVersion = jsonMap["IGPMessageVersion"] as? String {
                    resultDecodedBuilder.igpMessageVersion = Int64(jsonValueIgpMessageVersion)!
                } else if let jsonValueIgpMessageVersion = jsonMap["IGPMessageVersion"] as? Int {
                    resultDecodedBuilder.igpMessageVersion = Int64(jsonValueIgpMessageVersion)
                }
                if let jsonValueIgpStatusVersion = jsonMap["IGPStatusVersion"] as? String {
                    resultDecodedBuilder.igpStatusVersion = Int64(jsonValueIgpStatusVersion)!
                } else if let jsonValueIgpStatusVersion = jsonMap["IGPStatusVersion"] as? Int {
                    resultDecodedBuilder.igpStatusVersion = Int64(jsonValueIgpStatusVersion)
                }
                if let jsonValueIgpDeleteVersion = jsonMap["IGPDeleteVersion"] as? String {
                    resultDecodedBuilder.igpDeleteVersion = Int64(jsonValueIgpDeleteVersion)!
                } else if let jsonValueIgpDeleteVersion = jsonMap["IGPDeleteVersion"] as? Int {
                    resultDecodedBuilder.igpDeleteVersion = Int64(jsonValueIgpDeleteVersion)
                }
                if let jsonValueIgpOfflineDeleted = jsonMap["IGPOfflineDeleted"] as? Array<String> {
                    var jsonArrayIgpOfflineDeleted:Array<Int64> = []
                    for oneValueIgpOfflineDeleted in jsonValueIgpOfflineDeleted {
                        jsonArrayIgpOfflineDeleted.append(Int64(oneValueIgpOfflineDeleted)!)
                    }
                    resultDecodedBuilder.igpOfflineDeleted = jsonArrayIgpOfflineDeleted
                }
                if let jsonValueIgpOfflineEdited = jsonMap["IGPOfflineEdited"] as? Array<Dictionary<String,Any>> {
                    var jsonArrayIgpOfflineEdited:Array<IGPClientCondition.IGPRoom.IGPOfflineEdited> = []
                    for oneValueIgpOfflineEdited in jsonValueIgpOfflineEdited {
                        let messageFromStringIgpOfflineEdited = try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder.decodeToBuilder(jsonMap:oneValueIgpOfflineEdited).build()

                        jsonArrayIgpOfflineEdited.append(messageFromStringIgpOfflineEdited)
                    }
                    resultDecodedBuilder.igpOfflineEdited = jsonArrayIgpOfflineEdited
                }
                if let jsonValueIgpOfflineSeen = jsonMap["IGPOfflineSeen"] as? Array<String> {
                    var jsonArrayIgpOfflineSeen:Array<Int64> = []
                    for oneValueIgpOfflineSeen in jsonValueIgpOfflineSeen {
                        jsonArrayIgpOfflineSeen.append(Int64(oneValueIgpOfflineSeen)!)
                    }
                    resultDecodedBuilder.igpOfflineSeen = jsonArrayIgpOfflineSeen
                }
                if let jsonValueIgpClearId = jsonMap["IGPClearId"] as? String {
                    resultDecodedBuilder.igpClearId = Int64(jsonValueIgpClearId)!
                } else if let jsonValueIgpClearId = jsonMap["IGPClearId"] as? Int {
                    resultDecodedBuilder.igpClearId = Int64(jsonValueIgpClearId)
                }
                if let jsonValueIgpCacheStartId = jsonMap["IGPCacheStartId"] as? String {
                    resultDecodedBuilder.igpCacheStartId = Int64(jsonValueIgpCacheStartId)!
                } else if let jsonValueIgpCacheStartId = jsonMap["IGPCacheStartId"] as? Int {
                    resultDecodedBuilder.igpCacheStartId = Int64(jsonValueIgpCacheStartId)
                }
                if let jsonValueIgpCacheEndId = jsonMap["IGPCacheEndId"] as? String {
                    resultDecodedBuilder.igpCacheEndId = Int64(jsonValueIgpCacheEndId)!
                } else if let jsonValueIgpCacheEndId = jsonMap["IGPCacheEndId"] as? Int {
                    resultDecodedBuilder.igpCacheEndId = Int64(jsonValueIgpCacheEndId)
                }
                if let jsonValueIgpOfflineMute = jsonMap["IGPOfflineMute"] as? String {
                    resultDecodedBuilder.igpOfflineMute = try IGPClientCondition.IGPRoom.IGPOfflineMute.fromString(str: jsonValueIgpOfflineMute)
                }
                if let jsonValueIgpOfflineListened = jsonMap["IGPOfflineListened"] as? Array<String> {
                    var jsonArrayIgpOfflineListened:Array<Int64> = []
                    for oneValueIgpOfflineListened in jsonValueIgpOfflineListened {
                        jsonArrayIgpOfflineListened.append(Int64(oneValueIgpOfflineListened)!)
                    }
                    resultDecodedBuilder.igpOfflineListened = jsonArrayIgpOfflineListened
                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPClientCondition.IGPRoom.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPClientCondition.IGPRoom.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpRooms:Array<IGPClientCondition.IGPRoom>  = Array<IGPClientCondition.IGPRoom>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        for oneElementIgpRooms in igpRooms {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpRooms)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        for oneElementIgpRooms in igpRooms {
            serialize_size += oneElementIgpRooms.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientCondition.Builder {
        return IGPClientCondition.classBuilder() as! IGPClientCondition.Builder
    }
    public func getBuilder() -> IGPClientCondition.Builder {
        return classBuilder() as! IGPClientCondition.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientCondition.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientCondition.Builder()
    }
    public func toBuilder() throws -> IGPClientCondition.Builder {
        return try IGPClientCondition.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientCondition) throws -> IGPClientCondition.Builder {
        return try IGPClientCondition.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if !igpRooms.isEmpty {
            var jsonArrayIgpRooms:Array<Dictionary<String,Any>> = []
            for oneValueIgpRooms in igpRooms {
                let ecodedMessageIgpRooms = try oneValueIgpRooms.encode()
                jsonArrayIgpRooms.append(ecodedMessageIgpRooms)
            }
            jsonMap["IGPRooms"] = jsonArrayIgpRooms
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpRoomsElementIndex:Int = 0
        for oneElementIgpRooms in igpRooms {
            output += "\(indent) igpRooms[\(igpRoomsElementIndex)] {\n"
            output += try oneElementIgpRooms.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpRoomsElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            for oneElementIgpRooms in igpRooms {
                hashCode = (hashCode &* 31) &+ oneElementIgpRooms.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientCondition"
    }
    override public func className() -> String {
        return "IGPClientCondition"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPClientCondition = IGPClientCondition()
        public func getMessage() -> IGPClientCondition {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPClientCondition.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPClientCondition.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPClientCondition.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpRooms:Array<IGPClientCondition.IGPRoom> {
            get {
                return builderResult.igpRooms
            }
            set (value) {
                builderResult.igpRooms = value
            }
        }
        @discardableResult
        public func setIgpRooms(_ value:Array<IGPClientCondition.IGPRoom>) -> IGPClientCondition.Builder {
            self.igpRooms = value
            return self
        }
        @discardableResult
        public func clearIgpRooms() -> IGPClientCondition.Builder {
            builderResult.igpRooms.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientCondition.Builder {
            builderResult = IGPClientCondition()
            return self
        }
        override public func clone() throws -> IGPClientCondition.Builder {
            return try IGPClientCondition.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientCondition {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientCondition {
            let returnMe:IGPClientCondition = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientCondition) throws -> IGPClientCondition.Builder {
            if other == IGPClientCondition() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if !other.igpRooms.isEmpty  {
                 builderResult.igpRooms += other.igpRooms
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientCondition.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPClientCondition.IGPRoom.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpRooms.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientCondition.Builder {
            let resultDecodedBuilder = IGPClientCondition.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpRooms = jsonMap["IGPRooms"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpRooms:Array<IGPClientCondition.IGPRoom> = []
                for oneValueIgpRooms in jsonValueIgpRooms {
                    let messageFromStringIgpRooms = try IGPClientCondition.IGPRoom.Builder.decodeToBuilder(jsonMap:oneValueIgpRooms).build()

                    jsonArrayIgpRooms.append(messageFromStringIgpRooms)
                }
                resultDecodedBuilder.igpRooms = jsonArrayIgpRooms
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientCondition.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientCondition.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPClientConditionResponse : GeneratedResponseMessage {

    public static func == (lhs: IGPClientConditionResponse, rhs: IGPClientConditionResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientConditionResponse.Builder {
        return IGPClientConditionResponse.classBuilder() as! IGPClientConditionResponse.Builder
    }
    public func getBuilder() -> IGPClientConditionResponse.Builder {
        return classBuilder() as! IGPClientConditionResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientConditionResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientConditionResponse.Builder()
    }
    public func toBuilder() throws -> IGPClientConditionResponse.Builder {
        return try IGPClientConditionResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientConditionResponse) throws -> IGPClientConditionResponse.Builder {
        return try IGPClientConditionResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientConditionResponse"
    }
    override public func className() -> String {
        return "IGPClientConditionResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPClientConditionResponse = IGPClientConditionResponse()
        public func getMessage() -> IGPClientConditionResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPClientConditionResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPClientConditionResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPClientConditionResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientConditionResponse.Builder {
            builderResult = IGPClientConditionResponse()
            return self
        }
        override public func clone() throws -> IGPClientConditionResponse.Builder {
            return try IGPClientConditionResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientConditionResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientConditionResponse {
            let returnMe:IGPClientConditionResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientConditionResponse) throws -> IGPClientConditionResponse.Builder {
            if other == IGPClientConditionResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientConditionResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientConditionResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientConditionResponse.Builder {
            let resultDecodedBuilder = IGPClientConditionResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientConditionResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientConditionResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPClientCondition: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientCondition> {
        var mergedArray = Array<IGPClientCondition>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientCondition? {
        return try IGPClientCondition.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder().mergeFrom(data: data, extensionRegistry:ClientConditionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition {
        return try IGPClientCondition.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpRooms": return self.igpRooms
        default: return nil
        }
    }
}
extension IGPClientCondition.IGPRoom: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientCondition.IGPRoom> {
        var mergedArray = Array<IGPClientCondition.IGPRoom>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientCondition.IGPRoom? {
        return try IGPClientCondition.IGPRoom.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientCondition.IGPRoom {
        return try IGPClientCondition.IGPRoom.Builder().mergeFrom(data: data, extensionRegistry:ClientConditionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom {
        return try IGPClientCondition.IGPRoom.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientCondition.IGPRoom {
        return try IGPClientCondition.IGPRoom.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom {
        return try IGPClientCondition.IGPRoom.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientCondition.IGPRoom {
        return try IGPClientCondition.IGPRoom.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom {
        return try IGPClientCondition.IGPRoom.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRoomId": return self.igpRoomId
        case "igpMessageVersion": return self.igpMessageVersion
        case "igpStatusVersion": return self.igpStatusVersion
        case "igpDeleteVersion": return self.igpDeleteVersion
        case "igpOfflineDeleted": return self.igpOfflineDeleted
        case "igpOfflineEdited": return self.igpOfflineEdited
        case "igpOfflineSeen": return self.igpOfflineSeen
        case "igpClearId": return self.igpClearId
        case "igpCacheStartId": return self.igpCacheStartId
        case "igpCacheEndId": return self.igpCacheEndId
        case "igpOfflineMute": return self.igpOfflineMute
        case "igpOfflineListened": return self.igpOfflineListened
        default: return nil
        }
    }
}
extension IGPClientCondition.IGPRoom.IGPOfflineEdited: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientCondition.IGPRoom.IGPOfflineEdited> {
        var mergedArray = Array<IGPClientCondition.IGPRoom.IGPOfflineEdited>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited? {
        return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
        return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeFrom(data: data, extensionRegistry:ClientConditionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
        return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
        return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
        return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
        return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientCondition.IGPRoom.IGPOfflineEdited {
        return try IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpMessageId": return self.igpMessageId
        case "igpMessage": return self.igpMessage
        default: return nil
        }
    }
}
extension IGPClientCondition.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpRooms": return self.igpRooms
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpRooms":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPClientCondition.IGPRoom> else {
                    return
                }
                self.igpRooms = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPClientCondition.IGPRoom.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRoomId": return self.igpRoomId
            case "igpMessageVersion": return self.igpMessageVersion
            case "igpStatusVersion": return self.igpStatusVersion
            case "igpDeleteVersion": return self.igpDeleteVersion
            case "igpOfflineDeleted": return self.igpOfflineDeleted
            case "igpOfflineEdited": return self.igpOfflineEdited
            case "igpOfflineSeen": return self.igpOfflineSeen
            case "igpClearId": return self.igpClearId
            case "igpCacheStartId": return self.igpCacheStartId
            case "igpCacheEndId": return self.igpCacheEndId
            case "igpOfflineMute": return self.igpOfflineMute
            case "igpOfflineListened": return self.igpOfflineListened
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRoomId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpRoomId = newSubscriptValue
            case "igpMessageVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageVersion = newSubscriptValue
            case "igpStatusVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpStatusVersion = newSubscriptValue
            case "igpDeleteVersion":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpDeleteVersion = newSubscriptValue
            case "igpOfflineDeleted":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int64> else {
                    return
                }
                self.igpOfflineDeleted = newSubscriptValue
            case "igpOfflineEdited":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPClientCondition.IGPRoom.IGPOfflineEdited> else {
                    return
                }
                self.igpOfflineEdited = newSubscriptValue
            case "igpOfflineSeen":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int64> else {
                    return
                }
                self.igpOfflineSeen = newSubscriptValue
            case "igpClearId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpClearId = newSubscriptValue
            case "igpCacheStartId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpCacheStartId = newSubscriptValue
            case "igpCacheEndId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpCacheEndId = newSubscriptValue
            case "igpOfflineMute":
                guard let newSubscriptValue = newSubscriptValue as? IGPClientCondition.IGPRoom.IGPOfflineMute else {
                    return
                }
                self.igpOfflineMute = newSubscriptValue
            case "igpOfflineListened":
                guard let newSubscriptValue = newSubscriptValue as? Array<Int64> else {
                    return
                }
                self.igpOfflineListened = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPClientCondition.IGPRoom.IGPOfflineEdited.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpMessageId": return self.igpMessageId
            case "igpMessage": return self.igpMessage
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpMessageId":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.igpMessageId = newSubscriptValue
            case "igpMessage":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpMessage = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPClientConditionResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientConditionResponse> {
        var mergedArray = Array<IGPClientConditionResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientConditionResponse? {
        return try IGPClientConditionResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder().mergeFrom(data: data, extensionRegistry:ClientConditionRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientConditionResponse {
        return try IGPClientConditionResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        default: return nil
        }
    }
}
extension IGPClientConditionResponse.Builder: GeneratedMessageBuilderProtocol {
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
