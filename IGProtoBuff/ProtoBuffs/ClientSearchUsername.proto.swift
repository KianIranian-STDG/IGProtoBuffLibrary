/// Generated by the Protocol Buffers 3.4.0 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 3.0.22
/// Source file "ClientSearchUsername.proto"
/// Syntax "Proto3"

import Foundation
import ProtocolBuffers


public struct ClientSearchUsernameRoot {
    public static let `default` = ClientSearchUsernameRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
        RequestRoot.default.registerAllExtensions(registry: extensionRegistry)
        ResponseRoot.default.registerAllExtensions(registry: extensionRegistry)
        GlobalRoot.default.registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class IGPClientSearchUsername : GeneratedMessage {
    public typealias BuilderType = IGPClientSearchUsername.Builder

    public static func == (lhs: IGPClientSearchUsername, rhs: IGPClientSearchUsername) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpRequest == rhs.hasIgpRequest) && (!lhs.hasIgpRequest || lhs.igpRequest == rhs.igpRequest)
        fieldCheck = fieldCheck && (lhs.hasIgpQuery == rhs.hasIgpQuery) && (!lhs.hasIgpQuery || lhs.igpQuery == rhs.igpQuery)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpRequest:IGPRequest!
    public fileprivate(set) var hasIgpRequest:Bool = false
    public fileprivate(set) var igpQuery:String! = nil
    public fileprivate(set) var hasIgpQuery:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpRequest {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpRequest)
        }
        if hasIgpQuery {
            try codedOutputStream.writeString(fieldNumber: 2, value:igpQuery)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpRequest {
            if let varSizeigpRequest = igpRequest?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpRequest
            }
        }
        if hasIgpQuery {
            serialize_size += igpQuery.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientSearchUsername.Builder {
        return IGPClientSearchUsername.classBuilder() as! IGPClientSearchUsername.Builder
    }
    public func getBuilder() -> IGPClientSearchUsername.Builder {
        return classBuilder() as! IGPClientSearchUsername.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchUsername.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchUsername.Builder()
    }
    public func toBuilder() throws -> IGPClientSearchUsername.Builder {
        return try IGPClientSearchUsername.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientSearchUsername) throws -> IGPClientSearchUsername.Builder {
        return try IGPClientSearchUsername.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpRequest {
            jsonMap["IGPRequest"] = try igpRequest.encode()
        }
        if hasIgpQuery {
            jsonMap["IGPQuery"] = igpQuery
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpRequest {
            output += "\(indent) igpRequest {\n"
            if let outDescIgpRequest = igpRequest {
                output += try outDescIgpRequest.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasIgpQuery {
            output += "\(indent) igpQuery: \(igpQuery) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpRequest {
                if let hashValueigpRequest = igpRequest?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpRequest
                }
            }
            if hasIgpQuery {
                hashCode = (hashCode &* 31) &+ igpQuery.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientSearchUsername"
    }
    override public func className() -> String {
        return "IGPClientSearchUsername"
    }
    //Meta information declaration end

    final public class Builder : GeneratedRequestMessageBuilder {
        fileprivate var builderResult:IGPClientSearchUsername = IGPClientSearchUsername()
        public func getMessage() -> IGPClientSearchUsername {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpRequest:IGPRequest! {
            get {
                if igpRequestBuilder_ != nil {
                    builderResult.igpRequest = igpRequestBuilder_.getMessage()
                }
                return builderResult.igpRequest
            }
            set (value) {
                builderResult.hasIgpRequest = true
                builderResult.igpRequest = value
            }
        }
        public var hasIgpRequest:Bool {
            get {
                return builderResult.hasIgpRequest
            }
        }
        fileprivate var igpRequestBuilder_:IGPRequest.Builder! {
            didSet {
                builderResult.hasIgpRequest = true
            }
        }
        public func getIgpRequestBuilder() -> IGPRequest.Builder {
            if igpRequestBuilder_ == nil {
                igpRequestBuilder_ = IGPRequest.Builder()
                builderResult.igpRequest = igpRequestBuilder_.getMessage()
                if igpRequest != nil {
                    try! igpRequestBuilder_.mergeFrom(other: igpRequest)
                }
            }
            return igpRequestBuilder_
        }
        @discardableResult
        public override func setIgpRequest(_ value:IGPRequest!) -> IGPClientSearchUsername.Builder {
            self.igpRequest = value
            return self
        }
        @discardableResult
        public func mergeIgpRequest(value:IGPRequest) throws -> IGPClientSearchUsername.Builder {
            if builderResult.hasIgpRequest {
                builderResult.igpRequest = try IGPRequest.builderWithPrototype(prototype:builderResult.igpRequest).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpRequest = value
            }
            builderResult.hasIgpRequest = true
            return self
        }
        @discardableResult
        public func clearIgpRequest() -> IGPClientSearchUsername.Builder {
            igpRequestBuilder_ = nil
            builderResult.hasIgpRequest = false
            builderResult.igpRequest = nil
            return self
        }
        public var igpQuery:String {
            get {
                return builderResult.igpQuery
            }
            set (value) {
                builderResult.hasIgpQuery = true
                builderResult.igpQuery = value
            }
        }
        public var hasIgpQuery:Bool {
            get {
                return builderResult.hasIgpQuery
            }
        }
        @discardableResult
        public func setIgpQuery(_ value:String) -> IGPClientSearchUsername.Builder {
            self.igpQuery = value
            return self
        }
        @discardableResult
        public func clearIgpQuery() -> IGPClientSearchUsername.Builder{
            builderResult.hasIgpQuery = false
            builderResult.igpQuery = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientSearchUsername.Builder {
            builderResult = IGPClientSearchUsername()
            return self
        }
        override public func clone() throws -> IGPClientSearchUsername.Builder {
            return try IGPClientSearchUsername.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientSearchUsername {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientSearchUsername {
            let returnMe:IGPClientSearchUsername = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientSearchUsername) throws -> IGPClientSearchUsername.Builder {
            if other == IGPClientSearchUsername() {
                return self
            }
            if (other.hasIgpRequest) {
                try mergeIgpRequest(value: other.igpRequest)
            }
            if other.hasIgpQuery {
                igpQuery = other.igpQuery
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchUsername.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsername.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPRequest.Builder = IGPRequest.Builder()
                    if hasIgpRequest {
                        try subBuilder.mergeFrom(other: igpRequest)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpRequest = subBuilder.buildPartial()

                case 18:
                    igpQuery = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchUsername.Builder {
            let resultDecodedBuilder = IGPClientSearchUsername.Builder()
            if let jsonValueIgpRequest = jsonMap["IGPRequest"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpRequest = try IGPRequest.Builder.decodeToBuilder(jsonMap:jsonValueIgpRequest).build()

            }
            if let jsonValueIgpQuery = jsonMap["IGPQuery"] as? String {
                resultDecodedBuilder.igpQuery = jsonValueIgpQuery
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientSearchUsername.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientSearchUsername.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class IGPClientSearchUsernameResponse : GeneratedResponseMessage {
    public typealias BuilderType = IGPClientSearchUsernameResponse.Builder

    public static func == (lhs: IGPClientSearchUsernameResponse, rhs: IGPClientSearchUsernameResponse) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasIgpResponse == rhs.hasIgpResponse) && (!lhs.hasIgpResponse || lhs.igpResponse == rhs.igpResponse)
        fieldCheck = fieldCheck && (lhs.igpResult == rhs.igpResult)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }



    //Nested type declaration start

    final public class IGPResult : GeneratedMessage {
        public typealias BuilderType = IGPClientSearchUsernameResponse.IGPResult.Builder

        public static func == (lhs: IGPClientSearchUsernameResponse.IGPResult, rhs: IGPClientSearchUsernameResponse.IGPResult) -> Bool {
            if lhs === rhs {
                return true
            }
            var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
            fieldCheck = fieldCheck && (lhs.hasIgpType == rhs.hasIgpType) && (!lhs.hasIgpType || lhs.igpType == rhs.igpType)
            fieldCheck = fieldCheck && (lhs.hasIgpExactMatch == rhs.hasIgpExactMatch) && (!lhs.hasIgpExactMatch || lhs.igpExactMatch == rhs.igpExactMatch)
            fieldCheck = fieldCheck && (lhs.hasIgpUser == rhs.hasIgpUser) && (!lhs.hasIgpUser || lhs.igpUser == rhs.igpUser)
            fieldCheck = fieldCheck && (lhs.hasIgpRoom == rhs.hasIgpRoom) && (!lhs.hasIgpRoom || lhs.igpRoom == rhs.igpRoom)
            fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
            return fieldCheck
        }



        //iGap Properties declaration start



        //iGap Properties declaration end



            //Enum type declaration start 

            public enum IGPType:Int32, GeneratedEnum {
                case user = 0
                case room = 1
                public func toString() -> String {
                    switch self {
                    case .user: return "USER"
                    case .room: return "ROOM"
                    }
                }
                public static func fromString(_ str:String) throws -> IGPClientSearchUsernameResponse.IGPResult.IGPType {
                    switch str {
                    case "USER":    return .user
                    case "ROOM":    return .room
                    default: throw ProtocolBuffersError.invalidProtocolBuffer("Conversion failed.")
                    }
                }
                public var debugDescription:String { return getDescription() }
                public var description:String { return getDescription() }
                private func getDescription() -> String { 
                    switch self {
                    case .user: return ".user"
                    case .room: return ".room"
                    }
                }
                public var hashValue:Int {
                    return self.rawValue.hashValue
                }
                public static func ==(lhs:IGPType, rhs:IGPType) -> Bool {
                    return lhs.hashValue == rhs.hashValue
                }
            }

            //Enum type declaration end 

        public fileprivate(set) var igpType:IGPClientSearchUsernameResponse.IGPResult.IGPType = IGPClientSearchUsernameResponse.IGPResult.IGPType.user
        public fileprivate(set) var hasIgpType:Bool = false
        public fileprivate(set) var igpExactMatch:Bool! = nil
        public fileprivate(set) var hasIgpExactMatch:Bool = false

        public fileprivate(set) var igpUser:IGPRegisteredUser!
        public fileprivate(set) var hasIgpUser:Bool = false
        public fileprivate(set) var igpRoom:IGPRoom!
        public fileprivate(set) var hasIgpRoom:Bool = false
        required public init() {
            super.init()
        }
        override public func isInitialized() -> Bool {
            return true
        }
        override public func writeTo(codedOutputStream: CodedOutputStream) throws {
            if hasIgpType {
                try codedOutputStream.writeEnum(fieldNumber: 1, value:igpType.rawValue)
            }
            if hasIgpExactMatch {
                try codedOutputStream.writeBool(fieldNumber: 2, value:igpExactMatch)
            }
            if hasIgpUser {
                try codedOutputStream.writeMessage(fieldNumber: 3, value:igpUser)
            }
            if hasIgpRoom {
                try codedOutputStream.writeMessage(fieldNumber: 4, value:igpRoom)
            }
            try unknownFields.writeTo(codedOutputStream: codedOutputStream)
        }
        override public func serializedSize() -> Int32 {
            var serialize_size:Int32 = memoizedSerializedSize
            if serialize_size != -1 {
             return serialize_size
            }

            serialize_size = 0
            if (hasIgpType) {
                serialize_size += igpType.rawValue.computeEnumSize(fieldNumber: 1)
            }
            if hasIgpExactMatch {
                serialize_size += igpExactMatch.computeBoolSize(fieldNumber: 2)
            }
            if hasIgpUser {
                if let varSizeigpUser = igpUser?.computeMessageSize(fieldNumber: 3) {
                    serialize_size += varSizeigpUser
                }
            }
            if hasIgpRoom {
                if let varSizeigpRoom = igpRoom?.computeMessageSize(fieldNumber: 4) {
                    serialize_size += varSizeigpRoom
                }
            }
            serialize_size += unknownFields.serializedSize()
            memoizedSerializedSize = serialize_size
            return serialize_size
        }
        public class func getBuilder() -> IGPClientSearchUsernameResponse.IGPResult.Builder {
            return IGPClientSearchUsernameResponse.IGPResult.classBuilder() as! IGPClientSearchUsernameResponse.IGPResult.Builder
        }
        public func getBuilder() -> IGPClientSearchUsernameResponse.IGPResult.Builder {
            return classBuilder() as! IGPClientSearchUsernameResponse.IGPResult.Builder
        }
        override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPClientSearchUsernameResponse.IGPResult.Builder()
        }
        override public func classBuilder() -> ProtocolBuffersMessageBuilder {
            return IGPClientSearchUsernameResponse.IGPResult.Builder()
        }
        public func toBuilder() throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
            return try IGPClientSearchUsernameResponse.IGPResult.builderWithPrototype(prototype:self)
        }
        public class func builderWithPrototype(prototype:IGPClientSearchUsernameResponse.IGPResult) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
            return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeFrom(other:prototype)
        }
        override public func encode() throws -> Dictionary<String,Any> {
            guard isInitialized() else {
                throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
            }

            var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
            if hasIgpType {
                jsonMap["IGPType"] = igpType.toString()
            }
            if hasIgpExactMatch {
                jsonMap["IGPExactMatch"] = igpExactMatch
            }
            if hasIgpUser {
                jsonMap["IGPUser"] = try igpUser.encode()
            }
            if hasIgpRoom {
                jsonMap["IGPRoom"] = try igpRoom.encode()
            }
            return jsonMap
        }
        override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchUsernameResponse.IGPResult {
            return try IGPClientSearchUsernameResponse.IGPResult.Builder.decodeToBuilder(jsonMap:jsonMap).build()
        }
        override class public func fromJSON(data:Data) throws -> IGPClientSearchUsernameResponse.IGPResult {
            return try IGPClientSearchUsernameResponse.IGPResult.Builder.fromJSONToBuilder(data:data).build()
        }
        override public func getDescription(indent:String) throws -> String {
            var output = ""
            if (hasIgpType) {
                output += "\(indent) igpType: \(igpType.description)\n"
            }
            if hasIgpExactMatch {
                output += "\(indent) igpExactMatch: \(igpExactMatch) \n"
            }
            if hasIgpUser {
                output += "\(indent) igpUser {\n"
                if let outDescIgpUser = igpUser {
                    output += try outDescIgpUser.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            if hasIgpRoom {
                output += "\(indent) igpRoom {\n"
                if let outDescIgpRoom = igpRoom {
                    output += try outDescIgpRoom.getDescription(indent: "\(indent)  ")
                }
                output += "\(indent) }\n"
            }
            output += unknownFields.getDescription(indent: indent)
            return output
        }
        override public var hashValue:Int {
            get {
                var hashCode:Int = 7
                if hasIgpType {
                     hashCode = (hashCode &* 31) &+ igpType.hashValue
                }
                if hasIgpExactMatch {
                    hashCode = (hashCode &* 31) &+ igpExactMatch.hashValue
                }
                if hasIgpUser {
                    if let hashValueigpUser = igpUser?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueigpUser
                    }
                }
                if hasIgpRoom {
                    if let hashValueigpRoom = igpRoom?.hashValue {
                        hashCode = (hashCode &* 31) &+ hashValueigpRoom
                    }
                }
                hashCode = (hashCode &* 31) &+  unknownFields.hashValue
                return hashCode
            }
        }


        //Meta information declaration start

        override public class func className() -> String {
            return "IGPClientSearchUsernameResponse.IGPResult"
        }
        override public func className() -> String {
            return "IGPClientSearchUsernameResponse.IGPResult"
        }
        //Meta information declaration end

        final public class Builder : GeneratedMessageBuilder {
            fileprivate var builderResult:IGPClientSearchUsernameResponse.IGPResult = IGPClientSearchUsernameResponse.IGPResult()
            public func getMessage() -> IGPClientSearchUsernameResponse.IGPResult {
                return builderResult
            }

            required override public init () {
                super.init()
            }
                public var igpType:IGPClientSearchUsernameResponse.IGPResult.IGPType {
                    get {
                        return builderResult.igpType
                    }
                    set (value) {
                        builderResult.hasIgpType = true
                        builderResult.igpType = value
                    }
                }
                public var hasIgpType:Bool{
                    get {
                        return builderResult.hasIgpType
                    }
                }
            @discardableResult
                public func setIgpType(_ value:IGPClientSearchUsernameResponse.IGPResult.IGPType) -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                  self.igpType = value
                  return self
                }
            @discardableResult
                public func clearIgpType() -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                   builderResult.hasIgpType = false
                   builderResult.igpType = .user
                   return self
                }
            public var igpExactMatch:Bool {
                get {
                    return builderResult.igpExactMatch
                }
                set (value) {
                    builderResult.hasIgpExactMatch = true
                    builderResult.igpExactMatch = value
                }
            }
            public var hasIgpExactMatch:Bool {
                get {
                    return builderResult.hasIgpExactMatch
                }
            }
            @discardableResult
            public func setIgpExactMatch(_ value:Bool) -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                self.igpExactMatch = value
                return self
            }
            @discardableResult
            public func clearIgpExactMatch() -> IGPClientSearchUsernameResponse.IGPResult.Builder{
                builderResult.hasIgpExactMatch = false
                builderResult.igpExactMatch = nil
                return self
            }
            public var igpUser:IGPRegisteredUser! {
                get {
                    if igpUserBuilder_ != nil {
                        builderResult.igpUser = igpUserBuilder_.getMessage()
                    }
                    return builderResult.igpUser
                }
                set (value) {
                    builderResult.hasIgpUser = true
                    builderResult.igpUser = value
                }
            }
            public var hasIgpUser:Bool {
                get {
                    return builderResult.hasIgpUser
                }
            }
            fileprivate var igpUserBuilder_:IGPRegisteredUser.Builder! {
                didSet {
                    builderResult.hasIgpUser = true
                }
            }
            public func getIgpUserBuilder() -> IGPRegisteredUser.Builder {
                if igpUserBuilder_ == nil {
                    igpUserBuilder_ = IGPRegisteredUser.Builder()
                    builderResult.igpUser = igpUserBuilder_.getMessage()
                    if igpUser != nil {
                        try! igpUserBuilder_.mergeFrom(other: igpUser)
                    }
                }
                return igpUserBuilder_
            }
            @discardableResult
            public func setIgpUser(_ value:IGPRegisteredUser!) -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                self.igpUser = value
                return self
            }
            @discardableResult
            public func mergeIgpUser(value:IGPRegisteredUser) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                if builderResult.hasIgpUser {
                    builderResult.igpUser = try IGPRegisteredUser.builderWithPrototype(prototype:builderResult.igpUser).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.igpUser = value
                }
                builderResult.hasIgpUser = true
                return self
            }
            @discardableResult
            public func clearIgpUser() -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                igpUserBuilder_ = nil
                builderResult.hasIgpUser = false
                builderResult.igpUser = nil
                return self
            }
            public var igpRoom:IGPRoom! {
                get {
                    if igpRoomBuilder_ != nil {
                        builderResult.igpRoom = igpRoomBuilder_.getMessage()
                    }
                    return builderResult.igpRoom
                }
                set (value) {
                    builderResult.hasIgpRoom = true
                    builderResult.igpRoom = value
                }
            }
            public var hasIgpRoom:Bool {
                get {
                    return builderResult.hasIgpRoom
                }
            }
            fileprivate var igpRoomBuilder_:IGPRoom.Builder! {
                didSet {
                    builderResult.hasIgpRoom = true
                }
            }
            public func getIgpRoomBuilder() -> IGPRoom.Builder {
                if igpRoomBuilder_ == nil {
                    igpRoomBuilder_ = IGPRoom.Builder()
                    builderResult.igpRoom = igpRoomBuilder_.getMessage()
                    if igpRoom != nil {
                        try! igpRoomBuilder_.mergeFrom(other: igpRoom)
                    }
                }
                return igpRoomBuilder_
            }
            @discardableResult
            public func setIgpRoom(_ value:IGPRoom!) -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                self.igpRoom = value
                return self
            }
            @discardableResult
            public func mergeIgpRoom(value:IGPRoom) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                if builderResult.hasIgpRoom {
                    builderResult.igpRoom = try IGPRoom.builderWithPrototype(prototype:builderResult.igpRoom).mergeFrom(other: value).buildPartial()
                } else {
                    builderResult.igpRoom = value
                }
                builderResult.hasIgpRoom = true
                return self
            }
            @discardableResult
            public func clearIgpRoom() -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                igpRoomBuilder_ = nil
                builderResult.hasIgpRoom = false
                builderResult.igpRoom = nil
                return self
            }
            override public var internalGetResult:GeneratedMessage {
                get {
                    return builderResult
                }
            }
            @discardableResult
            override public func clear() -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                builderResult = IGPClientSearchUsernameResponse.IGPResult()
                return self
            }
            override public func clone() throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                return try IGPClientSearchUsernameResponse.IGPResult.builderWithPrototype(prototype:builderResult)
            }
            override public func build() throws -> IGPClientSearchUsernameResponse.IGPResult {
                try checkInitialized()
                return buildPartial()
            }
            public func buildPartial() -> IGPClientSearchUsernameResponse.IGPResult {
                let returnMe:IGPClientSearchUsernameResponse.IGPResult = builderResult
                return returnMe
            }
            @discardableResult
            public func mergeFrom(other:IGPClientSearchUsernameResponse.IGPResult) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                if other == IGPClientSearchUsernameResponse.IGPResult() {
                    return self
                }
                if other.hasIgpType {
                    igpType = other.igpType
                }
                if other.hasIgpExactMatch {
                    igpExactMatch = other.igpExactMatch
                }
                if (other.hasIgpUser) {
                    try mergeIgpUser(value: other.igpUser)
                }
                if (other.hasIgpRoom) {
                    try mergeIgpRoom(value: other.igpRoom)
                }
                try merge(unknownField: other.unknownFields)
                return self
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
            }
            @discardableResult
            override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
                while (true) {
                    let protobufTag = try codedInputStream.readTag()
                    switch protobufTag {
                    case 0: 
                        self.unknownFields = try unknownFieldsBuilder.build()
                        return self

                    case 8:
                        let valueIntigpType = try codedInputStream.readEnum()
                        if let enumsigpType = IGPClientSearchUsernameResponse.IGPResult.IGPType(rawValue:valueIntigpType){
                            igpType = enumsigpType
                        } else {
                            try unknownFieldsBuilder.mergeVarintField(fieldNumber: 1, value:Int64(valueIntigpType))
                        }

                    case 16:
                        igpExactMatch = try codedInputStream.readBool()

                    case 26:
                        let subBuilder:IGPRegisteredUser.Builder = IGPRegisteredUser.Builder()
                        if hasIgpUser {
                            try subBuilder.mergeFrom(other: igpUser)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        igpUser = subBuilder.buildPartial()

                    case 34:
                        let subBuilder:IGPRoom.Builder = IGPRoom.Builder()
                        if hasIgpRoom {
                            try subBuilder.mergeFrom(other: igpRoom)
                        }
                        try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                        igpRoom = subBuilder.buildPartial()

                    default:
                        if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                            unknownFields = try unknownFieldsBuilder.build()
                            return self
                        }
                    }
                }
            }
            class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                let resultDecodedBuilder = IGPClientSearchUsernameResponse.IGPResult.Builder()
                if let jsonValueIgpType = jsonMap["IGPType"] as? String {
                    resultDecodedBuilder.igpType = try IGPClientSearchUsernameResponse.IGPResult.IGPType.fromString(jsonValueIgpType)
                }
                if let jsonValueIgpExactMatch = jsonMap["IGPExactMatch"] as? Bool {
                    resultDecodedBuilder.igpExactMatch = jsonValueIgpExactMatch
                }
                if let jsonValueIgpUser = jsonMap["IGPUser"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.igpUser = try IGPRegisteredUser.Builder.decodeToBuilder(jsonMap:jsonValueIgpUser).build()

                }
                if let jsonValueIgpRoom = jsonMap["IGPRoom"] as? Dictionary<String,Any> {
                    resultDecodedBuilder.igpRoom = try IGPRoom.Builder.decodeToBuilder(jsonMap:jsonValueIgpRoom).build()

                }
                return resultDecodedBuilder
            }
            override class public func fromJSONToBuilder(data:Data) throws -> IGPClientSearchUsernameResponse.IGPResult.Builder {
                let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
                guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
                  throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
                }
                return try IGPClientSearchUsernameResponse.IGPResult.Builder.decodeToBuilder(jsonMap:jsDataCast)
            }
        }

    }

    //Nested type declaration end



    //iGap Properties declaration start



    //iGap Properties declaration end

    public fileprivate(set) var igpResult:Array<IGPClientSearchUsernameResponse.IGPResult>  = Array<IGPClientSearchUsernameResponse.IGPResult>()
    required public init() {
        super.init()
    }
    override public func isInitialized() -> Bool {
        return true
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasIgpResponse {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:igpResponse)
        }
        for oneElementIgpResult in igpResult {
              try codedOutputStream.writeMessage(fieldNumber: 2, value:oneElementIgpResult)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasIgpResponse {
            if let varSizeigpResponse = igpResponse?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeigpResponse
            }
        }
        for oneElementIgpResult in igpResult {
            serialize_size += oneElementIgpResult.computeMessageSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> IGPClientSearchUsernameResponse.Builder {
        return IGPClientSearchUsernameResponse.classBuilder() as! IGPClientSearchUsernameResponse.Builder
    }
    public func getBuilder() -> IGPClientSearchUsernameResponse.Builder {
        return classBuilder() as! IGPClientSearchUsernameResponse.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchUsernameResponse.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return IGPClientSearchUsernameResponse.Builder()
    }
    public func toBuilder() throws -> IGPClientSearchUsernameResponse.Builder {
        return try IGPClientSearchUsernameResponse.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:IGPClientSearchUsernameResponse) throws -> IGPClientSearchUsernameResponse.Builder {
        return try IGPClientSearchUsernameResponse.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        guard isInitialized() else {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message")
        }

        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasIgpResponse {
            jsonMap["IGPResponse"] = try igpResponse.encode()
        }
        if !igpResult.isEmpty {
            var jsonArrayIgpResult:Array<Dictionary<String,Any>> = []
            for oneValueIgpResult in igpResult {
                let ecodedMessageIgpResult = try oneValueIgpResult.encode()
                jsonArrayIgpResult.append(ecodedMessageIgpResult)
            }
            jsonMap["IGPResult"] = jsonArrayIgpResult
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder.fromJSONToBuilder(data:data).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasIgpResponse {
            output += "\(indent) igpResponse {\n"
            if let outDescIgpResponse = igpResponse {
                output += try outDescIgpResponse.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        var igpResultElementIndex:Int = 0
        for oneElementIgpResult in igpResult {
            output += "\(indent) igpResult[\(igpResultElementIndex)] {\n"
            output += try oneElementIgpResult.getDescription(indent: "\(indent)  ")
            output += "\(indent)}\n"
            igpResultElementIndex += 1
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasIgpResponse {
                if let hashValueigpResponse = igpResponse?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueigpResponse
                }
            }
            for oneElementIgpResult in igpResult {
                hashCode = (hashCode &* 31) &+ oneElementIgpResult.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "IGPClientSearchUsernameResponse"
    }
    override public func className() -> String {
        return "IGPClientSearchUsernameResponse"
    }
    //Meta information declaration end

    final public class Builder : GeneratedResponseMessageBuilder {
        fileprivate var builderResult:IGPClientSearchUsernameResponse = IGPClientSearchUsernameResponse()
        public func getMessage() -> IGPClientSearchUsernameResponse {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var igpResponse:IGPResponse! {
            get {
                if igpResponseBuilder_ != nil {
                    builderResult.igpResponse = igpResponseBuilder_.getMessage()
                }
                return builderResult.igpResponse
            }
            set (value) {
                builderResult.hasIgpResponse = true
                builderResult.igpResponse = value
            }
        }
        public var hasIgpResponse:Bool {
            get {
                return builderResult.hasIgpResponse
            }
        }
        fileprivate var igpResponseBuilder_:IGPResponse.Builder! {
            didSet {
                builderResult.hasIgpResponse = true
            }
        }
        public func getIgpResponseBuilder() -> IGPResponse.Builder {
            if igpResponseBuilder_ == nil {
                igpResponseBuilder_ = IGPResponse.Builder()
                builderResult.igpResponse = igpResponseBuilder_.getMessage()
                if igpResponse != nil {
                    try! igpResponseBuilder_.mergeFrom(other: igpResponse)
                }
            }
            return igpResponseBuilder_
        }
        @discardableResult
        public func setIgpResponse(_ value:IGPResponse!) -> IGPClientSearchUsernameResponse.Builder {
            self.igpResponse = value
            return self
        }
        @discardableResult
        public func mergeIgpResponse(value:IGPResponse) throws -> IGPClientSearchUsernameResponse.Builder {
            if builderResult.hasIgpResponse {
                builderResult.igpResponse = try IGPResponse.builderWithPrototype(prototype:builderResult.igpResponse).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.igpResponse = value
            }
            builderResult.hasIgpResponse = true
            return self
        }
        @discardableResult
        public func clearIgpResponse() -> IGPClientSearchUsernameResponse.Builder {
            igpResponseBuilder_ = nil
            builderResult.hasIgpResponse = false
            builderResult.igpResponse = nil
            return self
        }
        public var igpResult:Array<IGPClientSearchUsernameResponse.IGPResult> {
            get {
                return builderResult.igpResult
            }
            set (value) {
                builderResult.igpResult = value
            }
        }
        @discardableResult
        public func setIgpResult(_ value:Array<IGPClientSearchUsernameResponse.IGPResult>) -> IGPClientSearchUsernameResponse.Builder {
            self.igpResult = value
            return self
        }
        @discardableResult
        public func clearIgpResult() -> IGPClientSearchUsernameResponse.Builder {
            builderResult.igpResult.removeAll(keepingCapacity: false)
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> IGPClientSearchUsernameResponse.Builder {
            builderResult = IGPClientSearchUsernameResponse()
            return self
        }
        override public func clone() throws -> IGPClientSearchUsernameResponse.Builder {
            return try IGPClientSearchUsernameResponse.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> IGPClientSearchUsernameResponse {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> IGPClientSearchUsernameResponse {
            let returnMe:IGPClientSearchUsernameResponse = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:IGPClientSearchUsernameResponse) throws -> IGPClientSearchUsernameResponse.Builder {
            if other == IGPClientSearchUsernameResponse() {
                return self
            }
            if (other.hasIgpResponse) {
                try mergeIgpResponse(value: other.igpResponse)
            }
            if !other.igpResult.isEmpty  {
                 builderResult.igpResult += other.igpResult
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchUsernameResponse.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:IGPResponse.Builder = IGPResponse.Builder()
                    if hasIgpResponse {
                        try subBuilder.mergeFrom(other: igpResponse)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    igpResponse = subBuilder.buildPartial()

                case 18:
                    let subBuilder = IGPClientSearchUsernameResponse.IGPResult.Builder()
                    try codedInputStream.readMessage(builder: subBuilder,extensionRegistry:extensionRegistry)
                    igpResult.append(subBuilder.buildPartial())

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> IGPClientSearchUsernameResponse.Builder {
            let resultDecodedBuilder = IGPClientSearchUsernameResponse.Builder()
            if let jsonValueIgpResponse = jsonMap["IGPResponse"] as? Dictionary<String,Any> {
                resultDecodedBuilder.igpResponse = try IGPResponse.Builder.decodeToBuilder(jsonMap:jsonValueIgpResponse).build()

            }
            if let jsonValueIgpResult = jsonMap["IGPResult"] as? Array<Dictionary<String,Any>> {
                var jsonArrayIgpResult:Array<IGPClientSearchUsernameResponse.IGPResult> = []
                for oneValueIgpResult in jsonValueIgpResult {
                    let messageFromStringIgpResult = try IGPClientSearchUsernameResponse.IGPResult.Builder.decodeToBuilder(jsonMap:oneValueIgpResult).build()

                    jsonArrayIgpResult.append(messageFromStringIgpResult)
                }
                resultDecodedBuilder.igpResult = jsonArrayIgpResult
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data) throws -> IGPClientSearchUsernameResponse.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: JSONSerialization.ReadingOptions(rawValue: 0))
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try IGPClientSearchUsernameResponse.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension IGPClientSearchUsername: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientSearchUsername> {
        var mergedArray = Array<IGPClientSearchUsername>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientSearchUsername? {
        return try IGPClientSearchUsername.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder().mergeFrom(data: data, extensionRegistry:ClientSearchUsernameRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsername {
        return try IGPClientSearchUsername.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpRequest": return self.igpRequest
        case "igpQuery": return self.igpQuery
        default: return nil
        }
    }
}
extension IGPClientSearchUsername.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPClientSearchUsername
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpRequest": return self.igpRequest
            case "igpQuery": return self.igpQuery
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpRequest":
                guard let newSubscriptValue = newSubscriptValue as? IGPRequest else {
                    return
                }
                self.igpRequest = newSubscriptValue
            case "igpQuery":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.igpQuery = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPClientSearchUsernameResponse: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientSearchUsernameResponse> {
        var mergedArray = Array<IGPClientSearchUsernameResponse>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientSearchUsernameResponse? {
        return try IGPClientSearchUsernameResponse.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder().mergeFrom(data: data, extensionRegistry:ClientSearchUsernameRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse {
        return try IGPClientSearchUsernameResponse.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpResponse": return self.igpResponse
        case "igpResult": return self.igpResult
        default: return nil
        }
    }
}
extension IGPClientSearchUsernameResponse.IGPResult: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<IGPClientSearchUsernameResponse.IGPResult> {
        var mergedArray = Array<IGPClientSearchUsernameResponse.IGPResult>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> IGPClientSearchUsernameResponse.IGPResult? {
        return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> IGPClientSearchUsernameResponse.IGPResult {
        return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeFrom(data: data, extensionRegistry:ClientSearchUsernameRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse.IGPResult {
        return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> IGPClientSearchUsernameResponse.IGPResult {
        return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse.IGPResult {
        return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> IGPClientSearchUsernameResponse.IGPResult {
        return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> IGPClientSearchUsernameResponse.IGPResult {
        return try IGPClientSearchUsernameResponse.IGPResult.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "igpType": return self.igpType
        case "igpExactMatch": return self.igpExactMatch
        case "igpUser": return self.igpUser
        case "igpRoom": return self.igpRoom
        default: return nil
        }
    }
}
extension IGPClientSearchUsernameResponse.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPClientSearchUsernameResponse
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpResponse": return self.igpResponse
            case "igpResult": return self.igpResult
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpResponse":
                guard let newSubscriptValue = newSubscriptValue as? IGPResponse else {
                    return
                }
                self.igpResponse = newSubscriptValue
            case "igpResult":
                guard let newSubscriptValue = newSubscriptValue as? Array<IGPClientSearchUsernameResponse.IGPResult> else {
                    return
                }
                self.igpResult = newSubscriptValue
            default: return
            }
        }
    }
}
extension IGPClientSearchUsernameResponse.IGPResult.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = IGPClientSearchUsernameResponse.IGPResult
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "igpType": return self.igpType
            case "igpExactMatch": return self.igpExactMatch
            case "igpUser": return self.igpUser
            case "igpRoom": return self.igpRoom
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "igpType":
                guard let newSubscriptValue = newSubscriptValue as? IGPClientSearchUsernameResponse.IGPResult.IGPType else {
                    return
                }
                self.igpType = newSubscriptValue
            case "igpExactMatch":
                guard let newSubscriptValue = newSubscriptValue as? Bool else {
                    return
                }
                self.igpExactMatch = newSubscriptValue
            case "igpUser":
                guard let newSubscriptValue = newSubscriptValue as? IGPRegisteredUser else {
                    return
                }
                self.igpUser = newSubscriptValue
            case "igpRoom":
                guard let newSubscriptValue = newSubscriptValue as? IGPRoom else {
                    return
                }
                self.igpRoom = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
